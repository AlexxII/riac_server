{"version":3,"sources":["mainconfig.js","serviceWorker.js","cache.js","containers/UserProfile/mutations.js","containers/App/queries.js","containers/UserProfile/index.js","components/ServiceMenu/ServiceMenu.js","components/HomeBar/HomeBar.js","modules/PollHome/components/PollAvatar/PollAvatar.js","modules/PollHome/lib/constants.js","modules/PollHome/components/PollCard/PollCard.js","modules/PollHome/components/ListOfPolls/ListOfPolls.js","modules/PollHome/lib/utils.js","modules/PollHome/components/XmlInput/index.js","modules/PollHome/components/AddPollDialog/AddPollDialog.js","components/AddFab/AddFab.js","modules/PollHome/components/AddPollLogic/AddPollLogic.js","components/LoadingState/LoadingState.js","components/LoadingStatus/LoadingStatus.js","components/SystemNoti/SystemNoti.js","components/ErrorState/ErrorState.js","modules/PollHome/components/TestBtn/TestBtn.js","modules/PollHome/queries.js","modules/PollHome/mutations.js","modules/PollHome/PollHome.js","pages/HomePage.js","components/SettingBar/index.js","modules/PollDrive/components/FreeAnswer/index.js","modules/PollDrive/components/Answer/index.js","modules/PollDrive/components/MultipleAnswers/index.js","modules/PollDrive/components/Question/index.js","modules/PollDrive/components/FinishDialog/index.js","modules/PollDrive/lib/keycodes.js","modules/PollDrive/lib/defineSelectedAnswer.js","modules/PollDrive/lib/questionFormation.js","modules/PollDrive/lib/beep.js","modules/PollDrive/components/DriveLogic/DriveLogic.js","components/DialogWithSelect/index.js","modules/PollDrive/queries.js","modules/PollDrive/mutaions.js","modules/PollDrive/lib/utils.js","modules/PollDrive/PollDrive.js","pages/DrivePage.js","components/AdaptiveTabs/AdaptiveTabs.js","modules/PollResults/containers/Generation/queries.js","modules/PollResults/containers/Generation/index.js","components/ConfirmDialog/ConfirmDialog.js","modules/PollResults/components/RespondentCard/index.js","modules/PollResults/components/DataGrid/DataGrid.js","modules/PollResults/components/Filters/Filters.js","modules/PollResults/components/AnswersCard/AnswerCard.js","modules/PollResults/components/QuestionCard/QuestionCard.js","modules/PollResults/components/BatchUpdate/BatchUpdate.js","modules/PollResults/containers/OverallResults/queries.js","modules/PollResults/containers/OverallResults/mutations.js","modules/PollResults/containers/OverallResults/OverallResults.js","modules/PollResults/components/BarChart/BarChart.js","modules/PollResults/components/LinearTable/LinearTable.js","modules/PollResults/containers/LinearDistribution/queries.js","modules/PollResults/containers/LinearDistribution/LinearDistribution.js","modules/PollResults/containers/BatchInput/queries.js","modules/PollResults/containers/BatchInput/BatchInput.js","modules/PollResults/PollResults.js","pages/ResultsPage.js","modules/DataAnalyzer/lib/xmlparser.js","modules/DataAnalyzer/components/ParchaXmlAnalyzer/index.js","modules/DataAnalyzer/components/WarShow/index.js","modules/DataAnalyzer/lib/txtparser.js","modules/DataAnalyzer/components/WordAnalyzer/index.js","modules/DataAnalyzer/index.js","pages/AnalyzePage.js","pages/TesterPage.js","modules/PollSettings/containers/Common/queries.js","modules/PollSettings/containers/Common/Common.js","modules/PollSettings/containers/ConfigEditor/queries.js","modules/PollSettings/containers/ConfigEditor/mutations.js","modules/PollSettings/containers/ConfigEditor/ConfigEditor.js","modules/PollSettings/containers/DeletePoll/mutations.js","modules/PollSettings/containers/DeletePoll/DeletePoll.js","modules/PollSettings/containers/CitiesEditor/queries.js","modules/PollSettings/containers/CitiesEditor/mutations.js","modules/PollSettings/containers/CitiesEditor/CitiesEditor.js","modules/PollSettings/components/QuestionCard/index.js","modules/PollSettings/containers/ReoderEditor/queries.js","modules/PollSettings/containers/ReoderEditor/mutations.js","modules/PollSettings/containers/ReoderEditor/ReoderEditor.js","modules/PollSettings/PollSettings.js","pages/SettingsPage.js","modules/PollFiles/index.js","pages/AttachmentPage.js","modules/PollWiki/index.js","pages/WikiPage.js","modules/PollAppSettings/containers/Cities/queries.js","modules/PollAppSettings/containers/Cities/mutations.js","modules/PollAppSettings/containers/Cities/Cities.js","modules/PollAppSettings/containers/Sample/Sample.js","modules/PollAppSettings/PollAppSettings.js","pages/PollAppSettingsPage.js","modules/Users/components/UserAddDialog/UserAddDialog.js","modules/Users/components/UserUpdateDialog/UserUpdateDialog.js","modules/Users/components/PassResetDialog/PassResetDialog.js","modules/Users/components/UsersTable/UsersTable.js","modules/Users/queries.js","modules/Users/mutations.js","modules/Users/Users.js","pages/UsersPage.js","pages/NotFoundPage.js","containers/Router/index.js","components/SignInForm/index.js","containers/App/mutations.js","containers/App/App.js","index.js"],"names":["mainUrl","Boolean","window","location","hostname","match","cache","InMemoryCache","typePolicies","Poll","fields","question","read","LOGOUT_MUTATION","gql","CURRENT_USER_QUERY","UserProfile","close","currentUser","useApolloClient","readQuery","query","useState","anchorEl","setAnchorEl","isMenuOpen","useMutation","update","writeQuery","data","logout","handleMenuClose","renderMenu","Menu","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","MenuItem","onClick","IconButton","edge","aria-label","aria-controls","aria-haspopup","e","currentTarget","color","Badge","badgeContent","Tooltip","title","username","useStyles","makeStyles","list","width","fullList","ServiceMenu","classes","Drawer","anchor","className","clsx","role","onKeyDown","List","Typography","variant","style","fontSize","to","ListItem","button","key","ListItemIcon","ListItemText","primary","Divider","theme","grow","flexGrow","menuButton","marginRight","spacing","display","breakpoints","up","inputRoot","sectionDesktop","sectionMobile","link","textDecoration","HomeBar","React","appAnchorEl","setAppAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","menuOpen","setMenuOpen","isMobileMenuOpen","isAppMenuOpen","handleAppsMenuOpen","event","handleMobileMenuClose","handleAppMenuClose","renderAppsMenu","renderMobileMenu","AppBar","position","Toolbar","noWrap","StyledBadge","withStyles","badge","backgroundColor","boxShadow","palette","background","paper","top","left","height","borderRadius","animation","border","content","transform","opacity","root","avatar","ActiveAvatar","active","overlap","Avatar","liter","pollWays","pollTypes","maxWidth","margin","header","padding","flex","PollCard","Results","code","Drive","Attachment","Settings","Wiki","Card","CardHeader","PollAvatar","action","subheader","startDate","endDate","CardContent","Grid","container","item","xs","sm","gutterBottom","way","sample","CardActions","disableSpacing","cities","length","justify","ListOfPolls","polls","map","poll","i","xmlparser","xmlString","xml","parser","DOMParser","parsererrorNS","parseFromString","getElementsByTagName","namespaceURI","doc","getElementsByTagNameNS","testXml","element","getAttribute","start","end","structure","backdrop","zIndex","drawer","XmlImport","field","props","errorMessage","setFieldValue","touched","name","onBlur","value","onChange","processing","setProcessing","undefined","count","fileUpload","useRef","Fragment","Backdrop","CircularProgress","type","preventDefault","reader","FileReader","file","target","files","onloadend","xmlText","result","console","log","regEx","replace","readAsText","Button","startIcon","current","click","TextInputComponent","label","TextField","fullWidth","error","helperText","InputLabelProps","shrink","SelectInputComponent","array","select","option","AddPollDialog","closeHndl","saveHndl","SUPPORTED_FORMATS","validationSchema","yup","shape","required","startdate","enddate","matches","min","ensure","xmlfile","test","size","includes","Dialog","disableBackdropClick","disableEscapeKeyDown","aria-labelledby","aria-describedby","DialogTitle","DialogContent","initialValues","comment","validateOnBlur","onSubmit","values","setSubmitting","errors","isSubmitting","dirty","handleSubmit","handleReset","handleChange","handleBlur","component","XmlInput","DialogActions","disabled","small","bottom","right","AddFub","Fab","AddPollLogic","addPoll","openDialog","setOpenDialog","xmlParse","questions","logic","topic","Promise","resolve","reject","questionsLen","questionData","limit","order","answers","questionAnswers","answersLen","answerData","padStart","defaultLogic","logicLen","logicData","restrict","topics","topicsLen","topicData","basicLogicFormation","basicLogic","reduce","acum","val","exclude","unique","extLogic","filter","obj","difficult","freeAnswers","AddFab","xmlFile","then","basicData","pollInfo","variables","newPoll","shortTitle","poolOfQuestions","LoadingState","imageWidth","imageHeight","Box","textAlign","image","clone","mb","description","defaultProps","LoadingStatus","SystemNoti","Alert","elevation","Snackbar","autoHideDuration","duration","severity","text","popover","pointerEvents","ErrorState","handlePopoverOpen","handlePopoverClose","PopOver","Popover","disableRestoreFocus","onMouseEnter","onMouseLeave","speedDial","GET_ALL_ACTIVE_POLLS","ADD_NEW_POLL","PollHome","noti","setNoti","useQuery","pollsLoading","loading","pollsError","pollsData","onError","addLoading","Loading","Container","HomePage","arrow","SettingBar","FreeAnswer","answer","focusHandler","blurHandler","textInput","useEffect","focus","freeAnswerText","showFreeAnswer","ref","data-code","data-keycode","keyCode","placeholder","onKeyUp","replaceAll","blur","onFocus","Answer","clickHandler","settings","answerRef","answerCls","answerTitle","selected","push","join","showIndex","codesShow","freeAnswer","excludeM","marginTop","errorText","Tags","multipleHandler","setAnswers","codes","setCodes","state","setError","defVal","codesOfAnswers","Autocomplete","multiple","options","reason","getOptionLabel","getOptionDisabled","renderOption","renderTags","getTagProps","index","Chip","renderInput","params","Question","mega","FinishDialog","handleClose","finishAll","confirm","DialogContentText","autoFocus","serviceBtns","resetBtn","confirmBtns","castCodes","97","98","99","100","101","102","103","104","105","answersCodes","keycodes","cast","defineSelectedAnswer","checkAnswerSelected","do","trueCode","checkServiceBtn","checkResetBtn","checkConfirmBtn","questionFormation","setResults","keyCodesPool","codesPool","visibleAnswers","invisible","criticalExclude","uniqueIn","selectedIn","uniqueSelected","newAnswers","suffix","pool","answerCode","qSuffix","megaMltp","prevState","next","mAnswers","beep","config","audioCtx","AudioContext","webkitAudioContext","Object","assign","volume","frequency","oscillator","createOscillator","gainNode","createGain","connect","destination","gain","setTimeout","stop","PollDrive","logics","setCurrentQuestion","saveAndGoBack","saveWorksheet","questionsLimit","setQuestion","userSettings","setUserSettings","direction","setDirection","setCount","results","finish","setFinish","finishDialog","setFinishDialog","inlineMessage","setInlineMessage","keyUpHandler","nodeName","nextStep","mainLogic","confirmResults","resetAnswers","finishRespondent","goToNext","goToPrevious","document","addEventListener","removeEventListener","newQuestion","checkRespondentFinish","newResults","resPool","eCode","savedCodes","excludePool","selectedAnswer","el","answerId","nonCriticalExclude","newResultState","InlineInformer","alignItems","md","FormControlLabel","control","Checkbox","defaultChecked","labelPlacement","Hidden","only","mdUp","dataset","selectedCode","selectedKeyCode","keycode","resultsPool","clearPool","DialogWithSelect","save","setState","Select","native","selectedIndex","innerHTML","GET_POLL_DATA","SAVE_NEW_RESULT","parseIni","area","regex","section","param","lines","split","forEach","line","parseParams","property","concatLogic","temp","trimData","srange","output","exec","range","concat","rangeToArray","normalizeLogic","normalizedLogic","critical","invisiblePool","client","show","message","history","useHistory","setPoll","poolOfCities","setPoolOfCities","openCityDialog","setOpenCityDialog","setPollLogic","currentCity","setCurrentCity","currentQuestion","onCompleted","_","__","handleConfigFile","path","filePath","fetch","r","normLogic","saveResult","saveLoading","newOrderQuestion","slice","sort","a","b","visibleQuestions","lAnswers","JSON","stringify","prepareResultData","city","DriveLogic","user","res","DrivePage","useParams","TabPanel","children","p","other","hidden","allProps","tabs","minWidth","borderRight","divider","overflow","Vertical","Tabs","orientation","scrollButtons","Tab","Horizontal","AdaptiveTabs","setValue","newValue","xsDown","smUp","Generation","setQuestions","setLogic","questionsCount","answersCount","modQuestions","worksheetsCount","ConfirmDialog","RespondentCard","edit","Paper","processed","checked","inputProps","created","lastModified","DataGrid","selectPool","setSelectPool","lastSelectedIndex","setLastSelectedIndex","showDetails","datails","handleEdit","handleSelect","inData","nativeEvent","shiftKey","rr","ctrlKey","n","lg","Filters","filters","setActiveFilters","age","category","intervs","intervievers","interv","sex","status","avaiableFilters","newFilter","setNewFilters","setEmpty","updated","setUpdated","icon","checkedIcon","shownDate","RegExp","date","InputProps","startAdornment","InputAdornment","cursor","limitTags","disableCloseOnSelect","clearOnEscape","ages","noOptionsText","groupBy","ct","ServiceIcons","AnswerCard","totalAnswers","CountR","len","respondent","toFixed","QuestionCard","curr","BatchUpdate","setOpen","useTheme","fullScreen","useMediaQuery","down","GET_FILTER_SELECTS","GET_POLL_RESULTS","DELETE_RESULTS","OverallResults","delOpen","setDelOpen","activeResults","setActiveResults","activeFilters","pollResults","pollResultsLoading","pollResultsError","filtersResults","filtersResultsLoading","filtersResultsError","deletedPool","deleteResults","del","modify","existingRefs","readField","respRef","deleteResult","loadOnDelete","newResult","downloadIt","createElement","Blob","href","URL","createObjectURL","download","body","appendChild","lResults","allResults","details","m","BarChart","labels","set","chartRef","myChartRef","getContext","Chart","datasets","showLines","hover","animationDuration","responsiveAnimationDuration","legend","fontColor","scales","yAxes","ticks","beginAtZero","LinearTable","colspan","GET_POLL_WITH_RESULTS","LinearDistribution","BatchInput","dataPool","setDataPool","displayData","setDisplayData","pollData","resultPoolLength","newQuestionsPool","newAnswersPool","pollDataLoading","pollDataError","onInput","oprArray","arr","aLength","splitedCodesArrays","tempAr","tempLength","normTemp","j","atomData","trim","PollResults","outData","resultData","unit","lan","lon","lQuestions","answersPool","ParchaXmlAnalyzer","parchaData","setParchaData","UnitInfo","toString","WarShow","person","placesOfWork","places","workD","workDays","d","substring","processLists","war","pens","resulNeedData","doesNotMatch","warMatchPool","pensData","empty","need","warPersonName","warPersonBorn","warPersonSurname","toLowerCase","comp","pensNeedData","resultNotNeedData","warPersonNum","warPersonRank","warPersonDismissal","persD","compareLists","finalResult","personData","splited","glueNormData","getDateFromString","dString","dd","month","year","placesRaw","dates","work","dataReg","k","WordAnalyzer","setPensData","warData","setWarData","setMessage","ready","setReady","processedData","setProcessedData","finalData","setFinalData","persons","warior","full","pensParser","pData","itrestPerson","dateReg","dateOfDismissal","Date","parse","dateMatch","maxNeedDate","parseInt","workDate","workArray","dateInWork","PollSettings","Analyze","paddingTop","DataAnalyzer","TesterPage","QuestionTopic","CommonSetting","handleConfigFileAndUpdateCache","updatedQuestions","modulateQuestionsWithLogic","ffffuck","logicQuery","saveConfigChanges","ConfigEditor","setConfig","setFilePath","textRef","pollLogic","refetchQueries","saveConfig","configSaveLoading","defaultValue","DELETE_POLL","DeletePoll","incorrect","setIncorrect","delPoll","toUpperCase","handlePollDel","GET_ALL_CITIES_AND_ACTIVE","DELETE_CITY_FROM_ACTIVE","SET_ACTIVE_CITIES","CitiesEditor","clear","setClear","delId","setDelId","allCities","setAllCitites","availableCities","setAvailableCities","setSelected","pollCities","citiesData","citiesLoading","cititesError","setPollCity","setCityActive","cityActivationLoading","deleteCityFromActive","aCitites","deleteCity","deleteCityLoading","handleCityDelete","deleteCityCompletely","CityCard","xl","population","selectedCities","handleLimitInput","setVal","currentValue","pollQuery","saveNewLimit","saveNewOrder","ReoderEditor","setPrevOrder","pollLoading","pollError","saveLimit","limitSaveLoading","newOrder","saveOrder","saveOrderLoading","inputData","SortableItem","SortableElement","SortableList","SortableContainer","onSortEnd","oldIndex","newIndex","newArray","arrayMove","deltaArray","axis","Common","PollFiles","PollWiki","GET_CITITES_WITH_CATEGORIES","CITY_SAVE_MUTATION","CITY_EDIT_SAVE","DELETE_CITY","Cities","cityAdd","setCityAdd","citiesError","newCity","saveCity","saveCityLoading","cityEdit","saveCityEdit","saveCityEditLoading","editting","setEditting","CityAdd","setEdit","setTitle","setPopulation","setCategory","SelectProps","cityCategories","newData","handleSaveEdit","cityData","Sample","PollAppSettings","PollAppSettingsPage","UserAddDialog","saveNewUser","selects","userData","setUserData","login","password","FormControl","InputLabel","htmlFor","userStatus","FormHelperText","rights","userRights","UserUpdateDialog","updateUser","PassResetDialog","passReset","descendingComparator","orderBy","headCells","numeric","disablePadding","EnhancedTableHead","onSelectAllClick","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","indeterminate","headCell","align","TableSortLabel","hideSortIcon","visuallyHidden","useToolbarStyles","paddingLeft","paddingRight","highlight","secondary","main","lighten","light","dark","EnhancedTableToolbar","deleteDelete","setUserAddOpen","marginBottom","table","clip","UsersTable","users","addNewUser","deleteUsers","resetPassword","deleteDialog","setDeleteDialog","userAddOpen","userUpdate","setUserUpdate","setPassReset","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","TableContainer","Table","newSelecteds","TableBody","comparator","stabilizedThis","stableSort","getComparator","row","isItemSelected","indexOf","labelId","aria-checked","tabIndex","newSelected","handleClick","scope","handleRowEdit","handlePassReset","TablePagination","rowsPerPageOptions","labelRowsPerPage","onChangePage","newPage","onChangeRowsPerPage","GET_ALL_USERS","GET_AUTH_SELECTS","ADD_NEW_USER","UPDATE_USER","DELETE_USERS","RESET_PASSWORD","Users","dataLoading","dataError","selectsLoading","selectsError","deleteLoading","addUser","updateLoading","UsersPage","NotFoundPage","Router","exact","ResultsPage","SettingsPage","AnalyzePage","AttachmentPage","WikiPage","Copyright","getFullYear","flexDirection","form","submit","forget","SignIn","onLogin","userError","passwordError","setlogin","setPassword","CssBaseline","noValidate","autoComplete","SIGNIN_MUTATION","App","setPasswordError","setUserError","signin","signinLoading","SignInForm","ApolloClient","uri","credentials","connectToDevTools","ReactDOM","render","StrictMode","ApolloProvider","getElementById","navigator","serviceWorker","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9ac5221a.chunk.js","sourcesContent":["export const mainUrl = 'http://localhost:4000'\r\n// export const mainUrl = 'http://182.11.57.111:4000'\r\n// export const mainUrl = 'http://192.168.31.82:4000'","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { InMemoryCache } from '@apollo/client'\r\n\r\nexport const cache = new InMemoryCache({\r\n  typePolicies: {\r\n    Poll: {\r\n      fields: {\r\n        question: {\r\n          read(question) {\r\n            return question\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n})","import { gql } from '@apollo/client';\r\n\r\nexport const LOGOUT_MUTATION = gql`\r\n  mutation Logout {\r\n    logout\r\n  }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const CURRENT_USER_QUERY = gql`\r\n  query {\r\n    currentUser {\r\n      id\r\n      username\r\n    }\r\n  }\r\n`;","import React, { Fragment, useState } from 'react'\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport { gql, useApolloClient } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { LOGOUT_MUTATION } from './mutations'\r\nimport { CURRENT_USER_QUERY } from '../../containers/App/queries'\r\n\r\nconst UserProfile = ({ close }) => {\r\n  const client = useApolloClient();\r\n  const { currentUser } = client.readQuery({\r\n    query: gql`\r\n    query {\r\n      currentUser {\r\n        id\r\n        username\r\n      }\r\n    }\r\n    `,\r\n  })\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const [logout] = useMutation(\r\n    LOGOUT_MUTATION,\r\n    {\r\n      update: (cache) => cache.writeQuery({\r\n        query: CURRENT_USER_QUERY,\r\n        data: { currentUser: null },\r\n      }),\r\n    },\r\n  );\r\n  const menuId = 'account-menu';\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const handleProfileExit = () => {\r\n    logout()\r\n    handleMenuClose()\r\n  }\r\n  const handleProfileMenuOpen = (e) => {\r\n    setAnchorEl(e.currentTarget)\r\n  }\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      {/* <MenuItem onClick={handleMenuClose}>Профиль</MenuItem> */}\r\n      <MenuItem onClick={handleProfileExit}>Выход</MenuItem>\r\n    </Menu>\r\n  );\r\n  return (\r\n    <Fragment>\r\n      <IconButton\r\n        edge=\"end\"\r\n        aria-label=\"account of current user\"\r\n        aria-controls={menuId}\r\n        aria-haspopup=\"true\"\r\n        onClick={handleProfileMenuOpen}\r\n        color=\"inherit\"\r\n      >\r\n        <Badge badgeContent={0} color=\"secondary\">\r\n          <Tooltip\r\n            title={currentUser.username}\r\n          >\r\n            <AccountCircle />\r\n          </Tooltip>\r\n        </Badge>\r\n      </IconButton>\r\n      { renderMenu}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default UserProfile","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport AlarmOnIcon from '@material-ui/icons/AlarmOn';\r\nimport PieChartIcon from '@material-ui/icons/PieChart';\r\n\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n});\r\n\r\nexport default function ServiceMenu({ open, close }) {\r\n  const classes = useStyles();\r\n  const list = () => (\r\n    <div\r\n      className={clsx(classes.list)}\r\n      role=\"presentation\"\r\n      onClick={close}\r\n      onKeyDown={close}\r\n    >\r\n      <List>\r\n        <Typography variant=\"overline\" style={{ fontSize: '10px' }}>\r\n          подсистема опросов\r\n        </Typography>\r\n        <NavLink to='analyze'>\r\n          <ListItem button key={1}>\r\n            <ListItemIcon><PieChartIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Анализатор\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        {/* <NavLink to='tester'>\r\n          <ListItem button key={1}>\r\n            <ListItemIcon><AlarmOnIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Тест интерфейса\" />\r\n          </ListItem>\r\n        </NavLink> */}\r\n        <ListItem button key={1}>\r\n          <ListItemIcon><PhoneIcon /></ListItemIcon>\r\n          <ListItemText primary=\"Генератор номеров\" />\r\n        </ListItem>\r\n        <NavLink to='poll-app-settings'>\r\n          <ListItem button key={1}>\r\n            <ListItemIcon><SettingsIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Настройки\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <Typography variant=\"overline\" style={{ fontSize: '10px' }}>\r\n          общие\r\n        </Typography>\r\n        <Divider />\r\n        <NavLink to='settings/users'>\r\n          <ListItem button key={1}>\r\n            <ListItemIcon><GroupIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Пользователи\" />\r\n          </ListItem>\r\n        </NavLink>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Drawer anchor={'left'} open={open} onClose={close} className=\"left-app-menu\">\r\n      {list('left')}\r\n    </Drawer>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport UserProfile from '../../containers/UserProfile'\r\nimport ServiceMenu from '../ServiceMenu'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('xs')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  sectionDesktop: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  link: {\r\n    color: 'white',\r\n    textDecoration: 'none'\r\n  }\r\n}));\r\n\r\nconst HomeBar = ({ title }) => {\r\n  const classes = useStyles();\r\n  const [appAnchorEl, setAppAnchorEl] = React.useState(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n  const [menuOpen, setMenuOpen] = React.useState(false)\r\n\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n  const isAppMenuOpen = Boolean(appAnchorEl);\r\n\r\n  const handleAppsMenuOpen = (event) => {\r\n    setAppAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n\r\n  const handleAppMenuClose = () => {\r\n    setAppAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  }\r\n\r\n  const handleMobileMenuOpen = (event) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const openServiceMenu = (e) => {\r\n    setMenuOpen(true)\r\n  }\r\n\r\n  const closeServiceMenu = (e) => {\r\n    setMenuOpen(false)\r\n  }\r\n\r\n  const appsMenuId = 'primary-apps-menu';\r\n\r\n  const renderAppsMenu = (\r\n    <Menu\r\n      anchorEl={appAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={appsMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isAppMenuOpen}\r\n      onClose={handleAppMenuClose}\r\n    >\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_1</MenuItem>\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_2</MenuItem>\r\n    </Menu>\r\n  )\r\n\r\n  const mobileMenuId = 'primary-account-menu-mobile';\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem>\r\n        <IconButton color=\"inherit\">\r\n          <Badge badgeContent={0} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Уведомления</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={handleAppsMenuOpen}>\r\n        <IconButton\r\n          aria-label=\"more apps\"\r\n          aria-controls=\"primary-apps-menu\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\">\r\n          <AppsIcon />\r\n        </IconButton>\r\n        <p>Приложения</p>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <UserProfile />\r\n        <p>Profile</p>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            onClick={openServiceMenu}\r\n            aria-label=\"open drawer\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.sectionDesktop}>\r\n            <IconButton color=\"inherit\">\r\n              <Badge badgeContent={0} color=\"secondary\">\r\n                <NotificationsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <IconButton\r\n              aria-label=\"apps\"\r\n              aria-controls={appsMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleAppsMenuOpen}\r\n              color=\"inherit\">\r\n              <Badge badgeContent={0} color=\"secondary\">\r\n                <AppsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <UserProfile />\r\n          </div>\r\n          <div className={classes.sectionMobile}>\r\n            <IconButton\r\n              aria-label=\"show more\"\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleMobileMenuOpen}\r\n              color=\"inherit\"\r\n            >\r\n              <MoreIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <ServiceMenu open={menuOpen} close={closeServiceMenu} />\r\n      {renderMobileMenu}\r\n      {renderAppsMenu}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeBar","import React from 'react';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    backgroundColor: '#44b700',\r\n    color: '#44b700',\r\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n    '&::after': {\r\n      position: 'absolute',\r\n      top: '-1px',\r\n      left: '-1px',\r\n      width: '100%',\r\n      height: '100%',\r\n      borderRadius: '50%',\r\n      animation: '$ripple 1.2s infinite ease-in-out',\r\n      border: '1px solid currentColor',\r\n      content: '\"\"',\r\n    },\r\n  },\r\n  '@keyframes ripple': {\r\n    '0%': {\r\n      transform: 'scale(.8)',\r\n      opacity: 1,\r\n    },\r\n    '100%': {\r\n      transform: 'scale(2.4)',\r\n      opacity: 0,\r\n    },\r\n  },\r\n}))(Badge);\r\n\r\nconst useStyles = makeStyles(({\r\n  root: {\r\n    display: 'flex'\r\n  },\r\n  avatar: {\r\n    backgroundColor: data => data.color\r\n  }\r\n}));\r\n\r\nconst ActiveAvatar = ({ data }) => {\r\n  const classes = useStyles(data);\r\n  if (data.active) {\r\n    return (\r\n      <div className={classes.root}>\r\n        <StyledBadge\r\n          overlap=\"circle\"\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'right',\r\n          }}\r\n          variant=\"dot\"\r\n        >\r\n          <Avatar className={classes.avatar}>\r\n            <span className=\"poll-liter-title\">{data.liter}</span>\r\n          </Avatar>\r\n        </StyledBadge>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <Avatar className={classes.avatar}>\r\n        {data.liter}\r\n      </Avatar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ActiveAvatar","export const pollWays = [\r\n  'Интервьюирование',\r\n  'Анкетирование',\r\n  'Телефонный',\r\n  'WEB'\r\n]\r\n\r\nexport const pollTypes = [\r\n  'Всероссийский',\r\n  'Экспертный'\r\n]","import React, { Fragment } from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PollIcon from '@material-ui/icons/Poll';\r\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport PollAvatar from '../PollAvatar'\r\n\r\nimport { pollWays } from '../../lib/constants'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: '100%',\r\n    margin: '10px 0'\r\n  },\r\n  header: {\r\n    padding: '16px 16px 0 16px'\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    padding: '10px 16px 0 16px'\r\n  },\r\n}));\r\n\r\nconst PollCard = ({ data }) => {\r\n  const classes = useStyles();\r\n  const Results = () => {\r\n    return (\r\n      <Tooltip title=\"Результаты\">\r\n        <NavLink to={`/results/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <PollIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  const Drive = () => {\r\n    return (\r\n      <Tooltip title=\"Ввод результатов\">\r\n        <NavLink to={`/drive/${data.id}/${data.code}`}>\r\n          <IconButton >\r\n            <AssignmentTurnedInIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  const Attachment = () => {\r\n    return (\r\n      <Tooltip title=\"Файлы\">\r\n        <NavLink to={`/attachment/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  const Settings = () => {\r\n    return (\r\n      <Tooltip title=\"Настройки опроса\">\r\n        <NavLink to={`/poll-settings/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <SettingsIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  const Wiki = () => {\r\n    return (\r\n      <Tooltip title=\"Заметки\">\r\n        <NavLink to={`/poll-wiki/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <LibraryBooksIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Card className={classes.root}>\r\n        <CardHeader className={classes.header}\r\n          avatar={\r\n            <PollAvatar data={data} />\r\n          }\r\n          action={\r\n            <Settings />\r\n          }\r\n          title={data.code + ': ' + data.title}\r\n          subheader={data.startDate + ' - ' + data.endDate}\r\n        />\r\n        <CardContent className={classes.content}>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12} sm={6}>\r\n              <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                Метод проведения: {pollWays[data.way]}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                Респондентов: {data.sample}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <CardActions disableSpacing>\r\n          <Grid container item xs={12}>\r\n            <Results />\r\n            {data.cities.length ?\r\n              <Drive /> :\r\n              <Tooltip title=\"Города устанавливаются в настройках опроса\">\r\n                <Typography variant=\"overline\" display=\"block\" gutterBottom className=\"empty-cities-warning\">\r\n                  настройте города\r\n              </Typography>\r\n              </Tooltip>\r\n            }\r\n\r\n          </Grid>\r\n          <Grid container item xs={12} justify=\"flex-end\">\r\n            <Attachment />\r\n            <Wiki />\r\n          </Grid>\r\n        </CardActions>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PollCard","import React from 'react'\r\nimport PollCard from '../PollCard'\r\n\r\nconst ListOfPolls = ({ data }) => {\r\n  return data.polls.map((poll, i) => (\r\n    <PollCard key={i} data={poll} />\r\n  ))\r\n}\r\n\r\nexport default ListOfPolls","function testXml(xmlString) {\r\n  var parser = new DOMParser();\r\n  var docError = parser.parseFromString('INVALID', 'text/xml');\r\n  var parsererrorNS = docError.getElementsByTagName(\"parsererror\")[0].namespaceURI;\r\n  var doc = parser.parseFromString(xmlString, 'text/xml');\r\n  if (doc.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0) {\r\n    return false\r\n  }\r\n  return doc;\r\n}\r\n\r\nconst xmlparser = (xmlString) => {\r\n  const xml = testXml(xmlString)\r\n  if (xml) {\r\n    let data = {}\r\n    const element = xml.getElementsByTagName(\"opros\")[0]\r\n    data.title = element.getAttribute('name')\r\n    data.code = element.getAttribute('cod')\r\n    data.start = element.getAttribute('start_date')\r\n    data.end = element.getAttribute('end_date')\r\n    data.structure = {\r\n      data: ''\r\n    }\r\n    return data\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default xmlparser","import React, { useRef, useEffect, useState } from 'react'\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Button from '@material-ui/core/Button';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport xmlparser from '../../lib/utils'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst XmlImport = ({ field, ...props }) => {\r\n  const { errorMessage, touched, setFieldValue } = props;\r\n  const { name, value, onChange, onBlur } = field;\r\n  const [processing, setProcessing] = useState(false)\r\n  const [file, setFile] = useState(undefined)\r\n  const [count, setCount] = useState(0)\r\n  const classes = useStyles();\r\n  const fileUpload = useRef();\r\n  let fileReader\r\n\r\n  const upload = () => {\r\n    if (fileUpload) {\r\n      fileUpload.current.click();\r\n    }\r\n  }\r\n\r\n  const handleChg = (e) => {\r\n    e.preventDefault()\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        const xmlText = reader.result\r\n        const xml = xmlparser(xmlText)\r\n        if (xml) {\r\n          setProcessing(false)\r\n          const regEx = /^(\\d{2}).(\\d{2}).(\\d{4})$/;\r\n          setFieldValue('title', xml.title)\r\n          setFieldValue('startdate', xml.start.replace(regEx, `$3-$2-$1`))\r\n          setFieldValue('enddate', xml.end.replace(regEx, `$3-$2-$1`))\r\n          setFieldValue('code', xml.code)\r\n          setFieldValue('xmlfile', file)\r\n        } else {\r\n          console.log('Неправильный формат XML');\r\n          setFieldValue('mainconfig', '')\r\n          return\r\n        }\r\n      }\r\n      reader.readAsText(file);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Backdrop className={classes.backdrop} open={processing} >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n\r\n      <input\r\n        style={{ display: 'none' }}\r\n        id={name}\r\n        name={name}\r\n        type=\"file\"\r\n        id={name}\r\n        ref={fileUpload}\r\n        onBlur={onBlur}\r\n        // onChange={handleChange}\r\n        onInput={handleChg}\r\n      />\r\n      <Badge\r\n        color=\"secondary\"\r\n        badgeContent={count}\r\n        style={{ top: '5px' }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"default\"\r\n          startIcon={<PublishIcon />}\r\n          onClick={upload}\r\n        >\r\n          XML\r\n        </Button>\r\n      </Badge>\r\n      {errorMessage ? (\r\n        <Typography variant=\"caption\" color=\"error\">\r\n          {errorMessage}\r\n        </Typography>\r\n      ) : null}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default XmlImport","import React from \"react\";\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport { Formik, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nimport XmlInput from \"../XmlInput\";\r\n\r\nimport {pollTypes, pollWays} from '../../lib/constants'\r\n\r\nconst TextInputComponent = ({ field, ...props }) => {\r\n  const { errorMessage, label, type, touched } = props;\r\n  const { name, value, onChange, onBlur } = field;\r\n  return (\r\n    <div>\r\n      <TextField\r\n        fullWidth\r\n        type={type}\r\n        name={name}\r\n        label={label}\r\n        value={value}\r\n        error={touched && errorMessage ? true : false}\r\n        helperText={touched && errorMessage ? errorMessage : undefined}\r\n        onChange={onChange}\r\n        onBlur={onBlur}\r\n        InputLabelProps={{\r\n          shrink: true\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SelectInputComponent = ({ field, ...props }) => {\r\n  const { errorMessage, label, touched, array } = props;\r\n  const { name, value, onChange, onBlur } = field;\r\n  return (\r\n    <div>\r\n      <TextField\r\n        select\r\n        fullWidth\r\n        name={name}\r\n        label={label}\r\n        value={value}\r\n        error={touched && errorMessage ? true : false}\r\n        helperText={touched && errorMessage ? errorMessage : undefined}\r\n        onChange={onChange}\r\n        onBlur={onBlur}\r\n        InputLabelProps={{\r\n          shrink: true\r\n        }}\r\n      >\r\n        {array.map((option, i) => (\r\n          <MenuItem key={i} value={i}>\r\n            {option}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst AddPollDialog = ({ open, closeHndl, saveHndl }) => {\r\n  const FILE_SIZE = 1024 * 1024;                              // 1 mb\r\n  const codeRegExp = /^[A-Za-z]{3}[0-9]{2}-[0-9]{2}?$/\r\n  const SUPPORTED_FORMATS = [\r\n    \"text/xml\"\r\n  ];\r\n  const validationSchema = yup.object().shape({\r\n    title: yup.string().required(\"Обязательное поле\"),\r\n    startdate: yup.date().required('Обязательное поле'),\r\n    enddate: yup.date().required('Обязательное поле'),\r\n    code: yup.string().matches(codeRegExp, 'Формат не валидный').required('Обязательное поле'),\r\n    sample: yup.number().min(1, 'Не меньше одного').required('Обязательное поле'),\r\n    type: yup.string().ensure().required('Обязательное поле'),\r\n    way: yup.string().ensure().required('Обязательное поле'),\r\n    xmlfile: yup\r\n      .mixed()\r\n      .required(\"Обязательное поле формы\")\r\n      .test(\r\n        \"fileSize\",\r\n        \"Слишком большой файл\",\r\n        value => value && value.size <= FILE_SIZE\r\n      )\r\n      .test(\r\n        \"fileFormat\",\r\n        \"Неподдерживаемый формат\",\r\n        value => value && SUPPORTED_FORMATS.includes(value.type)\r\n      )\r\n  });\r\n  const submitHandling = (values, { setSubmitting }) => {\r\n    saveHndl(values)\r\n    closeHndl()\r\n    setSubmitting(true);\r\n  }\r\n  return (\r\n    <Dialog\r\n      className=\"add-poll-dialog\"\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n      open={open}\r\n      maxWidth={'sm'}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">Добавить опрос</DialogTitle>\r\n      <DialogContent>\r\n        <Formik\r\n          initialValues={{\r\n            xmlfile: undefined,\r\n            title: undefined,\r\n            startdate: undefined,\r\n            enddate: undefined,\r\n            code: undefined,\r\n            sample: 10,\r\n            type: 1,\r\n            way: 1,\r\n            comment: undefined\r\n          }}\r\n          validationSchema={validationSchema}\r\n          validateOnBlur={true}\r\n          onSubmit={submitHandling}\r\n        >\r\n          {\r\n            ({\r\n              saveHndl,\r\n              values,\r\n              errors,\r\n              touched,\r\n              dirty,\r\n              isSubmitting,\r\n              handleReset,\r\n              handleSubmit,\r\n              handleChange,\r\n              handleBlur,\r\n              setFieldValue\r\n            }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={6} sm={6}>\r\n                      <Field\r\n                        name=\"xmlfile\"\r\n                        component={XmlInput}\r\n                        setFieldValue={setFieldValue}\r\n                        errorMessage={errors[\"xmlfile\"] ? errors[\"xmlfile\"] : undefined}\r\n                        touched={touched[\"xmlfile\"]}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12}>\r\n                      <Field\r\n                        name=\"title\"\r\n                        type=\"text\"\r\n                        label=\"Наименование\"\r\n                        setFieldValue={setFieldValue}\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"title\"]}\r\n                        touched={touched[\"title\"]}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"startdate\"\r\n                        type=\"date\"\r\n                        label=\"Дата начала\"\r\n                        setFieldValue={setFieldValue}\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"startdate\"]}\r\n                        touched={touched[\"startdate\"]}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"enddate\"\r\n                        type=\"date\"\r\n                        label=\"Дата окончания\"\r\n                        setFieldValue={setFieldValue}\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"enddate\"]}\r\n                        touched={touched[\"enddate\"]}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"code\"\r\n                        label=\"Код опроса\"\r\n                        type=\"text\"\r\n                        setFieldValue={setFieldValue}\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"code\"]}\r\n                        touched={touched[\"code\"]}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"sample\"\r\n                        type=\"number\"\r\n                        label=\"Выборка\"\r\n                        setFieldValue={setFieldValue}\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"sample\"]}\r\n                        touched={touched[\"sample\"]}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"type\"\r\n                        label=\"Тип опроса\"\r\n                        array={pollTypes}\r\n                        setFieldValue={setFieldValue}\r\n                        component={SelectInputComponent}\r\n                        errorMessage={errors[\"type\"]}\r\n                        touched={touched[\"type\"]}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"way\"\r\n                        label=\"Способ проведения\"\r\n                        array={pollWays}\r\n                        component={SelectInputComponent}\r\n                        errorMessage={errors[\"way\"]}\r\n                        touched={touched[\"way\"]}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"comment\"\r\n                        label=\"Комментарии\"\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"comment\"]}\r\n                        touched={touched[\"comment\"]}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <DialogActions>\r\n                    <Button onClick={closeHndl} color=\"primary\">\r\n                      Отмена\r\n                    </Button>\r\n                    <Button type=\"submit\" disabled={isSubmitting}>\r\n                      Сохранить\r\n                    </Button>\r\n                  </DialogActions>\r\n                </form>\r\n              )\r\n          }\r\n        </Formik>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\nexport default AddPollDialog;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  small: {\r\n    position: 'fixed',\r\n    bottom: '30px',\r\n    right: '30px'\r\n  }\r\n}));\r\n\r\nconst AddFub = ({ onClick }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.small}>\r\n      <Fab color=\"secondary\" aria-label=\"add\" onClick={onClick}>\r\n        <AddIcon />\r\n      </Fab>\r\n    </div>\r\n  );\r\n}\r\nexport default AddFub","import React, { Fragment, useState } from 'react'\r\nimport AddPollDialog from '../AddPollDialog';\r\nimport AddFab from \"../../../../components/AddFab\";\r\n\r\nconst AddPollLogic = ({ addPoll }) => {\r\n  const [openDialog, setOpenDialog] = useState(false)\r\n  const openPollDialog = () => {\r\n    setOpenDialog(true)\r\n  }\r\n  const closeDialog = () => {\r\n    setOpenDialog(false)\r\n  }\r\n  const saveNewPoll = (data) => {\r\n    const xmlFile = data.xmlfile\r\n    if (xmlFile.size) {\r\n      let promise = new Promise((resolve, reject) => {\r\n        resolve(xmlParse(xmlFile))\r\n      })\r\n      promise.then(result => {\r\n        const basicData = basicLogicFormation(result)\r\n        const pollInfo = {\r\n          title: data.title,\r\n          startDate: data.startdate,\r\n          endDate: data.enddate,\r\n          code: data.code,\r\n          sample: data.sample,\r\n          type: data.type,\r\n          way: data.way,\r\n          comment: data.comment\r\n        }\r\n        addPoll({\r\n          variables: {\r\n            newPoll: {\r\n              ...pollInfo,\r\n              comment: pollInfo.comment ? pollInfo.comment : \"\",\r\n              shortTitle: '',\r\n              active: true\r\n            },\r\n            poolOfQuestions: basicData.questions,\r\n            logic: {\r\n              ...basicData.logic\r\n            },\r\n            topic: basicData.topic\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  const xmlParse = (file) => {\r\n    let result = {\r\n      questions: [],\r\n      logic: [],\r\n      topic: []\r\n    }\r\n    let reader = new FileReader();\r\n    return new Promise((resolve, reject) => {\r\n      reader.onloadend = () => {\r\n        const xmlText = reader.result\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(xmlText, 'text/xml');\r\n        const questions = doc.getElementsByTagName('vopros')\r\n        const questionsLen = questions.length\r\n        for (let i = 0; i < questionsLen; i++) {\r\n          let questionData = {\r\n            title: questions[i].getAttribute('text'),\r\n            topic: +questions[i].getAttribute('tema_id'),\r\n            limit: questions[i].getAttribute('limit') ? +questions[i].getAttribute('limit') : 1,\r\n            type: +questions[i].getAttribute('type_id'),\r\n            order: +questions[i].getAttribute('sort'),\r\n            answers: []\r\n          }\r\n          const questionAnswers = questions[i].getElementsByTagName('otvet')\r\n          const answersLen = questionAnswers.length\r\n          for (let i = 0; i < answersLen; i++) {\r\n            const answerData = {\r\n              title: questionAnswers[i].getAttribute('otvet_text'),\r\n              code: questionAnswers[i].getAttribute('otvet_cod').padStart(3, \"0\"),\r\n              type: +questionAnswers[i].getAttribute('otvet_type'),\r\n              order: +questionAnswers[i].getAttribute('otvet_sort')\r\n            }\r\n            questionData.answers[i] = answerData\r\n          }\r\n          result.questions[i] = questionData\r\n        }\r\n        const defaultLogic = doc.getElementsByTagName('restrict')\r\n        const logicLen = defaultLogic.length\r\n        if (logicLen) {\r\n          let logicData = []\r\n          for (let i = 0; i < logicLen; i++) {\r\n            const logic = {\r\n              code: defaultLogic[i].getAttribute('otvet_cod').padStart(3, \"0\"),\r\n              restrict: defaultLogic[i].getAttribute('restrict_cod').padStart(3, \"0\"),\r\n              type: defaultLogic[i].getAttribute('restrict_type')\r\n            }\r\n            logicData[i] = logic\r\n          }\r\n          result.logic = logicData\r\n        }\r\n        const topics = doc.getElementsByTagName('tema')\r\n        const topicsLen = topics.length\r\n        if (topicsLen) {\r\n          for (let i = 0; i < topicsLen; i++) {\r\n            const topicData = {\r\n              id: topics[i].getAttribute('id'),\r\n              title: topics[i].getAttribute('name')\r\n            }\r\n            result.topic[i] = topicData\r\n          }\r\n        }\r\n        resolve(result)\r\n      }\r\n      reader.readAsText(file);\r\n    })\r\n  }\r\n\r\n  const basicLogicFormation = (data) => {\r\n    const basicLogic = data.logic.reduce((acum, val, i) => {\r\n      if (val.type === '3') {\r\n        if (!acum.exclude[val.code]) {\r\n          acum.exclude[val.code] = { restrict: [val.restrict] }\r\n        } else {\r\n          acum.exclude[val.code] = {\r\n            restrict: [\r\n              ...acum.exclude[val.code].restrict,\r\n              val.restrict\r\n            ]\r\n          }\r\n        }\r\n      } else if (val.type === '5') {\r\n        acum.unique = [...acum.unique, val.code]\r\n      }\r\n      return acum\r\n    }, {\r\n      unique: [],\r\n      exclude: {}\r\n    })\r\n    const extLogic = data.questions.reduce((acum, val) => {\r\n      if (val.limit > 1) {\r\n        // если вопрос с множество ответов -> ответ 'Затрудняюсь ответить' (type = 3) - УНИКАЛЬНЫЙ\r\n        basicLogic.unique = [\r\n          ...basicLogic.unique,\r\n          ...val.answers.filter(obj => obj.type === 3).map(obj => obj.code)\r\n        ]\r\n      }\r\n      acum.difficult = [\r\n        ...acum.difficult,\r\n        ...val.answers.filter(obj => obj.type === 3).map(obj => obj.code)\r\n      ]\r\n      acum.freeAnswers = [\r\n        ...acum.freeAnswers,\r\n        ...val.answers.filter(obj => obj.type === 2).map(obj => obj.code)\r\n      ]\r\n      return acum\r\n    }, {\r\n      difficult: [],\r\n      freeAnswers: []\r\n    })\r\n    data.logic = {\r\n      ...basicLogic,\r\n      ...extLogic\r\n    }\r\n    return data\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <AddFab onClick={openPollDialog} />\r\n      <AddPollDialog open={openDialog} saveHndl={saveNewPoll} closeHndl={closeDialog} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default AddPollLogic","import React, { Fragment } from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Box, Typography } from \"@material-ui/core\";\r\n\r\nconst LoadingState = (props) => {\r\n  let imageWidth;\r\n  let imageHeight;\r\n  let variant;\r\n\r\n  switch (props.size) {\r\n    case \"small\":\r\n      imageWidth = 40;\r\n      imageHeight = 40;\r\n      variant = \"h6\";\r\n      break;\r\n\r\n    case \"medium\":\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n\r\n    case \"large\":\r\n      imageWidth = 100;\r\n      imageHeight = 100;\r\n      variant = \"h4\";\r\n      break;\r\n\r\n    default:\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n  }\r\n\r\n  if (props.type === \"page\") {\r\n    return (\r\n      <Box\r\n        style={{ transform: \"translate(-50%, -50%)\" }}\r\n        position=\"absolute\"\r\n        top=\"50%\"\r\n        left=\"50%\"\r\n        textAlign=\"center\"\r\n      >\r\n        {props.image && (\r\n          <Box\r\n            clone\r\n            mb={props.title || props.description ? 2 : 0}\r\n            width={`${imageWidth}%`}\r\n            height={`${imageHeight}%`}\r\n          >\r\n            {props.image}\r\n          </Box>\r\n        )}\r\n\r\n        {props.title && (\r\n          <Box mb={!props.description && props.button ? 2 : 0}>\r\n            <Typography variant={variant}>{props.title}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.description && (\r\n          <Box mb={props.button && 2}>\r\n            <Typography variant=\"body1\">{props.description}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.button && props.button}\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (props.type === \"card\") {\r\n    return (\r\n      <Box padding={props.padding} textAlign=\"center\">\r\n        {props.image && (\r\n          <Box\r\n            clone\r\n            mb={props.title || props.description ? 2 : 0}\r\n            width={`${imageWidth}%`}\r\n            height={`${imageHeight}%`}\r\n          >\r\n            {props.image}\r\n          </Box>\r\n        )}\r\n\r\n        {props.title && (\r\n          <Box mb={!props.description && props.button ? 2 : 0}>\r\n            <Typography variant={variant}>{props.title}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.description && (\r\n          <Box mb={props.button && 2}>\r\n            <Typography variant=\"body1\">{props.description}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.button && props.button}\r\n      </Box>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nLoadingState.defaultProps = {\r\n  image: <CircularProgress />,\r\n  title: 'Загрузка',\r\n  description: 'Подождите пожалуйста',\r\n  type: \"page\",\r\n  size: \"medium\",\r\n  padding: 2,\r\n};\r\n\r\n\r\nexport default LoadingState","import React from 'react'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst LoadingStatus = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Backdrop className={classes.backdrop} open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  )\r\n}\r\n\r\nexport default LoadingStatus","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst SystemNoti = (props) => {\r\n\r\n  const Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n  return (\r\n    <Snackbar open={props.open} autoHideDuration={props.duration} onClose={props.close}>\r\n      <Alert severity={props.type} onClose={props.close}>\r\n        {props.text}\r\n      </Alert>\r\n    </Snackbar>\r\n\r\n  )\r\n}\r\n\r\nSystemNoti.defaultProps = {\r\n  type: 'error',\r\n  duration: 4000\r\n}\r\n\r\nexport default SystemNoti","import React, { Fragment } from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Box, Typography } from \"@material-ui/core\";\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  popover: {\r\n    pointerEvents: 'none',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n\r\nconst ErrorState = (props) => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const classes = useStyles();\r\n\r\n  const handlePopoverOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handlePopoverClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n\r\n  const PopOver = ({ open }) => {\r\n    return (\r\n      <Popover\r\n        id=\"mouse-over-popover\"\r\n        className={classes.popover}\r\n        classes={{\r\n          paper: classes.paper,\r\n        }}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left',\r\n        }}\r\n        onClose={handlePopoverClose}\r\n        disableRestoreFocus\r\n      >\r\n        <Typography>{}</Typography>\r\n      </Popover>\r\n    )\r\n  }\r\n\r\n  let imageWidth;\r\n  let imageHeight;\r\n  let variant;\r\n\r\n  switch (props.size) {\r\n    case \"small\":\r\n      imageWidth = 40;\r\n      imageHeight = 40;\r\n      variant = \"h6\";\r\n      break;\r\n\r\n    case \"medium\":\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n\r\n    case \"large\":\r\n      imageWidth = 100;\r\n      imageHeight = 100;\r\n      variant = \"h4\";\r\n      break;\r\n\r\n    default:\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n  }\r\n\r\n  if (props.type === \"page\") {\r\n    return (\r\n      <Fragment>\r\n        <PopOver open={open} />\r\n        <Box\r\n          style={{ transform: \"translate(-50%, -50%)\" }}\r\n          position=\"absolute\"\r\n          top=\"50%\"\r\n          left=\"50%\"\r\n          textAlign=\"center\"\r\n        >\r\n          {props.image && (\r\n            <Box\r\n              clone\r\n              mb={props.title || props.description ? 2 : 0}\r\n              width={`${imageWidth}%`}\r\n              height={`${imageHeight}%`}\r\n            >\r\n              {props.image}\r\n            </Box>\r\n          )}\r\n\r\n          {props.title && (\r\n            <Box mb={!props.description && props.button ? 2 : 0}>\r\n              <Typography variant={variant}>{props.title}</Typography>\r\n            </Box>\r\n          )}\r\n\r\n          {props.description && (\r\n            <Box mb={props.button && 2}>\r\n              <Typography variant=\"body1\">{props.description}</Typography>\r\n            </Box>\r\n          )}\r\n          <HelpOutlineIcon\r\n            onMouseEnter={handlePopoverOpen}\r\n            onMouseLeave={handlePopoverClose}\r\n          />\r\n\r\n          {props.button && props.button}\r\n        </Box>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  if (props.type === \"card\") {\r\n    return (\r\n      <Fragment>\r\n        <PopOver open={open} />\r\n        <Box padding={props.padding} textAlign=\"center\">\r\n          {props.image && (\r\n            <Box\r\n              clone\r\n              mb={props.title || props.description ? 2 : 0}\r\n              width={`${imageWidth}%`}\r\n              height={`${imageHeight}%`}\r\n            >\r\n              {props.image}\r\n            </Box>\r\n          )}\r\n\r\n          {props.title && (\r\n            <Box mb={!props.description && props.button ? 2 : 0}>\r\n              <Typography variant={variant}>{props.title}</Typography>\r\n            </Box>\r\n          )}\r\n\r\n          {props.description && (\r\n            <Box mb={props.button && 2}>\r\n              <Typography variant=\"body1\">{props.description}</Typography>\r\n            </Box>\r\n          )}\r\n          <HelpOutlineIcon\r\n            onMouseEnter={handlePopoverOpen}\r\n            onMouseLeave={handlePopoverClose}\r\n          />\r\n\r\n          {props.button && props.button}\r\n        </Box>\r\n      </Fragment>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nErrorState.defaultProps = {\r\n  title: 'Ошибка',\r\n  description: 'Что-то пошло не так',\r\n  type: \"page\",\r\n  size: \"medium\",\r\n  padding: 2,\r\n};\r\n\r\n\r\nexport default ErrorState","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    position: 'fixed',\r\n    bottom: '30px',\r\n    right: '30px'\r\n  },\r\n  speedDial: {\r\n    position: 'absolute',\r\n    bottom: theme.spacing(2),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst actions = [\r\n  { icon: <FileCopyIcon />, name: 'Copy' },\r\n  { icon: <SaveIcon />, name: 'Save' },\r\n  { icon: <PrintIcon />, name: 'Print' },\r\n  { icon: <ShareIcon />, name: 'Share' },\r\n  { icon: <FavoriteIcon />, name: 'Like' },\r\n];\r\n\r\nexport default function SpeedDials() {\r\n  const classes = useStyles();\r\n  const [direction, setDirection] = React.useState('up');\r\n  const [open, setOpen] = React.useState(false);\r\n  const [hidden, setHidden] = React.useState(false);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Backdrop open={open} />\r\n\r\n      <SpeedDial\r\n        ariaLabel=\"SpeedDial example\"\r\n        className={classes.speedDial}\r\n        hidden={hidden}\r\n        icon={<SpeedDialIcon />}\r\n        onClose={handleClose}\r\n        onOpen={handleOpen}\r\n        open={open}\r\n        direction={direction}\r\n      >\r\n        {actions.map((action) => (\r\n          <SpeedDialAction\r\n            key={action.name}\r\n            icon={action.icon}\r\n            tooltipTitle={action.name}\r\n            tooltipOpen\r\n            onClick={handleClose}\r\n          />\r\n        ))}\r\n      </SpeedDial>\r\n    </div>\r\n  );\r\n}\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const GET_ALL_ACTIVE_POLLS = gql`\r\n  query {\r\n    polls {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      color\r\n      startDate\r\n      endDate\r\n      sample\r\n      way\r\n      type\r\n      complete\r\n      questionsCount\r\n      answersCount\r\n      active\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const ADD_NEW_POLL = gql`\r\n  mutation ($newPoll: PollWithConfig!, $poolOfQuestions: [QuestionInput], $logic: LogicInput, $topic: [TopicInput]) {\r\n    addPoll(poll: $newPoll, questions: $poolOfQuestions, logic: $logic, topic: $topic) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      color\r\n      startDate\r\n      endDate\r\n      sample\r\n      way\r\n      type\r\n      complete\r\n      questionsCount\r\n      answersCount\r\n      active\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\nimport Container from '@material-ui/core/Container'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport ListOfPolls from './components/ListOfPolls'\r\nimport AddPollLogic from './components/AddPollLogic'\r\nimport LoadingState from '../../components/LoadingState'\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\nimport SystemNoti from '../../components/SystemNoti'\r\nimport ErrorState from '../../components/ErrorState'\r\n\r\nimport TestBtn from './components/TestBtn'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_ACTIVE_POLLS } from \"./queries\"\r\nimport { ADD_NEW_POLL } from './mutations'\r\n\r\nconst PollHome = () => {\r\n  const [noti, setNoti] = useState(false)\r\n\r\n  const {\r\n    loading: pollsLoading,\r\n    error: pollsError,\r\n    data: pollsData\r\n  } = useQuery(GET_ALL_ACTIVE_POLLS)\r\n\r\n  const [addPoll, {\r\n    loading: addLoading\r\n  }] = useMutation(ADD_NEW_POLL, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Добавить не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data }) => {\r\n      const { polls } = cache.readQuery({ query: GET_ALL_ACTIVE_POLLS })\r\n      cache.writeQuery({ query: GET_ALL_ACTIVE_POLLS, data: { polls: [...polls, data.addPoll] } })\r\n    }\r\n  })\r\n\r\n  if (pollsLoading) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (pollsError) return (\r\n    <ErrorState\r\n      title=\"Что-то пошло не так\"\r\n      description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n    />\r\n  );\r\n\r\n  const Loading = () => {\r\n    if (addLoading)\r\n      return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <Container maxWidth=\"md\">\r\n        <ListOfPolls data={pollsData} />\r\n      </Container>\r\n      <AddPollLogic addPoll={addPoll} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollHome","import React, { Fragment } from 'react'\r\n\r\nimport HomeBar from '../components/HomeBar'\r\nimport PollHome from '../modules/PollHome'\r\n\r\nconst HomePage = () => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <HomeBar title={\"Опросы\"} />\r\n      <PollHome />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default HomePage","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    textDecoration: 'none'\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('xs')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  sectionDesktop: {\r\n    display: 'flex'\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  arrow: {\r\n    color: 'white',\r\n    textDecoration: 'none'\r\n  }\r\n}));\r\n\r\nconst SettingBar = ({ title }) => {\r\n  const classes = useStyles();\r\n  const [appAnchorEl, setAppAnchorEl] = React.useState(null);\r\n  const isAppMenuOpen = Boolean(appAnchorEl);\r\n\r\n  const handleAppsMenuOpen = (event) => {\r\n    setAppAnchorEl(event.currentTarget);\r\n  };\r\n  const handleAppMenuClose = () => {\r\n    setAppAnchorEl(null);\r\n  }\r\n\r\n  const appsMenuId = 'primary-apps-menu';\r\n\r\n  const renderAppsMenu = (\r\n    <Menu\r\n      anchorEl={appAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={appsMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isAppMenuOpen}\r\n      onClose={handleAppMenuClose}\r\n    >\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_1</MenuItem>\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_2</MenuItem>\r\n    </Menu>\r\n  )\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <NavLink to=\"/\">\r\n            <IconButton\r\n              edge=\"start\"\r\n              className={classes.menuButton}\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n            >\r\n              <ArrowBackIcon className={classes.arrow} />\r\n            </IconButton>\r\n          </NavLink>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.sectionDesktop}>\r\n            <IconButton\r\n              edge=\"end\"\r\n              aria-label=\"apps\"\r\n              aria-controls={appsMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleAppsMenuOpen}\r\n              color=\"inherit\">\r\n              <AppsIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {renderAppsMenu}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingBar","import React, { useRef, useEffect } from 'react'\r\n\r\nconst FreeAnswer = ({ answer, focusHandler, blurHandler }) => {\r\n  const textInput = useRef(null);\r\n  useEffect(() => {\r\n    if (answer.focus) {\r\n      textInput.current.focus()\r\n    }\r\n    if (answer.freeAnswerText !== '') {\r\n      textInput.current.value = answer.freeAnswerText\r\n    }\r\n  }, [])\r\n\r\n  const handlerInput = (e) => {\r\n    // замена запятой на \";\"\r\n    const regRex = /,/gi\r\n    let keyCode = e.keyCode\r\n    if (keyCode === 13) {\r\n      const val = textInput.current.value.replaceAll(regRex, ';')\r\n      textInput.current.value = val\r\n      e.currentTarget.blur()\r\n      return\r\n    } else if (keyCode === 27) {\r\n      if (textInput.current.value !== '') {\r\n        textInput.current.value = ''\r\n        return\r\n      }\r\n      e.currentTarget.blur()\r\n      return\r\n    }\r\n  }\r\n  if (answer.showFreeAnswer) {\r\n    return (\r\n      <span>\r\n        <input\r\n          className=\"free-answer\"\r\n          type=\"text\"\r\n          ref={textInput}\r\n          data-code={answer.code}\r\n          data-keycode={answer.keyCode}\r\n          placeholder=\"Введите свободный ответ\"\r\n          onKeyUp={handlerInput}\r\n          onFocus={focusHandler}\r\n          onBlur={blurHandler}\r\n        />\r\n      </span>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nexport default FreeAnswer","import React, { Fragment, useRef } from 'react'\r\nimport FreeAnswer from '../FreeAnswer'\r\nimport FlashOnSharpIcon from '@material-ui/icons/FlashOnSharp';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst Answer = ({ answer, clickHandler, focusHandler, blurHandler, settings }) => {\r\n  const answerRef = useRef(null)\r\n\r\n  let answerCls = ['answer-wrap']\r\n  let answerTitle = ['answer-title']\r\n  if (answer.selected) {\r\n    answerCls.push('selected')\r\n  }\r\n  if (answer.disabled) {\r\n    answerTitle.push('disabled')\r\n  }\r\n\r\n  const click = () => {\r\n    clickHandler(answerRef.current)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div onClick={(e) => click(e)}\r\n        className={answerCls.join(' ')}\r\n        ref={answerRef}\r\n        data-code={answer.keyCode} >\r\n        <div className={\"answer-title\"}>\r\n          <span className={\"answer-key\"}>{answer.showIndex}</span>\r\n          <span> </span>\r\n          {settings.codesShow &&\r\n            <span className={\"answer-code\"} >{answer.code}</span>\r\n          }\r\n          <span> - </span>\r\n          <span className={answerTitle.join(' ')}>{answer.title}</span>\r\n          <span className=\"free-answer-icon\">{answer.freeAnswer ? <EditIcon fontSize=\"small\" /> : null}</span>\r\n          <span className=\"answer-exclude-message\">{answer.excludeM}</span>\r\n        </div>\r\n        <div>\r\n          {answer.showFreeAnswer && (\r\n            <FreeAnswer\r\n              answer={answer}\r\n              focus={answer.focus}\r\n              focusHandler={focusHandler}\r\n              blurHandler={blurHandler}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Answer","import React, { useState, useEffect } from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 500,\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n  errorText: {\r\n    color: 'red'\r\n  }\r\n}));\r\n\r\nexport default function Tags({ data, limit, settings, multipleHandler }) {\r\n  const classes = useStyles();\r\n  const [answers, setAnswers] = useState([])\r\n  const [codes, setCodes] = useState([])\r\n  const [error, setError] = useState({\r\n    state: false,\r\n    text: ''\r\n  })\r\n\r\n  useEffect(() => {\r\n    const defVal = data.filter(val => {\r\n      if (val.selected) return val\r\n    })\r\n    const codesOfAnswers = data.map(val => val.code)\r\n    setCodes(codesOfAnswers)\r\n    setAnswers(defVal)\r\n  }, [])\r\n\r\n  const handleAnswerSelect = (e, value, reason) => {\r\n    switch (reason) {\r\n      case 'select-option':\r\n        if (value.length > limit) {\r\n          setError({ state: true, text: 'Максимальное количество ответов' })\r\n          return\r\n        }\r\n        setAnswers(value)\r\n        setError({ ...error, state: false })\r\n        break\r\n      case 'remove-option':\r\n        setAnswers(value)\r\n        setError({ ...error, state: false })\r\n        break\r\n      case 'clear':\r\n        setAnswers([])\r\n        setError({ ...error, state: false })\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const blurHandler = (e) => {\r\n    setError({ ...error, state: false })\r\n    multipleHandler(answers, codes)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Autocomplete\r\n        multiple={limit > 1}\r\n        id=\"tags-standard\"\r\n        options={data}\r\n        onChange={handleAnswerSelect}\r\n        value={answers}\r\n        getOptionLabel={(option) => option.title}\r\n        getOptionDisabled={(option) => option.disabled}\r\n        renderOption={(option) => {\r\n          if (settings.codesShow) {\r\n            return <span><span style={{ fontSize: '10px' }}>{option.code}</span> - {option.title}</span>\r\n          }\r\n          return option.title\r\n        }}\r\n        onBlur={blurHandler}\r\n        renderTags={(value, getTagProps) =>\r\n          value.map((option, index) => (\r\n            <Chip\r\n              {...getTagProps({ index })}\r\n              variant=\"outlined\"\r\n              key={index}\r\n              label={settings.codesShow ?\r\n                <span><span style={{ fontSize: '10px' }}>{option.code}</span> - {option.title}</span> :\r\n                <span>{option.title}</span>\r\n              }\r\n            />\r\n          ))\r\n        }\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            error={error.state}\r\n            variant=\"standard\"\r\n            label=\"Выберите ответы\"\r\n            helperText={error.state ? error.text : ''}\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}","import React, { Fragment, useState } from 'react'\r\nimport Answer from \"../Answer\";\r\nimport Tags from '../MultipleAnswers'\r\n\r\nconst Question = ({ count, question, clickHandler, focusHandler, blurHandler, multipleHandler, settings }) => {\r\n  function FlatAnswer() {\r\n    return (\r\n      question.answers.map((answer, i) => (\r\n        <Answer key={i} answer={answer}\r\n          clickHandler={clickHandler}\r\n          focusHandler={focusHandler}\r\n          blurHandler={blurHandler}\r\n          settings={settings}\r\n        />\r\n      )))\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <span className=\"drive-question-card\">\r\n        <h3 className=\"question-title-card\" >\r\n          <span className={\"question-number\"}>{count + 1}</span>\r\n          <span> - </span>\r\n          {question.title}</h3>\r\n        <div>{\r\n          !question.mega ?\r\n            question.answers.map((answer, i) => (\r\n              <Answer key={i} answer={answer}\r\n                clickHandler={clickHandler}\r\n                focusHandler={focusHandler}\r\n                blurHandler={blurHandler}\r\n                settings={settings}\r\n              />\r\n            )) : <Tags data={question.answers} limit={question.limit} settings={settings} multipleHandler={multipleHandler} />\r\n        }\r\n        </div>\r\n      </span>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Question","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst FinishDialog = ({ open, handleClose, finishAll, confirm }) => {\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Данная анкета завершена.\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Кажется данная анкета закончена. Перейти к другой анкете?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={finishAll} color=\"primary\">\r\n            Закончить\r\n          </Button>\r\n          <Button onClick={confirm} color=\"primary\" autoFocus>\r\n            Следующая\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FinishDialog","export const serviceBtns = [\r\n  8, 9, 16, 17, 18, 19, 20, 32,\r\n  33, 34, 35, 36, 38, 40, 91, 106,\r\n  107, 109, 110, 112, 113, 114, 115,\r\n  116, 117, 118, 119, 120, 121, 122, 123, 144\r\n];\r\n\r\nexport const resetBtn = [\r\n  27\r\n]\r\n\r\nexport const confirmBtns = [\r\n  48,\r\n  96,\r\n  13\r\n];\r\n\r\nexport const castCodes = {\r\n  97: 49,\r\n  98: 50,\r\n  99: 51,\r\n  100: 52,\r\n  101: 53,\r\n  102: 54,\r\n  103: 55,\r\n  104: 56,\r\n  105: 57\r\n};\r\n\r\nexport const answersCodes = [\r\n  37,\r\n  39,\r\n  49,\r\n  50,\r\n  51,\r\n  52,\r\n  53,\r\n  54,\r\n  55,\r\n  56,\r\n  57,\r\n  81,\r\n  87,\r\n  69,\r\n  82,\r\n  84,\r\n  89,\r\n  85,\r\n  73,\r\n  79,\r\n  80,\r\n  65,\r\n  83,\r\n  68,\r\n  70,\r\n  71,\r\n  72,\r\n  74,\r\n  75,\r\n  76,\r\n  90,\r\n  88,\r\n  67,\r\n  97,\r\n  98,\r\n  99,\r\n  100,\r\n  101,\r\n  102,\r\n  103,\r\n  104,\r\n  105\r\n]\r\n\r\nexport const keycodes = [\r\n  ['1', 49],\r\n  ['2', 50],\r\n  ['3', 51],\r\n  ['4', 52],\r\n  ['5', 53],\r\n  ['6', 54],\r\n  ['7', 55],\r\n  ['8', 56],\r\n  ['9', 57],\r\n  ['Q', 81],\r\n  ['W', 87],\r\n  ['E', 69],\r\n  ['R', 82],\r\n  ['T', 84],\r\n  ['Y', 89],\r\n  ['U', 85],\r\n  ['I', 73],\r\n  ['O', 79],\r\n  ['P', 80],\r\n  ['A', 65],\r\n  ['S', 83],\r\n  ['D', 68],\r\n  ['F', 70],\r\n  ['G', 71],\r\n  ['H', 72],\r\n  ['J', 74],\r\n  ['K', 75],\r\n  ['L', 76],\r\n  ['Z', 90],\r\n  ['X', 88],\r\n  ['C', 67],\r\n  ['V', 86],\r\n  ['B', 66],\r\n  ['N', 78],\r\n  ['M', 77]\r\n];","import { castCodes, serviceBtns, resetBtn, confirmBtns, answersCodes } from './keycodes'\r\n\r\n// приведение клавиш доп.клавиатуры к кодам основной цифровой клавиатуры\r\nfunction cast(keyCode) {\r\n  if (castCodes[keyCode] !== undefined) return castCodes[keyCode];\r\n  return keyCode;\r\n}\r\n\r\nfunction checkAnswerSelected(keyCode) {\r\n  return answersCodes.includes(keyCode)\r\n}\r\n\r\nfunction checkResetBtn(keyCode) {\r\n  return resetBtn.includes(keyCode)\r\n\r\n}\r\n\r\nfunction checkConfirmBtn(keyCode) {\r\n  return confirmBtns.includes(keyCode)\r\n}\r\n\r\nfunction checkServiceBtn(keyCode) {\r\n  return serviceBtns.includes(keyCode)\r\n}\r\n\r\nconst defineSelectedAnswer = (keyCode) => {\r\n  if (checkAnswerSelected(keyCode)) {\r\n    return {\r\n      do: 1,\r\n      trueCode: cast(keyCode)\r\n    }\r\n  }\r\n  if (checkServiceBtn(keyCode)) {\r\n    return {\r\n      do: 4\r\n    }\r\n  }\r\n  if (checkResetBtn(keyCode)) {\r\n    return {\r\n      do: 2\r\n    }\r\n  }\r\n  if (checkConfirmBtn(keyCode)) {\r\n    return {\r\n      do: 3\r\n    }\r\n  }\r\n  return {\r\n    do: 4\r\n  }\r\n}\r\n\r\nexport default defineSelectedAnswer","import { keycodes } from './keycodes'\r\n\r\n// формирует вопрос, на основании логики и ранее сохраненных результатов\r\nconst questionFormation = (poll, count, result, logic, setResults) => {\r\n  const question = poll.questions[count]\r\n  let keyCodesPool = []\r\n  let codesPool = []\r\n\r\n  // проверка на видимость ответа в перечне (ВНЕШНЯЯ ЛОГИКА - видимость)\r\n  const visibleAnswers = logic.invisible ? question.answers.filter(obj => !logic.invisible.includes(obj.code))\r\n    : question.answers\r\n\r\n  // если вопрос пропущен\r\n\r\n  const exclude = logic.criticalExclude ? logic.criticalExclude : false\r\n  let uniqueIn = false\r\n  let selectedIn = false\r\n  let uniqueSelected = false\r\n  const newAnswers = visibleAnswers.map((answer, i) => {\r\n    // надстройка для объекта - ответ\r\n    let suffix = {\r\n      freeAnswer: false,\r\n      showFreeAnswer: false,\r\n      freeAnswerText: '',\r\n      focus: false,\r\n      selected: false,\r\n      disabled: false,\r\n      exclude: [],\r\n      excludeM: ''\r\n    }\r\n    codesPool.push(answer.code)\r\n    // устанавливаем исключения\r\n    if (exclude) {\r\n      // заполняем поле exclude, в котором указаны все коды, которые будут исключены при выборе данного ответа\r\n      for (let code in exclude) {\r\n        if (code === answer.code) {\r\n          suffix = {\r\n            ...suffix,\r\n            exclude: [...suffix.exclude, ...exclude[code]]\r\n          }\r\n        }\r\n        if (exclude[code].includes(answer.code)) {\r\n          suffix = {\r\n            ...suffix,\r\n            exclude: [...suffix.exclude, code]\r\n          }\r\n        }\r\n      }\r\n      // проверяем не исключен ли данный ответ кодами, которые указаны в поле exclude\r\n      suffix.exclude.map(code => {\r\n        if (result.pool.includes(code)) {\r\n          suffix = {\r\n            ...suffix,\r\n            disabled: true,\r\n            excludeM: `противоречит коду ${code}`\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    if (visibleAnswers.length > keycodes.length) {\r\n      keyCodesPool[i] = [i, i + 1]\r\n    } else {\r\n      keyCodesPool[i] = keycodes[i][1]\r\n      suffix = {\r\n        ...suffix,\r\n        showIndex: keycodes[i][0],\r\n        keyCode: keycodes[i][1],\r\n      }\r\n    }\r\n    // восстанавливаем ответы !\r\n    if (result.pool.includes(answer.code)) {\r\n      selectedIn = true\r\n      suffix = {\r\n        ...suffix,\r\n        selected: true\r\n      }\r\n    }\r\n    // проверка на блокировку ответа (ВНЕШНЯЯ ЛОГИКА - уникальность)\r\n    if (logic.unique.includes(answer.code)) {\r\n      uniqueIn = true\r\n      suffix = {\r\n        ...suffix,\r\n        unique: true\r\n      }\r\n    }\r\n    if (logic.unique.includes(answer.code) & result.pool.includes(answer.code)) uniqueSelected = true\r\n\r\n    // проверка на свободный ответ (ВНЕШНЯЯ ЛОГИКА - свободный ответ)\r\n    if (logic.freeAnswers.includes(answer.code)) {\r\n      suffix = {\r\n        ...suffix,\r\n        freeAnswer: true,\r\n        focus: true\r\n      }\r\n    }\r\n    if (result[question.id]) {\r\n      let data = result[question.id].data\r\n      for (let i = 0; i < data.length; i++) {\r\n        if (answer.code === data[i].answerCode && data[i].freeAnswerText !== '') {\r\n          suffix = {\r\n            ...suffix,\r\n            freeAnswer: true,\r\n            showFreeAnswer: true,\r\n            freeAnswerText: data[i].freeAnswerText,\r\n            focus: false\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const resultQ = { ...answer, ...suffix }\r\n    return resultQ\r\n  })\r\n\r\n  // надстройка для объекта - вопрос\r\n  let qSuffix = {\r\n    mega: false,\r\n    megaMltp: false,\r\n    multiple: false                                      // много возможных ответов\r\n  }\r\n\r\n  if (question.limit > 1) {\r\n    qSuffix = {\r\n      ...qSuffix,\r\n      multiple: true\r\n    }\r\n  }\r\n\r\n  // проверка сколько всего ответов в вопросе -> если много, то формируем multiple select\r\n  if (visibleAnswers.length > keycodes.length) {\r\n    qSuffix = {\r\n      ...qSuffix,\r\n      mega: true,\r\n      megaMltp: question.limit\r\n    }\r\n  } else {\r\n    qSuffix = {\r\n      ...qSuffix,\r\n      keyCodesPool\r\n    }\r\n  }\r\n\r\n  const countSkipAnswers = newAnswers.reduce((acum, answer) => {\r\n    return acum + answer.disabled\r\n  }, 0)\r\n\r\n  if (countSkipAnswers === newAnswers.length) {\r\n    setResults(prevState => ({\r\n      ...prevState,\r\n      [question.id]: {\r\n        data: [],\r\n        codesPool,\r\n        count\r\n      }\r\n    }))\r\n    return {\r\n      next: true\r\n    }\r\n  }\r\n\r\n  if (result[question.id] === undefined) {\r\n    setResults(prevState => ({\r\n      ...prevState,\r\n      [question.id]: {\r\n        data: [],\r\n        codesPool,\r\n        count\r\n      }\r\n    }))\r\n  }\r\n\r\n  // определение выбранных ответов и их уникальность для вопроса при восстановлении результатов\r\n  const mAnswers = newAnswers.map((answer, index) => {\r\n    if (selectedIn) {\r\n      if (uniqueIn) {\r\n        if (uniqueSelected) {\r\n          return answer.unique & answer.selected ? answer : { ...answer, disabled: true }\r\n        } else {\r\n          return answer.unique ? { ...answer, disabled: true } : answer\r\n        }\r\n      }\r\n    }\r\n    return answer\r\n  }).map(answer => {\r\n    if (exclude) {\r\n      for (let code in exclude) {\r\n        if (result.pool.includes(code)) {\r\n          if (exclude[code].includes(answer.code)) {\r\n            return { ...answer, disabled: true }\r\n          }\r\n          return answer\r\n        }\r\n      }\r\n\r\n    }\r\n    return answer\r\n  })\r\n\r\n  const data = {\r\n    ...question,\r\n    ...qSuffix,\r\n    answers: mAnswers\r\n  }\r\n\r\n  return {\r\n    next: false,\r\n    data\r\n  }\r\n}\r\n\r\nexport default questionFormation","const beep = (config) => {\r\n  let audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n  config = Object.assign({\r\n    volume: 25 / 100,\r\n    frequency: 3020,\r\n    duration: 150,\r\n    type: 'sine'\r\n  }, config);\r\n\r\n  let oscillator = audioCtx.createOscillator();\r\n  let gainNode = audioCtx.createGain();\r\n  oscillator.connect(gainNode);\r\n  gainNode.connect(audioCtx.destination);\r\n  gainNode.gain.value = config.volume;\r\n  oscillator.frequency.value = config.frequency;\r\n  oscillator.type = config.type;\r\n  oscillator.start();\r\n  setTimeout(\r\n    function () {\r\n      oscillator.stop();\r\n    },\r\n    config.duration\r\n  );\r\n}\r\nexport default beep","import React, { Fragment, useEffect, useState } from 'react'\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport { Grid } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Question from '../Question'\r\nimport FinishDialog from '../FinishDialog';\r\n\r\nimport defineSelectedAnswer from '../../lib/defineSelectedAnswer'\r\nimport questionFormation from '../../lib/questionFormation'\r\nimport beep from '../../lib/beep'\r\n\r\nconst KEY_TYPE = 'keyup'\r\nconst STEP_DELAY = 100\r\nconst MOVE_DELAY = 0\r\n\r\nconst ANSWER_SELECTED = 1\r\nconst RESET_RESULTS = 2\r\nconst CONFIRM_QUESTION = 3\r\nconst SKIP = 4\r\n\r\nconst PollDrive = ({ poll, logics, setCurrentQuestion, saveAndGoBack, saveWorksheet }) => {\r\n  const questionsLimit = poll.questions.length\r\n  const [question, setQuestion] = useState(null)\r\n  const [userSettings, setUserSettings] = useState({\r\n    codesShow: true\r\n  })\r\n  const [direction, setDirection] = useState(1)\r\n  const [logic] = useState(logics)\r\n  const [count, setCount] = useState(0)\r\n  const [results, setResults] = useState(\r\n    {\r\n      pool: []\r\n    }\r\n  )\r\n  const [finish, setFinish] = useState(false)\r\n  const [finishDialog, setFinishDialog] = useState(false)\r\n  const [inlineMessage, setInlineMessage] = useState('')\r\n  const keyUpHandler = ({ target, keyCode }) => {\r\n    if (target.nodeName === 'BODY') {\r\n      const nextStep = defineSelectedAnswer(keyCode)\r\n      switch (nextStep.do) {\r\n        case ANSWER_SELECTED: {\r\n          mainLogic(nextStep.trueCode)\r\n          return\r\n        }\r\n        case CONFIRM_QUESTION: {\r\n          confirmResults()\r\n          return\r\n        }\r\n        case RESET_RESULTS: {\r\n          resetAnswers()\r\n          return\r\n        }\r\n        case SKIP: {\r\n          return                                                    // нажата системная клавиша, не относящаяся к опросу\r\n        }\r\n        default: {\r\n          return\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const confirmResults = () => {\r\n    if (finish) {\r\n      finishRespondent()\r\n    } else {\r\n      if (results[question.id].data.length) {\r\n        goToNext()\r\n        return\r\n      }\r\n      beep()\r\n    }\r\n  }\r\n\r\n  const goToNext = () => {\r\n    setDirection(1)\r\n    if (count < questionsLimit - 1) {\r\n      setCount(count + 1)\r\n    } else {\r\n      setCount(0)\r\n    }\r\n  }\r\n\r\n  const goToPrevious = () => {\r\n    setDirection(0)\r\n    if (count === 0) {\r\n      setCount(questionsLimit - 1)\r\n    } else {\r\n      setCount(count - 1)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(KEY_TYPE, keyUpHandler)\r\n    return () => {\r\n      document.removeEventListener(KEY_TYPE, keyUpHandler)\r\n    };\r\n  })\r\n\r\n  // Кнопка с треброванием выдать ID и сохранить !!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n  useEffect(() => {\r\n    // первичная инициализация, наложение логики и сохранение в стор следующего вопроса + восстановление промежуточных итогов\r\n    const newQuestion = questionFormation(poll, count, results, logic, setResults);\r\n    if (!newQuestion) return\r\n    if (newQuestion.next) {\r\n      if (direction) {\r\n        setCount(count + 1)\r\n      } else {\r\n        setCount(count - 1)\r\n      }\r\n      return\r\n    }\r\n    setQuestion(newQuestion.data)\r\n    setCurrentQuestion(newQuestion.data)\r\n  }, [count])\r\n\r\n  const clickHandler = (target) => {\r\n    const code = target.dataset.code\r\n    const selectedAnswer = question.answers.filter(obj => obj.keyCode === +code)[0]\r\n    // проверка, если поле со свободным ответом необходимо отредактировать\r\n    if (selectedAnswer.freeAnswer && selectedAnswer.selected) {\r\n      return\r\n    }\r\n    mainLogic(code)\r\n  }\r\n\r\n  const codesShow = (e) => {\r\n    setUserSettings(prevState => ({\r\n      ...prevState,\r\n      codesShow: !prevState.codesShow\r\n    }))\r\n  }\r\n\r\n  const checkRespondentFinish = (newResults) => {\r\n    let count = 0\r\n    for (let key in newResults) {\r\n      if (key !== 'pool') {\r\n        count++\r\n      }\r\n    }\r\n    // проверка - если не дошли до конца анкета, нет смысла анализировать концовку\r\n    if (count < poll.questions.length) {\r\n      return false\r\n    }\r\n    for (let key in newResults) {\r\n      if (key !== 'pool') {\r\n        const result = newResults[key]\r\n        if (!result.data.length) {\r\n          // необходимо проверить - пропущен был вопрос или нет\r\n          if (logic.criticalExclude) {\r\n            const resPool = newResults.pool                // уже сохраненные ответы\r\n            const codesPool = result.codesPool\r\n            const criticalExclude = logic.criticalExclude\r\n            const r = codesPool.filter((code, index) => {\r\n              for (let eCode in criticalExclude) {\r\n                if (resPool.includes(eCode)) {\r\n                  if (criticalExclude[eCode].includes(code)) return false\r\n                }\r\n              }\r\n              return true\r\n            })\r\n            if (r.length) {\r\n              setInlineMessage(`Пропущен ${result.count + 1}й вопрос`)\r\n              setFinish(false)\r\n              return false\r\n            }\r\n          } else {\r\n            // пула критичных ответов нет -> запрещенных вопросов нет -> какой-то вопрос пропущен\r\n            // ОПРЕДЕЛИТЬ какой номер вопроса\r\n            setInlineMessage(`Пропущен ${result.count + 1}й вопрос`)\r\n            setFinish(false)\r\n            return false\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setInlineMessage('')\r\n    setFinish(true)\r\n    return true\r\n  }\r\n\r\n  const finishRespondent = () => {\r\n    setFinishDialog(true)\r\n  }\r\n\r\n  // ОСНОВНЫЙ обработчик сброса ответов\r\n  const resetAnswers = () => {\r\n    const savedCodes = results[question.id].data.reduce((acum, val) => [...acum, val.answerCode], [])\r\n    // Сделано так, чтобы не ждать обновления СТЕЙТА с результатами\r\n    let newResults = {}\r\n    for (let key in results) {\r\n      if (key === question.id) {\r\n        newResults[question.id] = {\r\n          ...results[question.id],\r\n          data: []\r\n        }\r\n      } else {\r\n        if (key !== 'pool') {\r\n          newResults = {\r\n            ...newResults,\r\n            [key]: results[key]\r\n          }\r\n        } else {\r\n          newResults = {\r\n            ...newResults,\r\n            pool: results.pool.filter(code => {\r\n              return savedCodes.includes(code) ? false : true\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setResults(newResults)\r\n    checkRespondentFinish(newResults)\r\n    setQuestion(prevState => ({\r\n      ...prevState,\r\n      answers: prevState.answers.map(\r\n        answer => true ? { ...answer, selected: false, showFreeAnswer: false, disabled: false } : answer\r\n      ).map(\r\n        answer => {\r\n          let excludePool = []\r\n          // формирование пула кодов которые запрещены в результатах\r\n          for (let code in logic.criticalExclude) {\r\n            if (code === answer.code) {\r\n              excludePool = [\r\n                ...excludePool,\r\n                ...logic.criticalExclude[code]\r\n              ]\r\n            }\r\n            if (logic.criticalExclude[code].includes(answer.code)) {\r\n              excludePool = [\r\n                ...excludePool,\r\n                code\r\n              ]\r\n            }\r\n          }\r\n          for (let i = 0; i < excludePool.length; i++) {\r\n            if (newResults.pool.includes(excludePool[i])) {\r\n              return {\r\n                ...answer,\r\n                disabled: true,\r\n                excludeM: `противоречит коду ${excludePool[i]}`\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            ...answer,\r\n            disabled: false,\r\n            excludeM: ''\r\n          }\r\n        }\r\n      )\r\n    }))\r\n    setFinish(false)\r\n    // обновить логику и проверить запрещенные ответы для данного вопроса для их перерисовки!!!!!!\r\n  }\r\n\r\n  // ОСНОВНОЙ обработчик логики\r\n  const mainLogic = (code) => {\r\n    const trueCode = +code\r\n    const keyCodesPool = question.keyCodesPool\r\n    const selectedAnswer = question.answers.filter(obj => obj.keyCode === trueCode)[0]\r\n    // движение по опросу\r\n    if (trueCode === 39) {\r\n      setTimeout(() => {\r\n        goToNext()\r\n      }, MOVE_DELAY)\r\n      return\r\n    } else if (trueCode === 37) {\r\n      setTimeout(() => {\r\n        goToPrevious()\r\n      }, MOVE_DELAY)\r\n      return\r\n    }\r\n    // входит ли код клавиатуры в перечень ответов\r\n    if (keyCodesPool.includes(trueCode)) {\r\n      // промежуточные результаты уже содержат выбранный код => удаляем промежуточный результат => обновляем текущий вью\r\n      if (results.pool.includes(selectedAnswer.code)) {\r\n        let newResults = {}\r\n        for (let key in results) {\r\n          if (key === question.id) {\r\n            newResults = {\r\n              ...newResults,\r\n              [question.id]: {\r\n                ...results[question.id],\r\n                data: results[question.id].data.filter(el => el.answerCode !== selectedAnswer.code)\r\n              }\r\n            }\r\n          } else {\r\n            if (key !== 'pool') {\r\n              newResults = {\r\n                ...newResults,\r\n                [key]: results[key]\r\n              }\r\n            } else {\r\n              newResults = {\r\n                ...newResults,\r\n                pool: results.pool.filter(el => el !== selectedAnswer.code)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        setResults(newResults)\r\n        setQuestion(prevState => ({\r\n          ...prevState,\r\n          answers: prevState.answers.map(\r\n            answer => answer.code === selectedAnswer.code ? { ...answer, selected: false, showFreeAnswer: false } : answer\r\n          ).map(\r\n            answer => newResults[question.id].data.length ? answer : ({ ...answer, disabled: false })\r\n          ).map(\r\n            answer => {\r\n              let excludePool = []\r\n              // формирование пула кодов которые запрещены в результатах \r\n              for (let code in logic.criticalExclude) {\r\n                if (code === answer.code) {\r\n                  excludePool = [\r\n                    ...excludePool,\r\n                    ...logic.criticalExclude[code]\r\n                  ]\r\n                }\r\n                if (logic.criticalExclude[code].includes(answer.code)) {\r\n                  excludePool = [\r\n                    ...excludePool,\r\n                    code\r\n                  ]\r\n                }\r\n              }\r\n              for (let i = 0; i < excludePool.length; i++) {\r\n                if (newResults.pool.includes(excludePool[i])) {\r\n                  return {\r\n                    ...answer,\r\n                    disabled: true,\r\n                    excludeM: `противоречит коду ${excludePool[i]}`\r\n                  }\r\n                }\r\n              }\r\n              return {\r\n                ...answer,\r\n                disabled: false,\r\n                excludeM: ''\r\n              }\r\n            }\r\n          ).map(answer => {\r\n            // проверка на уникальность\r\n            if (newResults[question.id].data.length) {\r\n              return answer.unique ? { ...answer, disabled: true } : answer\r\n            }\r\n            return answer\r\n          })\r\n        }))\r\n        checkRespondentFinish(newResults)\r\n        return\r\n      }\r\n      // проверка на уникальность ответа и выбраннного до этого противоречивого ответа (ВНЕШНЯЯ ЛОГИКА - уникальность)\r\n      if (logic.unique.includes(selectedAnswer.code)) {\r\n        if (results[question.id].data.length) {\r\n          beep()\r\n          return\r\n        }\r\n      }\r\n      // проверка на активность ответа и ограничение по количеству ответов\r\n      if (selectedAnswer.disabled || results[question.id].data.length >= question.limit) {\r\n        beep()\r\n        return\r\n      }\r\n      // проверка на свободный ответ\r\n      if (selectedAnswer.freeAnswer) {\r\n        setQuestion(prevState => ({\r\n          ...prevState,\r\n          answers: prevState.answers.map(\r\n            answer => answer.keyCode === selectedAnswer.keyCode ? { ...answer, selected: true, showFreeAnswer: true } : answer\r\n          )\r\n        }))\r\n        return\r\n      }\r\n      const result = {\r\n        answerCode: selectedAnswer.code,\r\n        answerId: selectedAnswer.id,\r\n        freeAnswer: false,\r\n        freeAnswerText: ''\r\n      }\r\n      // проверка на исключаемость (ВНЕШНЯЯ ЛОГИКА - КРИТИЧНАЯ исключаемость) -> запретить ответы, которые указаны в конфиг файле\r\n      for (let code in logic.criticalExclude) {\r\n        // если в выбранных ответах присутствует код, который исключает другие ответы\r\n        if (results.pool.includes(code)) {\r\n          if (logic.criticalExclude[code].includes(selectedAnswer.code)) {\r\n            beep()\r\n            return\r\n          }\r\n        }\r\n      }\r\n      // проверка на исключаемость (ВНЕШНЯЯ ЛОГИКА - НЕКРИТИЧНАЯ исключаемость) -> ОПОВЕСТИТЬ при ответе, которые указаны в конфиг файле\r\n      for (let code in logic.nonCriticalExclude) {\r\n        // если в выбранных ответах присутствует код, который исключает другие ответы\r\n        if (results.pool.includes(code)) {\r\n          if (logic.nonCriticalExclude[code].includes(selectedAnswer.code)) {\r\n            console.log('Ответ не совсем корректен');\r\n          }\r\n        }\r\n      }\r\n\r\n      let newResultState = Object.assign({}, results);\r\n      newResultState[question.id].data.push(result)\r\n      newResultState.pool.push(selectedAnswer.code)\r\n      setResults(newResultState)\r\n      setQuestion(prevState => ({\r\n        ...prevState,\r\n        answers: prevState.answers.map(\r\n          answer => answer.keyCode === trueCode ? { ...answer, selected: true } : answer\r\n        ).map(\r\n          answer => logic.unique.includes(answer.code) & answer.keyCode !== trueCode ? { ...answer, disabled: true } : answer\r\n        ).map(\r\n          answer => selectedAnswer.exclude.includes(answer.code) ? {\r\n            ...answer,\r\n            disabled: true,\r\n            excludeM: `противоречит коду ${selectedAnswer.code}`\r\n          } : answer\r\n        )\r\n      }))\r\n      // проверить на уникальность (ВНЕШНЯЯ ЛОГИКА - уникальность) -> запретить другие ответы\r\n      if (logic.unique.includes(selectedAnswer.code)) {\r\n        setQuestion(prevState => ({\r\n          ...prevState,\r\n          answers: prevState.answers.map(\r\n            answer => answer.keyCode === trueCode ? answer : { ...answer, disabled: true }\r\n          )\r\n        }))\r\n      }\r\n\r\n      // ПРОВЕРКА на окончание ввода\r\n      if (checkRespondentFinish(newResultState)) {\r\n        return\r\n      } else {\r\n        // проверка на ЛИМИТ (для автоматического перехода к следующему вопросу)\r\n        if (results[question.id].data.length >= question.limit) {\r\n          // переходим дальше\r\n          setTimeout(() => {\r\n            goToNext()\r\n          }, STEP_DELAY)\r\n          return\r\n        }\r\n      }\r\n    } else {\r\n      beep()\r\n    }\r\n  }\r\n\r\n  // ОСНОВНОЙ обработчик свободного ответа\r\n  const blurHandler = (e) => {\r\n    const value = e.currentTarget.value\r\n    const selectedCode = e.currentTarget.dataset.code\r\n    const selectedKeyCode = e.currentTarget.dataset.keycode\r\n    const selectedAnswer = question.answers.filter(obj => obj.keyCode === +selectedKeyCode)[0]\r\n    if (value === '') {\r\n      // пустое поле не позволительно -> стираем из промежуточного результата и обновляем вью\r\n      let newResults = {}\r\n      for (let key in results) {\r\n        if (key === question.id) {\r\n          newResults = {\r\n            ...newResults,\r\n            [question.id]: {\r\n              ...results[question.id],\r\n              data: results[question.id].data.filter(el => el.answerCode !== selectedCode)\r\n            }\r\n          }\r\n        } else {\r\n          if (key !== 'pool') {\r\n            newResults = {\r\n              ...newResults,\r\n              [key]: results[key]\r\n            }\r\n          } else {\r\n            newResults = {\r\n              ...newResults,\r\n              pool: results.pool.filter(el => el !== selectedCode)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setResults(newResults)\r\n      setQuestion(prevState => ({\r\n        ...prevState,\r\n        answers: prevState.answers.map(\r\n          answer => answer.code === selectedCode ? { ...answer, selected: false, showFreeAnswer: false } : answer\r\n        ).map(\r\n          answer => newResults[question.id].data.length ? answer : ({ ...answer, disabled: false })\r\n        ).map(\r\n          answer => {\r\n            let excludePool = []\r\n            // формирование пула кодов которые запрещены в результатах \r\n            for (let code in logic.criticalExclude) {\r\n              if (code === answer.code) {\r\n                excludePool = [\r\n                  ...excludePool,\r\n                  ...logic.criticalExclude[code]\r\n                ]\r\n              }\r\n              if (logic.criticalExclude[code].includes(answer.code)) {\r\n                excludePool = [\r\n                  ...excludePool,\r\n                  code\r\n                ]\r\n              }\r\n            }\r\n            for (let i = 0; i < excludePool.length; i++) {\r\n              if (newResults.pool.includes(excludePool[i])) {\r\n                return {\r\n                  ...answer,\r\n                  disabled: true,\r\n                  excludeM: `противоречит коду ${excludePool[i]}`\r\n                }\r\n              }\r\n            }\r\n            return {\r\n              ...answer,\r\n              disabled: false,\r\n              excludeM: ''\r\n            }\r\n          }\r\n        ).map(answer => {\r\n          // проверка на уникальность\r\n          if (newResults[question.id].data.length) {\r\n            return answer.unique ? { ...answer, disabled: true } : answer\r\n          }\r\n          return answer\r\n        })\r\n      }))\r\n      checkRespondentFinish(newResults)\r\n      return\r\n    }\r\n    // поле не пустое -> сохраняем результат\r\n    const result = {\r\n      answerCode: selectedCode,\r\n      answerId: selectedAnswer.id,\r\n      freeAnswer: false,\r\n      freeAnswerText: value\r\n    }\r\n\r\n    /// опять новый СТЕЙТ результата!!!!!!!!!!!\r\n\r\n    let newResultState = {}\r\n    if (results.pool.includes(selectedCode)) {\r\n      newResultState = Object.assign({}, results);\r\n      newResultState[question.id] = {\r\n        ...newResultState[question.id],\r\n        data: results[question.id].data.map(\r\n          answer => answer.answerCode === selectedCode ? { ...answer, freeAnswerText: value } : answer\r\n        )\r\n      }\r\n    } else {\r\n      newResultState = Object.assign({}, results);\r\n      newResultState[question.id].data.push(result)\r\n      newResultState.pool.push(selectedCode)\r\n    }\r\n    setResults(newResultState)\r\n\r\n    // проверить на уникальность (ВНЕШНЯЯ ЛОГИКА - уникальность) -> запретить другие ответы\r\n    if (logic.unique.includes(selectedCode)) {\r\n      setQuestion(prevState => ({\r\n        ...prevState,\r\n        answers: prevState.answers.map(\r\n          answer => answer.keyCode === +selectedKeyCode ? answer : { ...answer, disabled: true }\r\n        )\r\n      }))\r\n    }\r\n    setQuestion(prevState => ({\r\n      ...prevState,\r\n      answers: prevState.answers.map(\r\n        answer => answer.keyCode === selectedCode ? { ...answer, selected: true } : answer\r\n      ).map(\r\n        answer => logic.unique.includes(answer.code) & answer.keyCode !== selectedCode ? { ...answer, disabled: true } : answer\r\n      ).map(\r\n        answer => selectedAnswer.exclude.includes(answer.code) ? {\r\n          ...answer,\r\n          disabled: true,\r\n          excludeM: `противоречит коду ${selectedAnswer.code}`\r\n        } : answer\r\n      )\r\n    }))\r\n\r\n    // \r\n    if (checkRespondentFinish(newResultState)) {\r\n      return\r\n    } else {\r\n      if (results[question.id].data.length >= question.limit - 1) {         // -1 т.к. не успевает обновится стейт\r\n        setTimeout(() => {\r\n          goToNext()\r\n        }, STEP_DELAY)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // !!!!!!!!!!!!!!!!!!!!Обработчик SELECTa - не доделана логика выбора!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n  const multipleHandler = (value, codes) => {\r\n    if (value.length) {\r\n      const codesPool = value.map(val => val.code)\r\n      const resultsPool = value.map(val => {\r\n        return {\r\n          answerCode: val.code,\r\n          freeAnswer: false,\r\n          freeAnswerText: ''\r\n        }\r\n      })\r\n      const clearPool = results.pool.filter(val => !codes.includes(val))\r\n      setResults(prevState => ({\r\n        ...prevState,\r\n        [question.id]: {\r\n          ...prevState[question.id],\r\n          data: [\r\n            ...resultsPool\r\n          ]\r\n        },\r\n        pool: [\r\n          ...clearPool,\r\n          ...codesPool\r\n        ]\r\n      }))\r\n      if (value.length) {\r\n        setTimeout(() => {\r\n          goToNext()\r\n        }, STEP_DELAY)\r\n      }\r\n      return\r\n    }\r\n    setResults(prevState => ({\r\n      ...prevState,\r\n      [question.id]: {\r\n        ...prevState[question.id],\r\n        data: []\r\n      },\r\n      pool: prevState.pool.filter(obj => !codes.includes(obj))\r\n    }))\r\n  }\r\n\r\n  const cancelFinish = () => {\r\n    // просто возврат к анкете, чтобы что-то поправить\r\n    setFinishDialog(false)\r\n  }\r\n\r\n  const confirmFinish = () => {\r\n    // закончить данную анкету и начать новую, сбросив все данные\r\n    saveWorksheet(results)\r\n    setResults({\r\n      pool: []\r\n    })\r\n    setCount(0)\r\n    setFinish(false)\r\n    setFinishDialog(false)\r\n  }\r\n\r\n  const finishThisPoll = () => {\r\n    // закончить данный опрос и перейти на главную страницу\r\n    setFinish(false)\r\n    setFinishDialog(false)\r\n    saveAndGoBack(results)\r\n  }\r\n\r\n  const InlineInformer = () => {\r\n    return (\r\n      <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n        {inlineMessage}\r\n      </Typography>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <FinishDialog open={finishDialog} handleClose={cancelFinish} finishAll={finishThisPoll} confirm={confirmFinish} />\r\n      <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n        <Grid container xs={6} md={3} justify=\"flex-start\">\r\n          <FormControlLabel\r\n            value=\"end\"\r\n            control={<Checkbox color=\"primary\" onChange={codesShow} defaultChecked={userSettings.codesShow} />}\r\n            label=\"Коды ответов\"\r\n            labelPlacement=\"end\"\r\n          />\r\n        </Grid>\r\n        <Hidden only={['sm', 'xs']}>\r\n          <Grid container md={6} justify=\"center\">\r\n            <InlineInformer />\r\n          </Grid>\r\n        </Hidden>\r\n        <Grid container xs={6} md={3} justify=\"flex-end\">\r\n          <p>Всего: <span><strong>{questionsLimit}</strong></span></p>\r\n        </Grid>\r\n        <Hidden mdUp>\r\n          <Grid container xs={12} justify=\"center\">\r\n            <InlineInformer />\r\n          </Grid>\r\n        </Hidden>\r\n\r\n      </Grid>\r\n      {question &&\r\n        <Question\r\n          count={count}\r\n          question={question}\r\n          settings={userSettings}\r\n          clickHandler={clickHandler}\r\n          blurHandler={blurHandler}\r\n          multipleHandler={multipleHandler}\r\n        />\r\n      }\r\n      <Button onClick={goToPrevious} variant=\"contained\" className=\"control-button\">Назад</Button>\r\n      <Button onClick={goToNext} variant=\"contained\" className=\"control-button\">Вперед</Button>\r\n      {finish &&\r\n        <Button onClick={finishRespondent} variant=\"contained\" className=\"control-button\">Финиш</Button>\r\n      }\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollDrive","import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst DialogWithSelect = ({ open, handleClose, save, header, text, options }) => {\r\n  const [state, setState] = useState(\"\")\r\n  const handleChange = (e) => {\r\n    const { options, selectedIndex, value } = e.target;\r\n    const id = value\r\n    const title = options[selectedIndex].innerHTML\r\n    setState({\r\n      id,\r\n      title\r\n    })\r\n  }\r\n\r\n  const handleSave = () => {\r\n    save(state)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={open} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">{header}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {text}\r\n          </DialogContentText>\r\n          <Select\r\n            fullWidth\r\n            native\r\n            value={state.id}\r\n            onChange={e => handleChange(e)}\r\n          >\r\n            <option aria-label=\"None\" disabled selected value=\"\" />\r\n            {options.map((option, i) =>\r\n              <option key={option.id} value={option.id}>{option.title}</option>\r\n            )}\r\n          </Select>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={handleSave} disabled={!Boolean(state)} color=\"primary\">\r\n            Сохранить\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DialogWithSelect","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      questions{\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          code\r\n          title\r\n        }\r\n      }\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const SAVE_NEW_RESULT = gql`\r\nmutation ($poll: String!, $city: String!, $user: String!, $pool: [String], $data: [ResultData]) {\r\n  saveResult(\r\n    poll: $poll,\r\n    city: $city,\r\n    user: $user,\r\n    pool: $pool,\r\n    data: $data\r\n  )\r\n}\r\n`","export const parseIni = (area) => {\r\n  let configData = area;\r\n  // let configData = area.value;\r\n  let regex = {\r\n    section: /^\\s*\\[\\s*([^\\]]*)\\s*\\]\\s*$/,\r\n    param: /^\\s*([^=]+?)\\s*=\\s*(.*?)\\s*$/,\r\n    comment: /^\\s*#.*$/\r\n  };\r\n  let config = {};\r\n  let lines = configData.split(/[\\r\\n]+/);\r\n  let section = null;\r\n  lines.forEach(function (line) {\r\n    if (regex.comment.test(line)) {\r\n      return;\r\n    } else if (regex.param.test(line)) {\r\n      let match = line.match(regex.param);\r\n      if (section) {\r\n        config[section][match[1]] = parseParams(match[2]);\r\n      } else {\r\n        config[match[1]] = parseParams(match[2]);\r\n      }\r\n    } else if (regex.section.test(line)) {\r\n      let match = line.match(regex.section);\r\n      config[match[1]] = {};\r\n      section = match[1];\r\n    } else if (line.length == 0 && section) {\r\n      section = null;\r\n    }\r\n  });\r\n  // console.log(config);\r\n  return concatLogic(config);\r\n}\r\n\r\nfunction concatLogic(config) {\r\n  let regex = /([0-9]{1,})/gm;\r\n  let result = {};\r\n  let property = null;\r\n  for (let key in config) {\r\n    property = key.match(/[a-zA-Z]*/gm)[0];\r\n    result[property] = {};\r\n  }\r\n  for (let key in config) {\r\n    property = key.match(/[a-zA-Z]*/gm)[0];\r\n    let suffix = key.match(regex);\r\n    if (suffix !== null) {\r\n      result[property][suffix] = config[key];\r\n    } else {\r\n      result[property][1] = config[key];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction parseParams(data) {\r\n  // избавляемся от пробелов\r\n  let trimData = data.replace(/\\s*/g, '');\r\n  let regex = {\r\n    // range : /\\[(.+?)\\]/gm,\r\n    // single: /([0-9]{1,3})/gm,\r\n    srange: /([0-9]{1,3})|\\[(.+?)\\]/gm\r\n  };\r\n\r\n  let output = [];\r\n  let temp;\r\n  do {\r\n    temp = regex.srange.exec(trimData);\r\n    if (temp) {\r\n      // одиночные\r\n      if (temp[1] !== undefined) {\r\n        output.push(temp[1]);\r\n      }\r\n      // диапазон\r\n      if (temp[2] !== undefined) {\r\n        let range = temp[2];\r\n        output = output.concat(rangeToArray(range));\r\n      }\r\n    }\r\n  } while (temp);\r\n  return output;\r\n}\r\n\r\nfunction rangeToArray(data) {\r\n  let regex = /(\\d{1,3})\\s*-\\s*(\\d{1,3})/gm;\r\n  let result = (data.replace(regex, (...match) => {\r\n    let temp = [];\r\n    let start = match[1];\r\n    let end = match[2];\r\n    // если перепутаны места\r\n    if (start > end) {\r\n      start = match[2];\r\n      end = match[1];\r\n    }\r\n    let length = (end - start) + 1;\r\n    while (length) {\r\n      start = start + '';\r\n      temp.push(start.padStart(3, '0'));\r\n      start++\r\n      length--;\r\n    }\r\n    return temp;\r\n  }));\r\n  return result.split(',');\r\n}\r\n\r\nexport const normalizeLogic = (logic) => {\r\n  let normalizedLogic = {}\r\n  for (let key in logic) {\r\n    switch (key) {\r\n      case 'difficult':\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          difficult: logic[key][1].answers\r\n        }\r\n        break\r\n      case 'freeAnswers':\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          freeAnswers: logic[key][1].answers\r\n        }\r\n        break\r\n      case 'exclude':\r\n        const exclude = logic[key]\r\n        let criticalExclude = {}\r\n        let nonCriticalExclude = {}\r\n        for (let i in exclude) {\r\n          if (exclude[i].critical[0] === '1') {\r\n            exclude[i].answers.map((answer) => {\r\n              criticalExclude[answer] = exclude[i].exclude\r\n            })\r\n          }\r\n          if (exclude[i].critical[0] === '0') {\r\n            exclude[i].answers.map((answer) => {\r\n              nonCriticalExclude[answer] = exclude[i].exclude\r\n            })\r\n          }\r\n        }\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          criticalExclude,\r\n          nonCriticalExclude\r\n        }\r\n        break\r\n      case 'unique':\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          unique: logic[key][1].answers\r\n        }\r\n        break\r\n      case 'invisible':\r\n        const invisible = logic[key]\r\n        let invisiblePool = []\r\n        for (let i in invisible) {\r\n          invisiblePool = [\r\n            ...invisiblePool,\r\n            ...invisible[i].answers\r\n          ]\r\n        }\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          invisible: invisiblePool\r\n        }\r\n        break\r\n    }\r\n  }\r\n  return normalizedLogic\r\n}","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { mainUrl } from \"../../mainconfig\";\r\n\r\nimport Container from '@material-ui/core/Container'\r\nimport DriveLogic from \"./components/DriveLogic\";\r\nimport DialogWithSelect from '../../components/DialogWithSelect';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\nimport ErrorState from '../../components/ErrorState'\r\nimport LoadingState from '../../components/LoadingState'\r\nimport SystemNoti from '../../components/SystemNoti'\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { gql, useApolloClient, useQuery, useMutation } from '@apollo/client'\r\n\r\nimport { GET_POLL_DATA } from \"./queries\"\r\n\r\nimport { SAVE_NEW_RESULT } from './mutaions'\r\nimport { parseIni, normalizeLogic } from './lib/utils'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst PollDrive = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  const client = useApolloClient();\r\n  const [message, setMessage] = useState({\r\n    show: false,\r\n    type: 'error',\r\n    message: '',\r\n    duration: 6000\r\n  })\r\n  const { currentUser } = client.readQuery({\r\n    query: gql`\r\n    query CurrentUserQuery {\r\n      currentUser {\r\n        id\r\n        username\r\n      }\r\n    }\r\n    `,\r\n  })\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [poll, setPoll] = useState(null)\r\n  const [backOpen, setBackOpen] = useState(false)\r\n  const [poolOfCities, setPoolOfCities] = useState(null)\r\n  const [openCityDialog, setOpenCityDialog] = useState(true);\r\n  const [logic, setPollLogic] = useState(null)\r\n  const [currentCity, setCurrentCity] = useState(null)\r\n  const [currentQuestion, setCurrentQuestion] = useState({\r\n    'multiple': false\r\n  })\r\n  const { loading, error, data } = useQuery(GET_POLL_DATA, {\r\n    variables: { id },\r\n    onCompleted: (_, __) => {\r\n      handleConfigFile(data.poll.logic.path)\r\n      setPoolOfCities(data.poll.cities)\r\n    }\r\n  })\r\n  const handleConfigFile = (filePath) => {\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const logic = parseIni(text)\r\n        // Нормализация ЛОГИКИ - здесь формируется ЛОГИКА опроса, на основании конфиг файла !!!\r\n        const normLogic = normalizeLogic(logic)\r\n        setPollLogic(normLogic)\r\n      })\r\n  }\r\n  const [saveResult, { loading: saveLoading }] = useMutation(SAVE_NEW_RESULT, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (logic) {\r\n      // применени очередности, если в настройках опроса меняли очередность\r\n      const newOrderQuestion = data.poll.questions.slice().sort((a, b) => (a.order > b.order) ? 1 : -1)\r\n      // исключение вопросов, ответы которых полностью исключены полем [invisible] ВНЕШНЕЙ ЛОГИКИ\r\n      if (logic.invisible) {\r\n        const invisiblePool = logic.invisible\r\n        const visibleQuestions = newOrderQuestion.filter((question) => {\r\n          const answers = question.answers\r\n          const lAnswers = answers.length\r\n          let count = 0\r\n          for (let i = 0; i < lAnswers; i++) {\r\n            if (invisiblePool.includes(answers[i].code)) {\r\n              count++\r\n            }\r\n          }\r\n          if (count !== lAnswers) {\r\n            return true\r\n          }\r\n          return false\r\n        })\r\n        setPoll({\r\n          id: data.poll.id,\r\n          questions: visibleQuestions\r\n        })\r\n      } else {\r\n        setPoll({\r\n          id: data.poll.id,\r\n          questions: newOrderQuestion\r\n        })\r\n      }\r\n    }\r\n  }, [logic])\r\n\r\n\r\n  const Loading = () => {\r\n    if (saveLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  if (!poll || !poolOfCities || !logic || !currentUser) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const saveCity = (city) => {\r\n    setCurrentCity(city)\r\n    setOpenCityDialog(false)\r\n  }\r\n\r\n  const closeDialog = () => {\r\n    setOpenCityDialog(false)\r\n    history.push(\"/\")\r\n  }\r\n\r\n  const prepareResultData = (data) => {\r\n    let result = []\r\n    for (let key in data) {\r\n      if (key !== 'pool') {\r\n        result.push({\r\n          id: key,\r\n          data: data[key].data.map(answer => {\r\n            return {\r\n              answer: answer.answerId,\r\n              code: answer.answerCode,\r\n              text: answer.freeAnswerText,\r\n            }\r\n          })\r\n        })\r\n      }\r\n    }\r\n    return result\r\n  }\r\n\r\n  const saveAndGoBack = (data) => {\r\n    const result = prepareResultData(data)\r\n    saveResult({\r\n      variables: {\r\n        poll: poll.id,\r\n        city: currentCity.id,\r\n        user: currentUser.id,\r\n        pool: data.pool,\r\n        data: result\r\n      }\r\n    }).then(res => {\r\n      history.push(\"/\")\r\n    })\r\n  }\r\n\r\n  const saveWorksheet = (data) => {\r\n    const result = prepareResultData(data)\r\n    saveResult({\r\n      variables: {\r\n        poll: poll.id,\r\n        city: currentCity.id,\r\n        user: currentUser.id,\r\n        pool: data.pool,\r\n        data: result\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <div style={{ backgroundColor: currentQuestion.multiple ? 'rgb(208 226 252)' : '#fff' }}>\r\n        <Container maxWidth=\"md\">\r\n          <DialogWithSelect\r\n            open={openCityDialog}\r\n            options={poolOfCities}\r\n            header=\"Город\"\r\n            text=\"Выберите город в котором проводился опрос\"\r\n            save={saveCity}\r\n            handleClose={closeDialog}\r\n          />\r\n          <DriveLogic\r\n            poll={poll}\r\n            logics={logic}\r\n            setCurrentQuestion={setCurrentQuestion}\r\n            saveAndGoBack={saveAndGoBack}\r\n            saveWorksheet={saveWorksheet} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollDrive","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollDrive from \"../modules/PollDrive\";\r\n\r\nconst DrivePage = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Опрос ` + code + ` - вбивание`} />\r\n      <PollDrive id={id}/>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default DrivePage","import React, { Fragment } from 'react'\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, p, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      className=\"right-pannel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-auto-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-auto-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={p}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction allProps(index) {\r\n  return {\r\n    id: `scrollable-auto-tab-${index}`,\r\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tabs: {\r\n    minWidth: '160px',\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n    overflow: 'visible'\r\n  }\r\n}));\r\n\r\nconst Vertical = ({ data, value, handleChange }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Tabs\r\n      orientation=\"vertical\"\r\n      variant=\"scrollable\"\r\n      value={value}\r\n      onChange={handleChange}\r\n      aria-label=\"Vertical tabs\"\r\n      scrollButtons=\"auto\"\r\n      className={classes.tabs}\r\n    >\r\n      {data.map((obj, index) => (\r\n        <Tab label={obj.label} {...allProps({ index })} />\r\n      ))}\r\n    </Tabs>\r\n  )\r\n}\r\n\r\nconst Horizontal = ({ data, value, handleChange }) => {\r\n  return (\r\n    <AppBar position=\"static\" color=\"default\">\r\n      <Tabs\r\n        variant=\"scrollable\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        scrollButtons=\"auto\"\r\n        aria-label=\"horizontal auto tabs\"\r\n      >\r\n        {data.map((obj, index) => (\r\n          <Tab label={obj.label} {...allProps({ index })} />\r\n        ))}\r\n      </Tabs>\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nconst AdaptiveTabs = ({ data }) => {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (_, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"root-wrap\">\r\n        <Hidden xsDown>\r\n          <Vertical data={data} value={value} handleChange={handleChange} />\r\n        </Hidden>\r\n        <Hidden smUp>\r\n          <Horizontal data={data} value={value} handleChange={handleChange} />\r\n        </Hidden>\r\n        {data.map((obj, index) => (\r\n          <TabPanel value={value} index={index} p={obj.padding ? obj.padding : 1}>\r\n            {obj.component}\r\n          </TabPanel>\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default AdaptiveTabs","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query pollQuery($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questionsCount\r\n      answersCount\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n        }\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState, useEffect } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport { parseIni, normalizeLogic } from '../../../PollDrive/lib/utils'\r\nimport { useQuery } from '@apollo/client'\r\n\r\nimport { GET_POLL_DATA } from \"./queries\"\r\n\r\n\r\nconst Generation = ({ id }) => {\r\n  const [poll, setPoll] = useState(null)\r\n  const [questions, setQuestions] = useState(null)\r\n  const [logic, setLogic] = useState(null)\r\n  const [count, setCount] = useState(null)\r\n  const { loading, data } = useQuery(GET_POLL_DATA, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      setPoll({\r\n        id: data.poll.id,\r\n        title: data.poll.title,\r\n        questionsCount: data.poll.questionsCount,\r\n        answersCount: data.poll.answersCount\r\n      })\r\n      handleConfigFile(data.poll.logic.path)\r\n    }\r\n  })\r\n\r\n  const handleConfigFile = (filePath) => {\r\n    fetch(`http://localhost:4000${filePath}`)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const logic = parseIni(text)\r\n        // Нормализация ЛОГИКИ - здесь формируется ЛОГИКА опроса, на основании конфиг файла !!!\r\n        const mainLogic = normalizeLogic(logic)\r\n        setLogic(mainLogic)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (logic) {\r\n      let visibleQuestions = []\r\n      if (logic.invisible) {\r\n        const invisiblePool = logic.invisible\r\n        visibleQuestions = data.poll.questions.filter((question) => {\r\n          const answers = question.answers\r\n          const lAnswers = answers.length\r\n          let count = 0\r\n          for (let i = 0; i < lAnswers; i++) {\r\n            if (invisiblePool.includes(answers[i].code)) {\r\n              count++\r\n            }\r\n          }\r\n          if (count !== lAnswers) {\r\n            return true\r\n          }\r\n        })\r\n      } else {\r\n        visibleQuestions = data.poll.questions\r\n      }\r\n      const modQuestions = visibleQuestions.map((question, index) => {\r\n        const newAnswers = question.answers.map((answer, index) => {\r\n          let suffix = {}\r\n          if (logic.invisible) {\r\n            if (logic.invisible.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                disabled: true\r\n              }\r\n            }\r\n          }\r\n          if (logic.freeAnswers) {\r\n            if (logic.freeAnswers.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                freeAnswer: true\r\n              }\r\n            }\r\n          }\r\n          if (logic.unique) {\r\n            if (logic.unique.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                unique: true\r\n              }\r\n            }\r\n          }\r\n          if (logic.difficult) {\r\n            if (logic.difficult.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                difficult: true\r\n              }\r\n            }\r\n          }\r\n          const newAnswer = {\r\n            ...answer,\r\n            ...suffix\r\n          }\r\n          return newAnswer\r\n        })\r\n        const newQuestion = {\r\n          ...question,\r\n          answers: newAnswers\r\n        }\r\n        return newQuestion\r\n      })\r\n      setQuestions(modQuestions)\r\n    }\r\n  }, [logic])\r\n\r\n\r\n  if (loading || !logic || !questions) return (\r\n    <Fragment>\r\n      <CircularProgress />\r\n      <p>Загрузка. Подождите пожалуйста</p>\r\n    </Fragment>\r\n  )\r\n\r\n  const testPoolChange = (e) => {\r\n    const val = e.currentTarget.value\r\n    if (val < 0) {\r\n      return\r\n    }\r\n    setCount(val)\r\n  }\r\n\r\n  const generateTestPool = () => {\r\n    const worksheetsCount = count\r\n    console.log(questions);\r\n    // freeAnswer\r\n    // freeAnswersPool\r\n    // unique\r\n    // criticalExclude\r\n    // difficult\r\n    for (let i = 0; i < worksheetsCount; i++) {\r\n      questions.map((question, index) => {\r\n\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container>\r\n        <Box>\r\n          <h3>{poll.title}</h3>\r\n        </Box>\r\n        <Grid xs={12} item container justify=\"flex-start\">\r\n          <Box>\r\n            <TextField\r\n              id=\"outlined-number\"\r\n              label=\"Number\"\r\n              type=\"number\"\r\n              value={count}\r\n              onChange={testPoolChange}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n          <Box p={1}>\r\n            <Button variant=\"contained\" color=\"primary\" disabled={count ? false : true} onClick={generateTestPool}>\r\n              Генерировать\r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Generation","import React from 'react'\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst ConfirmDialog = ({ open, confirm, close, data }) => {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={close}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">{data.title}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          {data.text}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={close} color=\"primary\">\r\n          Отмена\r\n          </Button>\r\n        <Button onClick={confirm} color=\"primary\" autoFocus>\r\n          Удалить\r\n          </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default ConfirmDialog","import React, { Fragment } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nconst RespondentCard = ({ result, index, show, edit, selected, select, count }) => {\r\n  return (\r\n    <Fragment>\r\n      <Paper className=\"respondent-card\">\r\n        <Grid container item justify=\"space-between\">\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {index + 1}\r\n          </Typography>\r\n          {result.processed ? <p>dd</p> : ''}\r\n          <Checkbox\r\n            checked={selected}\r\n            onChange={(e) => select({\r\n              id: result.id,\r\n              index,\r\n              event: e\r\n            })}\r\n            inputProps={{ 'aria-label': 'primary checkbox' }}\r\n          />\r\n        </Grid>\r\n        <Typography variant=\"subtitle2\" gutterBottom>\r\n          н.п.: {result.city ? result.city.title : '-'}\r\n        </Typography>\r\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n          сохранен: {result.created}\r\n        </Typography>\r\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n          обновлен: {result.lastModified}\r\n        </Typography>\r\n        {/* <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n          {result.city ? result.city.category.label : 'вероятно город стерли из БД'}\r\n        </Typography> */}\r\n        <Grid container item justify=\"space-between\" className=\"card-service-buttons\">\r\n          <IconButton\r\n            className=\"card-button\"\r\n            aria-label=\"delete\"\r\n            onClick={() => edit(result.id)}\r\n            disabled={count > 1}\r\n          >\r\n            <EditIcon fontSize=\"small\" />\r\n          </IconButton>\r\n          <IconButton\r\n            className=\"card-button\"\r\n            aria-label=\"delete\"\r\n            onClick={() => show(result)}\r\n            disabled={count > 1}>\r\n            <ListAltIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Grid>\r\n      </Paper>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default RespondentCard","import React, { Fragment, useState } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport RespondentCard from '../RespondentCard'\r\n\r\nconst DataGrid = ({ data, selectPool, setSelectPool }) => {\r\n  const [lastSelectedIndex, setLastSelectedIndex] = useState()\r\n\r\n  const showDetails = ({ result }) => {\r\n    const oderedResults = result.slice().sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n    const datails = oderedResults.map(obj => {\r\n      if (obj.text !== '') {\r\n        return obj.code + ' ' + obj.text\r\n      }\r\n      return obj.code\r\n    })\r\n    console.log(datails);\r\n  }\r\n\r\n  const handleEdit = () => {\r\n\r\n  }\r\n\r\n\r\n  const handleSelect = (inData) => {\r\n    if (inData.event.nativeEvent.shiftKey) {\r\n      let ar = []\r\n      if (inData.index + 1 > lastSelectedIndex) {\r\n        ar = data.slice(lastSelectedIndex, inData.index + 1)\r\n      } else {\r\n        ar = data.slice(inData.index, lastSelectedIndex)\r\n      }\r\n      const rr = ar.filter(obj => !selectPool.includes(obj.id)).map(obj => obj.id)\r\n      setSelectPool(prevState => ([\r\n        ...prevState,\r\n        ...rr\r\n      ]))\r\n      setLastSelectedIndex(inData.index)\r\n      return\r\n    }\r\n    setLastSelectedIndex(inData.index)\r\n    if (inData.event.nativeEvent.ctrlKey) {\r\n      if (selectPool.includes(inData.id)) {\r\n        const n = selectPool.filter(id => {\r\n          return id !== inData.id\r\n        })\r\n        setSelectPool(n)\r\n        return\r\n      } else {\r\n        setSelectPool(prevState => ([\r\n          ...prevState,\r\n          inData.id\r\n        ]))\r\n        return\r\n      }\r\n    }\r\n    // при простом клике мышью\r\n    if (selectPool.includes(inData.id)) {\r\n      if (selectPool.length > 1) {\r\n        setSelectPool([inData.id])\r\n        return\r\n      }\r\n      setSelectPool([])\r\n    } else {\r\n      setSelectPool([inData.id])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container spacing={3} xs={12}>\r\n        {data.map((result, index) => (\r\n          <Grid item xs={12} sm={6} md={3} lg={2} key={index} >\r\n            <RespondentCard\r\n              result={result}\r\n              index={index}\r\n              show={showDetails}\r\n              edit={handleEdit}\r\n              selected={selectPool.includes(result.id)}\r\n              select={handleSelect}\r\n              count={selectPool.length}\r\n            />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default DataGrid","import React, { Fragment, useEffect, useState } from 'react'\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Filters = ({ filters, setActiveFilters }) => {\r\n  const [avaiableFilters] = useState({\r\n    age: filters.age,\r\n    cities: filters.cities.map(city => ({\r\n      value: city.id,\r\n      title: city.title,\r\n      category: city.category.label\r\n\r\n    })).sort((a, b) => a.category - b.category),\r\n    intervs: filters.intervievers.map(interv => ({\r\n      value: interv.id,\r\n      title: interv.username,\r\n    })),\r\n    sex: filters.sex,\r\n    status: filters.status\r\n  })\r\n  const [newFilter, setNewFilters] = useState(null)\r\n  const [empty, setEmpty] = useState(true)\r\n  const [updated, setUpdated] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (newFilter) {\r\n      for (let key in newFilter) {\r\n        if (newFilter[key]) {\r\n          setEmpty(false)\r\n          return\r\n        }\r\n      }\r\n      setEmpty(true)\r\n    }\r\n  }, [newFilter])\r\n\r\n  // ФИЛЬТРЫ\r\n  const handleDataChange = (e) => {\r\n    const RegExp = /(\\d{4})-(\\d{2})-(\\d{2})/\r\n    const date = e.target.value\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      date: e.target.value.replace(RegExp, '$3.$2.$1'),\r\n      shownDate: date\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const cleareDate = () => {\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      date: null,\r\n      shownDate: null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleAgeChange = (_, values) => {\r\n    const ages = values.map(age => age.value)\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      ages: ages.length ? ages : null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleSexChange = (_, value) => {\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      sex: value ? value.value : null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleCityChange = (_, values) => {\r\n    const ct = values.map(city => city.value)\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      cities: ct.length ? ct : null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleInterviewersChange = (_, values) => {\r\n    const intervs = values.map(interv => interv.value)\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      intervs: intervs.length ? intervs : null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleStatusChange = (_, value) => {\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      status: value ? value.value : null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleFilter = () => {\r\n    setActiveFilters(newFilter)\r\n    setUpdated(false)\r\n  }\r\n\r\n  const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\n  const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\n  if (!avaiableFilters) return <p></p>\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <TextField\r\n            style={{ width: '100%' }}\r\n            id=\"date\"\r\n            type=\"date\"\r\n            variant=\"outlined\"\r\n            value={newFilter ? newFilter.shownDate ? newFilter.shownDate : '' : ''}\r\n            onChange={handleDataChange}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  {true ?\r\n                    <Tooltip title=\"Очистить\">\r\n                      <ClearIcon style={{ cursor: \"pointer\" }}\r\n                        onClick={cleareDate}\r\n                      />\r\n                    </Tooltip>\r\n                    :\r\n                    \"\"\r\n                  }\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <Autocomplete\r\n            multiple\r\n            limitTags={1}\r\n            options={avaiableFilters.age}\r\n            disableCloseOnSelect\r\n            clearOnEscape\r\n            onChange={handleAgeChange}\r\n            noOptionsText={\"Опции не настроены\"}\r\n            getOptionLabel={(option) => option.title}\r\n            renderOption={(option, { selected }) => (\r\n              <React.Fragment>\r\n                <Checkbox\r\n                  icon={icon}\r\n                  checkedIcon={checkedIcon}\r\n                  style={{ marginRight: 8 }}\r\n                  checked={selected}\r\n                />\r\n                {option.title}\r\n              </React.Fragment>\r\n            )}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label=\"Возраст\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <Autocomplete\r\n            options={avaiableFilters.sex}\r\n            onChange={handleSexChange}\r\n            noOptionsText={\"Опции не настроены\"}\r\n            getOptionLabel={(option) => option.title}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label=\"Пол\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <Autocomplete\r\n            multiple\r\n            limitTags={1}\r\n            options={avaiableFilters.cities}\r\n            groupBy={(option) => option.category}\r\n            disableCloseOnSelect\r\n            clearOnEscape\r\n            onChange={handleCityChange}\r\n            noOptionsText={\"Опции не настроены\"}\r\n            getOptionLabel={(option) => option.title}\r\n            renderOption={(option, { selected }) => (\r\n              <React.Fragment>\r\n                <Checkbox\r\n                  icon={icon}\r\n                  checkedIcon={checkedIcon}\r\n                  style={{ marginRight: 8 }}\r\n                  checked={selected}\r\n                />\r\n                {option.title}\r\n              </React.Fragment>\r\n            )}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label=\"Город\"\r\n              />\r\n            )}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <Autocomplete\r\n            multiple\r\n            limitTags={1}\r\n            options={avaiableFilters.intervs}\r\n            disableCloseOnSelect\r\n            clearOnEscape\r\n            onChange={handleInterviewersChange}\r\n            noOptionsText={\"Опции не настроены\"}\r\n            getOptionLabel={(option) => option.title}\r\n            renderOption={(option, { selected }) => (\r\n              <React.Fragment>\r\n                <Checkbox\r\n                  icon={icon}\r\n                  checkedIcon={checkedIcon}\r\n                  style={{ marginRight: 8 }}\r\n                  checked={selected}\r\n                />\r\n                {option.title}\r\n              </React.Fragment>\r\n            )}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label=\"Интервьюер\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <Autocomplete\r\n            options={avaiableFilters.status}\r\n            onChange={handleStatusChange}\r\n            noOptionsText={\"Опции не настроены\"}\r\n            getOptionLabel={(option) => option.title}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label=\"Статус\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item container xs={12} sm={6} md={3} lg={3} justify=\"flex-start\">\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleFilter}\r\n            disabled={!updated}\r\n          >\r\n            применить\r\n            </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default Filters","import React from 'react'\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport EmojiPeopleIcon from '@material-ui/icons/EmojiPeople';\r\n\r\nconst ServiceIcons = ({ answer }) => {\r\n  const edit = (\r\n    <Tooltip title=\"Свободный ответ\">\r\n      <EditIcon />\r\n    </Tooltip>\r\n  )\r\n  const difficult = (\r\n    <Tooltip title=\"Затрудняюсь ответить\">\r\n      <EmojiPeopleIcon />\r\n    </Tooltip>\r\n  )\r\n  const unique = (\r\n    <Tooltip title=\"Уникальный ответ\">\r\n      <FlashOnIcon />\r\n    </Tooltip>\r\n  )\r\n  let r = []\r\n  if (answer.difficult) {\r\n    r.push(difficult)\r\n  }\r\n  if (answer.freeAnswer) {\r\n    r.push(edit)\r\n  }\r\n  if (answer.unique) {\r\n    r.push(unique)\r\n  }\r\n  return r\r\n}\r\n\r\nconst AnswerCard = ({ answer, index, pool, totalAnswers }) => {\r\n  const CountR = () => {\r\n    let count = null\r\n    if (answer.results.length) {\r\n      const len = answer.results.length\r\n      for (let i = 0; i < len; i++) {\r\n        if (pool.includes(answer.results[i].respondent.id)) {\r\n          count++\r\n        }\r\n      }\r\n      return count ? (count / totalAnswers * 100).toFixed(1) : null\r\n    }\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={answer.disabled ? \"answer-card invisible\" : \"answer-card\"}>\r\n      <span className=\"answer-number\">{index + 1}.</span>\r\n      <span className=\"devider\"> </span>\r\n      <span className=\"answer-code\">{answer.code}</span>\r\n      <span className=\"devider\"> - </span>\r\n      <span className=\"answer-title\">{answer.title}</span>\r\n      <span className=\"answer-extend\">\r\n        <ServiceIcons answer={answer} />\r\n      </span>\r\n      <span><CountR /></span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AnswerCard","import React, { useState } from 'react'\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport AnswerCard from '../AnswersCard'\r\n\r\nconst QuestionCard = ({ question, index, pool }) => {\r\n\r\n  const [count, setCount] = useState(\r\n    question.answers.reduce((acum, curr) => {\r\n      if (curr.results.length) {\r\n        for (let i = 0; i < curr.results.length; i++) {\r\n          if (pool.includes(curr.results[i].respondent.id)) {\r\n            return acum + 1\r\n          }\r\n          return acum\r\n        }\r\n      }\r\n      return acum\r\n    }, 0)\r\n  )\r\n\r\n  return (\r\n    <Card className=\"question-card\">\r\n      <CardContent>\r\n        <div className=\"question-header\">\r\n          <Tooltip title=\"Макс. кол-во ответов\">\r\n            <span className=\"question-limit\">{question.limit}</span>\r\n          </Tooltip>\r\n          <span className=\"question-number\">{index + 1}. </span>\r\n          <span className=\"question-title\" color=\"textSecondary\" gutterBottom>\r\n            {question.title}\r\n          </span>\r\n        </div>\r\n        {question.answers.map((answer, index) => (\r\n          <AnswerCard key={index} answer={answer} index={index} pool={pool} totalAnswers={count} />\r\n        ))}\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default QuestionCard","import React, { Fragment } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nimport { useTheme } from '@material-ui/core/styles';\r\n\r\nimport QuestionCard from '../../components/QuestionCard'\r\n\r\nconst BatchUpdate = ({ data, selectPool }) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Open responsive dialog\r\n      </Button>\r\n      <Dialog\r\n        fullScreen={fullScreen}\r\n        maxWidth={\"md\"}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"responsive-dialog-title\">{\"Обновить результаты\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {data.poll.questions.map((question, index) => (\r\n              <QuestionCard index={index} key={question.id} question={question} pool={selectPool} />\r\n            ))}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            Сохранить\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BatchUpdate","import { gql } from '@apollo/client'\r\n\r\nexport const GET_FILTER_SELECTS = gql`\r\n  query {\r\n    cities {\r\n      id\r\n      title\r\n      population\r\n      category {\r\n        title\r\n      }\r\n    }\r\n    intervievers {\r\n      id\r\n      username\r\n    }\r\n    status {\r\n      value\r\n      title\r\n    }\r\n    sex {\r\n      value\r\n      title\r\n    }\r\n    age {\r\n      value\r\n      title\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_POLL_RESULTS = gql`\r\nquery ($id: ID!) {\r\n  poll(id: $id) {\r\n    id\r\n    title\r\n    results {\r\n      id\r\n      user {\r\n        id\r\n        username\r\n      }\r\n      city {\r\n        id\r\n        title\r\n        category {\r\n          title\r\n        }\r\n      }\r\n      created\r\n      lastModified\r\n      processed\r\n      result {\r\n        answer\r\n        code\r\n        text\r\n      }\r\n    }\r\n    questions {\r\n      id\r\n      title\r\n      order\r\n      limit\r\n      type\r\n      answers {\r\n        id\r\n        title\r\n        order\r\n        code\r\n        results {\r\n          id\r\n          code\r\n          text\r\n          respondent {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const GET_POLL_RESULTS_OLD = gql`\r\n  query ($id: String!) {\r\n    pollResults(id: $id) {\r\n      id\r\n      user {\r\n        id\r\n        username\r\n      }\r\n      city {\r\n        id\r\n        title\r\n        category {\r\n          title\r\n        }\r\n      }\r\n      created\r\n      lastModified\r\n      processed\r\n      result {\r\n        answer\r\n        code\r\n        text\r\n      }\r\n    }\r\n  }\r\n\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const CITY_SAVE_MUTATION = gql`\r\nmutation saveNewCity($title: String!, $population: Int!, $category: String!) {\r\n  newCity(title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category\r\n    population\r\n  }\r\n}\r\n`\r\n\r\nexport const CITY_EDIT_SAVE = gql`\r\nmutation saveCityEdit($id: String!, $title: String!, $population: Int!, $category: String!) {\r\n  cityEdit(id: $id, title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category\r\n    population\r\n  }\r\n}\r\n`\r\nexport const DELETE_RESULTS = gql`\r\nmutation ($results: [String]!) {\r\n  deleteResults(results: $results) {\r\n    id\r\n  }\r\n}\r\n`","import React, { Fragment, useEffect, useState } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport Box from '@material-ui/core/Box';\r\nimport DynamicFeedIcon from '@material-ui/icons/DynamicFeed';\r\n\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog'\r\nimport DataGrid from '../../components/DataGrid'\r\nimport Filters from '../../components/Filters'\r\nimport BatchUpdate from '../../components/BatchUpdate'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_POLL_RESULTS, GET_FILTER_SELECTS } from './queries'\r\nimport { DELETE_RESULTS } from './mutations'\r\nimport { Tooltip } from '@material-ui/core';\r\n\r\nconst OverallResults = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n\r\n  const [delOpen, setDelOpen] = useState(false)\r\n  const [activeResults, setActiveResults] = useState()\r\n  const [activeFilters, setActiveFilters] = useState()\r\n  const [selectPool, setSelectPool] = useState([])\r\n\r\n  const {\r\n    data: pollResults,\r\n    loading: pollResultsLoading,\r\n    error: pollResultsError\r\n  } = useQuery(GET_POLL_RESULTS, {\r\n    variables: {\r\n      id\r\n    },\r\n    onCompleted: () => {\r\n      setActiveResults(pollResults.poll.results)\r\n    }\r\n  });\r\n\r\n  const {\r\n    data: filtersResults,\r\n    loading: filtersResultsLoading,\r\n    error: filtersResultsError\r\n  } = useQuery(GET_FILTER_SELECTS)\r\n\r\n  const [\r\n    deleteResult,\r\n    { loading: loadOnDelete }\r\n  ] = useMutation(DELETE_RESULTS, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Удалить не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data }) => {\r\n      const deletedPool = data.deleteResults.map(del => del.id)\r\n      setActiveResults(activeResults.filter(result => !deletedPool.includes(result.id)))\r\n      console.log(cache.data.data);\r\n      cache.modify({\r\n        fields: {\r\n          pollResults(existingRefs, { readField }) {\r\n            console.log(existingRefs);\r\n            return existingRefs.filter(respRef => !deletedPool.includes(readField('id', respRef)))\r\n          }\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n  // процесс фильтрации данных в зависимости от выбора пользователя\r\n  useEffect(() => {\r\n    if (activeFilters) {\r\n      const results = pollResults.poll.results\r\n      console.log(results);\r\n      const newResult = results.filter(result => {\r\n        return activeFilters.cities ? result.city ? activeFilters.cities.includes(result.city.id) : true : true\r\n      }).filter(result => {\r\n        return activeFilters.intervs ? result.user ? activeFilters.intervs.includes(result.user.id) : true : true\r\n      }).filter(result => {\r\n        return activeFilters.date ? result.lastModified ? activeFilters.date == result.lastModified : true : true\r\n      })\r\n      setActiveResults(newResult)\r\n    }\r\n  }, [activeFilters])\r\n\r\n  if (pollResultsLoading || !activeResults || filtersResultsLoading) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (pollResultsError || filtersResultsError) {\r\n    console.log(JSON.stringify(pollResultsError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (loadOnDelete) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  const handleResultsExport = () => {\r\n    const resultsPool = activeResults.filter(result =>\r\n      selectPool.includes(result.id)\r\n    ).map(obj => obj.result)\r\n    const lResults = resultsPool.length\r\n    let allResults = ''\r\n    for (let i = 0; i < lResults; i++) {\r\n      const oderedResults = resultsPool[i].slice().sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n      const details = oderedResults.map(obj => {\r\n        if (obj.text !== '') {\r\n          return obj.code + ' ' + obj.text\r\n        }\r\n        return obj.code\r\n      })\r\n      allResults += details + ',999' + '\\n'\r\n    }\r\n    downloadIt(allResults)\r\n  }\r\n\r\n  const downloadIt = (data) => {\r\n    const element = document.createElement('a')\r\n    const file = new Blob([data], { type: 'text/plain' });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"myFile.txt\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  }\r\n\r\n  const handleChartsData = () => {\r\n\r\n  }\r\n\r\n  const handleResultsBatchUpdate = () => {\r\n\r\n  }\r\n\r\n  const deleteComplitely = () => {\r\n    deleteResult({\r\n      variables: {\r\n        results: selectPool\r\n      },\r\n    })\r\n    setDelOpen(false)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <BatchUpdate data={pollResults} selectPool={selectPool}/>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <ConfirmDialog\r\n        open={delOpen}\r\n        confirm={deleteComplitely}\r\n        close={() => setDelOpen(false)}\r\n        data={\r\n          {\r\n            title: 'Удалить выбранные результаты?',\r\n            text: 'Внимание! Выбранные результаты будут уничтожены безвозвратно. Будьте внимательны!'\r\n          }\r\n        }\r\n      />\r\n      <div className=\"result-service-zone\">\r\n        <Grid container justify=\"space-between\" className=\"service-buttons\">\r\n          <Box className=\"main-buttons\">\r\n            <Tooltip title=\"Выгрузить\">\r\n              <IconButton\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                onClick={handleResultsExport}\r\n                disabled={!selectPool.length}\r\n              >\r\n                <PublishIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Графики\">\r\n              <IconButton\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                onClick={handleChartsData}\r\n                disabled={!selectPool.length}\r\n              >\r\n                <EqualizerIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Обновить\">\r\n              <IconButton\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                onClick={handleResultsBatchUpdate}\r\n                disabled={!selectPool.length}\r\n              >\r\n                <DynamicFeedIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Удалить\">\r\n              <IconButton\r\n                color=\"secondary\"\r\n                component=\"span\"\r\n                onClick={() => setDelOpen(true)}\r\n                disabled={!selectPool.length}\r\n              >\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Box>\r\n          <Grid item container xs={12} sm={6} md={3} lg={3} justify=\"flex-end\">\r\n            <Box m={1}>\r\n              <a href=\"\">Есть дубли</a>\r\n            </Box>\r\n            <Box m={1}>\r\n              <a href=\"\">Есть проблемы</a>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Filters filters={filtersResults} setActiveFilters={setActiveFilters} />\r\n        <DataGrid data={activeResults} selectPool={selectPool} setSelectPool={setSelectPool} />\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n\r\nexport default OverallResults","import React, { Fragment, useEffect, useRef, useState } from 'react'\r\nimport Chart from 'chart.js'\r\n\r\nconst BarChart = ({ question }) => {\r\n\r\n  const [data, setData] = useState({\r\n    labels: question.answers.map((_, index) => index + 1 + ''),\r\n    set: [\r\n      {\r\n        label: 'Кол-во',\r\n        data: question.answers.map(answer => answer.results.length)\r\n      }\r\n    ]\r\n  })\r\n\r\n  const chartRef = useRef()\r\n  useEffect(() => {\r\n    const myChartRef = chartRef.current.getContext(\"2d\")\r\n\r\n    new Chart(myChartRef, {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: data.labels,\r\n        datasets: data.set\r\n      },\r\n      options: {\r\n        showLines: false, // disable for all datasets\r\n        animation: {\r\n          duration: 0 // general animation time\r\n        },\r\n        hover: {\r\n          animationDuration: 0 // duration of animations when hovering an item\r\n        },\r\n        responsiveAnimationDuration: 0, // animation duration after a resize\r\n        legend: {\r\n          display: false,\r\n          labels: {\r\n            // This more specific font property overrides the global property\r\n            fontColor: 'black',\r\n            fontSize: 16\r\n          }\r\n        },\r\n        scales: {\r\n          yAxes: [{\r\n            ticks: {\r\n              beginAtZero: true\r\n            }\r\n          }]\r\n        }\r\n      }\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <canvas ref={chartRef} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default BarChart","import React, { Fragment, useState } from 'react'\r\n\r\nconst LinearTable = ({ index, question }) => {\r\n  const [count, setCount] = useState(\r\n    question.answers.reduce((acum, curr) => {\r\n      return acum + curr.results.length\r\n    }, 0)\r\n  )\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"linear-table\">\r\n        <table >\r\n          <tr>\r\n            <th>&nbsp;</th><th>Ответов</th><th>%</th>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"question-title\" colspan=\"3\"><strong>{index + 1}. {question.title}</strong></td>\r\n          </tr>\r\n          {question.answers.map((answer, index) =>\r\n            <tr>\r\n              <td className=\"answer-title\">\r\n                <strong>{index + 1}</strong>. - <strong>{answer.code}</strong> {answer.title}</td><td>{answer.results.length}</td>\r\n              <td>\r\n                {count ?\r\n                  (answer.results.length / count * 100).toFixed(1) :\r\n                  '-'\r\n                }\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </table>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default LinearTable","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_WITH_RESULTS = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      questions {\r\n        id\r\n        title\r\n        order\r\n        limit\r\n        type\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n          results {\r\n            id\r\n            code\r\n            text\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n`","import React, { Fragment } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\n\r\nimport BarChart from '../../components/BarChart'\r\nimport LinearTable from '../../components/LinearTable'\r\n\r\nimport { useQuery } from '@apollo/client'\r\n\r\nimport { GET_POLL_WITH_RESULTS } from './queries'\r\n\r\nconst LinearDistribution = ({ id }) => {\r\n\r\n  const {\r\n    data: pollResults,\r\n    loading: pollResultsLoading,\r\n    error: pollResultsError\r\n  } = useQuery(GET_POLL_WITH_RESULTS, {\r\n    variables: {\r\n      id\r\n    }\r\n  });\r\n\r\n  if (pollResultsLoading) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (pollResultsError) {\r\n    console.log(JSON.stringify(pollResultsError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <p> Линейное распределение ответов</p>\r\n      <Grid item container>\r\n        {pollResults.poll.questions.map((question, index) => (\r\n          <Fragment>\r\n            <Grid xs={12} md={6}>\r\n              <LinearTable index={index} key={question.id} question={question} />\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n              <BarChart question={question} />\r\n            </Grid>\r\n            <p></p>\r\n          </Fragment>\r\n        ))}\r\n      </Grid>\r\n\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default LinearDistribution","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n          results {\r\n            id\r\n            code\r\n            text\r\n          }\r\n        }\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useEffect, useState } from 'react'\r\nimport { mainUrl } from \"../../../../mainconfig\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\n\r\nimport LinearTable from '../../components/LinearTable'\r\nimport BarChart from '../../components/BarChart'\r\n\r\nimport { parseIni, normalizeLogic } from '../../../../modules/PollDrive/lib/utils'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_POLL_DATA } from './queries'\r\n\r\nconst BatchInput = ({ id }) => {\r\n  const [dataPool, setDataPool] = useState(false)\r\n  const [logic, setLogic] = useState(false)\r\n  const [processing, setProcessing] = useState(false)\r\n\r\n  const [displayData, setDisplayData] = useState(false)\r\n\r\n  useEffect(() => {\r\n\r\n    if (dataPool) {\r\n      const poll = pollData ? pollData.poll : null\r\n      if (poll) {\r\n        const questions = poll.questions\r\n        const resultPoolLength = dataPool.length\r\n        // пройтись по невидимым сперва\r\n\r\n        const newQuestionsPool = questions.map(question => {\r\n          const newAnswersPool = question.answers.map(answer => {\r\n            let temp = [...answer.results]\r\n            for (let i = 0; i < resultPoolLength; i++) {\r\n              if (dataPool[i].includes(answer.code)) {\r\n                temp.push({\r\n                  code: answer.code,\r\n                  text: ''\r\n                })\r\n              }\r\n            }\r\n            return {\r\n              ...answer,\r\n              results: temp\r\n            }\r\n          })\r\n          return {\r\n            ...question,\r\n            answers: newAnswersPool\r\n          }\r\n        })\r\n        setDisplayData(newQuestionsPool)\r\n        console.log(newQuestionsPool);\r\n      }\r\n    }\r\n  }, [dataPool])\r\n\r\n  const {\r\n    data: pollData,\r\n    loading: pollDataLoading,\r\n    error: pollDataError\r\n  } = useQuery(GET_POLL_DATA, {\r\n    variables: {\r\n      id\r\n    },\r\n    onCompleted: () => {\r\n      handleConfigFile(pollData.poll.logic.path)\r\n      console.log(pollData);\r\n    }\r\n  });\r\n\r\n  const handleConfigFile = (filePath) => {\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const logic = parseIni(text)\r\n        // Нормализация ЛОГИКИ - здесь формируется ЛОГИКА опроса, на основании конфиг файла !!!\r\n        const normLogic = normalizeLogic(logic)\r\n        setLogic(normLogic)\r\n      })\r\n  }\r\n\r\n  const handleWarInput = (e) => {\r\n    e.preventDefault()\r\n    if (!e.target.files[0]) return\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        // + удаляем перенос строк\r\n        const oprTextRaw = reader.result.replace(/\\r?\\n/g, \"\")\r\n        const oprArrayRaw = oprTextRaw.split(',999')\r\n        const oprArray = oprArrayRaw.filter(arr => arr.length)\r\n        const aLength = oprArray.length\r\n        let splitedCodesArrays = []\r\n        for (let i = 0; i < aLength; i++) {\r\n          const tempAr = oprArray[i].split(',')\r\n          const tempLength = tempAr.length\r\n          let normTemp = []\r\n          for (let j = 0; j < tempLength; j++) {\r\n            const atomData = tempAr[j]\r\n            normTemp.push(atomData.trim())\r\n          }\r\n          splitedCodesArrays.push(normTemp)\r\n        }\r\n        setDataPool(splitedCodesArrays)\r\n        setProcessing(false)\r\n      }\r\n    }\r\n    reader.readAsText(file);\r\n    e.target.value = \"\"\r\n  }\r\n\r\n  if (pollDataLoading) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (pollDataError) {\r\n    console.log(JSON.stringify(pollDataError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (processing) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Loading />\r\n      <p> Пакетный ввод данных</p>\r\n      <Grid container spacing={3} xs={12}>\r\n        <Grid item xs={12}>\r\n          <Box>\r\n            <label>Подгрузите файл с результатами</label>\r\n            <br />\r\n            <input\r\n              type=\"file\"\r\n              onInput={handleWarInput}\r\n            />\r\n          </Box>\r\n        </Grid>\r\n        {displayData &&\r\n          displayData.map((question, index) => (\r\n            <Fragment>\r\n              <Grid xs={12} md={6}>\r\n                <LinearTable index={index} key={question.id} question={question} />\r\n                <p></p>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <BarChart question={question} />\r\n                <p></p>\r\n              </Grid>\r\n            </Fragment>\r\n          ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default BatchInput","import React from 'react'\r\n\r\nimport AdaptiveTabs from '../../components/AdaptiveTabs'\r\n\r\nimport Generation from './containers/Generation'\r\nimport OverallResults from './containers/OverallResults'\r\nimport LinearDistibution from './containers/LinearDistribution'\r\nimport BatchInput from './containers/BatchInput'\r\n\r\nconst PollResults = ({ id }) => {\r\n  const data = [\r\n    {\r\n      label: 'Общие',\r\n      component: <OverallResults id={id} />\r\n    },\r\n    {\r\n      label: 'Линейка',\r\n      component: <LinearDistibution id={id} />\r\n    },\r\n    {\r\n      label: 'Пакетный',\r\n      component: <BatchInput id={id} />\r\n    },\r\n    {\r\n      label: 'Тестирование',\r\n      component: <Generation id={id} />\r\n    }\r\n  ]\r\n  return (\r\n    <AdaptiveTabs data={data} />\r\n  )\r\n\r\n}\r\n\r\nexport default PollResults","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollResults from '../modules/PollResults'\r\n\r\nconst Results = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Результаты ` + code} />\r\n      <div>\r\n        <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n          <PollResults id={id} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Results","function testXml(xmlString) {\r\n  var parser = new DOMParser();\r\n  var docError = parser.parseFromString('INVALID', 'text/xml');\r\n  var parsererrorNS = docError.getElementsByTagName(\"parsererror\")[0].namespaceURI;\r\n  var doc = parser.parseFromString(xmlString, 'text/xml');\r\n  if (doc.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0) {\r\n    return false\r\n  }\r\n  return doc;\r\n}\r\n\r\nconst xmlparser = (xmlString) => {\r\n  const xml = testXml(xmlString)\r\n  if (xml) {\r\n    const results = xml.getElementsByTagName('a')\r\n    const lResults = results.length\r\n    let outData = []\r\n    for (let i = 0; i < lResults; i++) {\r\n      let resultData = {\r\n        unit: results[i].getAttribute('usr_intrv'),\r\n        date: results[i].getAttribute('date_intrv'),\r\n        lan: results[i].getAttribute('start-lan'),\r\n        lon: results[i].getAttribute('start-lon'),\r\n      }\r\n      const questions = results[i].getElementsByTagName('v')\r\n      const lQuestions = questions.length\r\n      let answersPool = []\r\n      for (let i = 0; i < lQuestions; i++) {\r\n        const answers = questions[i].getElementsByTagName('o')\r\n        const lAnswers = answers.length\r\n        for (let i = 0; i < lAnswers; i++) {\r\n          const code = answers[i].getAttribute('c').padStart(3, \"0\")\r\n          answersPool.push(code)\r\n        }\r\n        resultData.answers = answersPool\r\n      }\r\n      outData.push(resultData)\r\n    }\r\n    return outData\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default xmlparser","import React, { Fragment, useState } from 'react'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport xmlparser from '../../lib/xmlparser'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst ParchaXmlAnalyzer = () => {\r\n  const [parchaData, setParchaData] = useState(null)\r\n  const [processing, setProcessing] = useState(false)\r\n  const classes = useStyles();\r\n\r\n  const handleInput = (e) => {\r\n    e.preventDefault()\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        const xmlText = reader.result\r\n        const xml = xmlparser(xmlText)\r\n        if (xml) {\r\n          setParchaData(xml)\r\n          setProcessing(false)\r\n          return\r\n        } else {\r\n          setProcessing(false)\r\n          console.log('Неправильный формат XML');\r\n          return\r\n        }\r\n      }\r\n      reader.readAsText(file);\r\n    }\r\n  }\r\n\r\n  const UnitInfo = ({ data }) => {\r\n    console.log(data);\r\n    if (data.lan !== '' || data.lon !== '') {\r\n      return data.answers.toString() + ',999'\r\n    } else {\r\n      return data.answers.toString() + ',999' + '-'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Backdrop className={classes.backdrop} open={processing} >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <input\r\n        type=\"file\"\r\n        onInput={handleInput}\r\n      />\r\n      <div className=\"parcha-results\">\r\n        {parchaData ?\r\n          parchaData.map((result, i) => (\r\n            <div>\r\n              { <UnitInfo data={result} />}\r\n            </div>\r\n          )) : <p>Подгрузите данные</p>\r\n        }\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ParchaXmlAnalyzer","import React, { Fragment } from 'react'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\nconst WarShow = ({ data }) => {\r\n  return (\r\n    <Fragment>\r\n      <Grid container spacing={3}>\r\n        {data.map(({ person, places }, index) => {\r\n          const placesOfWork = places.map(({ title, workDays }) => {\r\n            const workD = workDays.map(d => <span><span>{d}</span><br /></span>)\r\n            return (\r\n              <span>\r\n                <span className=\"work-title\">{title}</span><br />\r\n                <span>{workD}</span>\r\n              </span>\r\n            )\r\n          })\r\n          return (\r\n            <Grid item xs={6} sm={6} md={4}>\r\n              <Paper>\r\n                <span>№ п.п. {index + 1}</span><br />\r\n                <span>№ по списку {person[0]}</span><br />\r\n                <span>{person[1]}</span><span className=\"person-name\">{`${person[2]} ${person[3]} ${person[4].slice(0, -1)} `}</span><br />\r\n                <span>{`${person[2]} ${person[3].substring(0, 1)}.${person[4].substring(0, 1)}. `}</span><br />\r\n                <span>Дата рождения: {person[5]}</span><br />\r\n                <span>Дата увольнения:</span><span className=\"person-out\"> {person[6]}</span>\r\n                <Divider />\r\n                <span className=\"work-header\"><em>Места работы:</em></span><br />\r\n                <span>{placesOfWork}</span>\r\n              </Paper>\r\n            </Grid>\r\n          )\r\n        })}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WarShow","export const pensParser = (text) => {\r\n  let empty = []\r\n  let need = []\r\n  let persons = []\r\n  const rr = text.split('\\n\\r')\r\n  const regEx = /нет сведен.., составляющ.. пенсионн.. прав.?/\r\n  for (let i = 0; i < rr.length; i++) {\r\n    if (regEx.test(rr[i])) {\r\n      let person = []\r\n      const splited = rr[i].split(' ')\r\n      person.push(splited[7], splited[8], splited[9], splited[10])\r\n      empty.push({\r\n        person,\r\n        data: null\r\n      })\r\n    } else {\r\n      let person = []\r\n      const splited = rr[i].split(' ')\r\n      person.push(splited[7], splited[8], splited[9], splited[10])\r\n      const full = rr[i]\r\n      need.push({\r\n        person,\r\n        data: full\r\n      })\r\n    }\r\n  }\r\n  const result = {\r\n    empty,\r\n    need\r\n  }\r\n  return result\r\n}\r\n\r\nexport const warior = (text) => {\r\n  let empty = []\r\n  let need = []\r\n  let persons = []\r\n  const rr = text.split('\\n')\r\n  for (let i = 0; i < rr.length; i++) {\r\n    let person = []\r\n    const splited = rr[i].split(';')\r\n    person.push(splited[0], splited[1], splited[2], splited[3], splited[4])\r\n    persons.push(person)\r\n  }\r\n  return persons\r\n}\r\n\r\nconst compareLists = (war, pens) => {\r\n  let doesNotMatch = []\r\n  let warMatchPool = []\r\n  // подсчет всех - просто промежуточные данные\r\n  const pensData = [...pens.empty, ...pens.need]\r\n  for (let i = 0; i < war.length; i++) {\r\n    const warPersonName = war[i][2]\r\n    const warPersonBorn = war[i][3]\r\n    const warPersonDismissal = war[i][4]\r\n    const warPersonSurname = warPersonName.split(' ')[0].toLowerCase()\r\n    let comp = 0\r\n    for (let j = 0; j < pensData.length; j++) {\r\n      const pensPersonSurname = pensData[j].person[0].toLowerCase()\r\n      const pensPersonBorn = pensData[j].person[3]\r\n      if (warPersonSurname === pensPersonSurname & warPersonBorn === pensPersonBorn) {\r\n        comp++\r\n      }\r\n    }\r\n    if (comp) {\r\n      warMatchPool.push(war[i])\r\n    } else {\r\n      doesNotMatch.push(war[i])\r\n    }\r\n  }\r\n  // вычисление и склеивание только нужных персон\r\n  const pensNeedData = [...pens.need]\r\n  let resulNeedData = []\r\n  let resultNotNeedData = []\r\n  for (let i = 0; i < warMatchPool.length; i++) {\r\n    const warPersonNum = warMatchPool[i][0]\r\n    const warPersonRank = warMatchPool[i][1]\r\n    const warPersonName = warMatchPool[i][2]\r\n    const warPersonBorn = warMatchPool[i][3]\r\n    const warPersonDismissal = warMatchPool[i][4]\r\n    const warPersonSurname = warPersonName.split(' ')[0].toLowerCase()\r\n    let comp = 0\r\n    for (let j = 0; j < pensNeedData.length; j++) {\r\n      const pensPersonSurname = pensNeedData[j].person[0].toLowerCase()\r\n      const pensPersonBorn = pensNeedData[j].person[3]\r\n      if (warPersonSurname === pensPersonSurname & warPersonBorn === pensPersonBorn) {\r\n        const persD = [warPersonNum, warPersonRank, ...pensNeedData[j].person, warPersonDismissal]\r\n        resulNeedData.push({\r\n          person: persD,\r\n          data: pensNeedData[j].data\r\n        })\r\n        comp++\r\n      }\r\n    }\r\n    if (!comp) {\r\n      // В/сл по которым нет сведения в пенсионном фонде\r\n      const person = [warPersonNum, warPersonRank, warPersonName, warPersonBorn, warPersonDismissal]\r\n      resultNotNeedData.push(\r\n        person\r\n      )\r\n    }\r\n  }\r\n  return resulNeedData\r\n}\r\n\r\nexport const processLists = (war, pens) => {\r\n  const resulNeedData = compareLists(war, pens)\r\n  let aLength = resulNeedData.length\r\n  // let aLength = 4\r\n  const regEx = /Факт работы \\(с 2017/;\r\n  let normalize = []\r\n  let sheeet = []\r\n  let finalResult = []\r\n  for (let i = 0; i < aLength; i++) {\r\n    const personData = resulNeedData[i]\r\n    const person = personData.person\r\n    const places = personData.data\r\n    const splited = places.split('\\n').slice(3)\r\n    // if (!regEx.test(splited[0])) {\r\n    //   console.log(person);\r\n    // }\r\n    finalResult.push({\r\n      person,\r\n      places: [...glueNormData(splited.slice(1))]\r\n    })\r\n  }\r\n  return finalResult\r\n}\r\n\r\nexport const compareDates = (data) => {\r\n  const intrestPersons = data.map((obj, index) => {\r\n    const dateReg = /^(\\d{2}).(\\d{2}).(\\d{4})/\r\n    const dateOfDismissal = Date.parse(obj.person[6].replace(dateReg, '01.$2.$3'))\r\n    const dateMatch = obj.person[6].match(dateReg)\r\n    const maxNeedDate = Date.parse('01.' + dateMatch[2] + '.' + (parseInt(dateMatch[3], 10) + + 2))\r\n    const places = obj.places\r\n    let placesOfWork = []\r\n    for (let i = 0; i < places.length; i++) {\r\n      const workDate = places[i].work\r\n      let workArray = []\r\n      for (let j = 0; j < workDate.length; j++) {\r\n        const dateInWork = Date.parse(getDateFromString(workDate[j]))\r\n        if (dateInWork >= dateOfDismissal & dateInWork <= maxNeedDate) {\r\n          workArray.push(workDate[j])\r\n        }\r\n      }\r\n      if (workArray.length) {\r\n        placesOfWork.push({\r\n          title: places[i].title,\r\n          workDays: workArray\r\n        })\r\n      }\r\n    }\r\n    if (placesOfWork.length) {\r\n      return { ...obj, places: placesOfWork }\r\n    } else {\r\n      return false\r\n    }\r\n  }).filter(person => person)\r\n  return intrestPersons\r\n}\r\n\r\nconst getDateFromString = (dString) => {\r\n  const reg = /([а-яА-Я]+)\\s(\\d{4})/\r\n  const dd = dString.match(reg)\r\n  const month = dd[1]\r\n  const year = dd[2]\r\n  switch (month) {\r\n    case 'январь':\r\n      return '01.01.' + year\r\n    case 'февраль':\r\n      return '01.02.' + year\r\n    case 'март':\r\n      return '01.03.' + year\r\n    case 'апрель':\r\n      return '01.04.' + year\r\n    case 'май':\r\n      return '01.05.' + year\r\n    case 'июнь':\r\n      return '01.06.' + year\r\n    case 'июль':\r\n      return '01.07.' + year\r\n    case 'август':\r\n      return '01.08.' + year\r\n    case 'сентябрь':\r\n      return '01.09.' + year\r\n    case 'октябрь':\r\n      return '01.10.' + year\r\n    case 'ноябрь':\r\n      return '01.11.' + year\r\n    case 'декабрь':\r\n      return '01.12.' + year\r\n  }\r\n}\r\n\r\nconst glueNormData = (placesRaw) => {\r\n  let places = []\r\n  let dates = 1\r\n  let title = ''\r\n  let work = []\r\n  const dataReg = /^(\\S+) (\\d{4})\\s/\r\n  // обработка данных от ПФР\r\n  for (let k = 0; k < placesRaw.length; k++) {\r\n    if (!dataReg.test(placesRaw[k])) {\r\n      if (dates) {\r\n        places = [...places, { title, work }]\r\n        title = placesRaw[k]\r\n        work = []\r\n      } else {\r\n        title += \" \" + placesRaw[k]\r\n      }\r\n      dates = 0\r\n    } else {\r\n      work.push(placesRaw[k])\r\n      if (k === placesRaw.length - 1) {\r\n        places = [...places, { title, work }]\r\n      }\r\n      dates = 1\r\n    }\r\n  }\r\n  return places.slice(1)\r\n}\r\n\r\n\r\n// уже не надо\r\nconst glueSheetData = (placesRaw) => {\r\n  let places = []\r\n  let dates = 1\r\n  let title = ''\r\n  let work = []\r\n  const dataReg = /\\d{2}.\\d{2}.\\d{4}-\\d{2}.\\d{2}.\\d{4}/\r\n  const dataRegEx = /^(\\S+) (\\d{4})\\s/\r\n  // обработка данных от ПФР\r\n  for (let k = 0; k < placesRaw.length; k++) {\r\n    if (!dataReg.test(placesRaw[k]) & !dataRegEx.test(placesRaw[k])) {\r\n      if (dates) {\r\n        places = [...places, { title, work }]\r\n        title = placesRaw[k]\r\n        work = []\r\n      } else {\r\n        title += \" \" + placesRaw[k]\r\n      }\r\n      dates = 0\r\n    } else {\r\n      work.push(placesRaw[k])\r\n      if (k === placesRaw.length - 1) {\r\n        places = [...places, { title, work }]\r\n      }\r\n      dates = 1\r\n    }\r\n  }\r\n\r\n  // нормализовать даты\r\n  const workDates = places.map(obj => {\r\n    const workArray = obj.work\r\n    for (let i = 0; i < workArray.length; i++) {\r\n      if (dataReg.test(workArray[i])) {\r\n        console.log(workArray[i]);\r\n      }\r\n    }\r\n    return obj\r\n  })\r\n\r\n  return places.slice(1)\r\n}","import React, { Fragment, useState } from 'react'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport WarShow from '../WarShow'\r\nimport CsvShow from '../CsvShow'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { pensParser, warior, processLists, compareDates } from '../../lib/txtparser'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst WordAnalyzer = () => {\r\n  const [pensData, setPensData] = useState(null)\r\n  const [warData, setWarData] = useState(null)\r\n  const [processing, setProcessing] = useState(false)\r\n  const [errorMessage, setMessage] = useState(null)\r\n  const [ready, setReady] = useState(null)\r\n  const [processedData, setProcessedData] = useState(null)\r\n  const [finalData, setFinalData] = useState(null)\r\n  const classes = useStyles();\r\n\r\n  const handleInput = (e) => {\r\n    e.preventDefault()\r\n    setMessage(null)\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        const wordText = reader.result\r\n        const data = pensParser(wordText)\r\n        setPensData(data)\r\n        setProcessing(false)\r\n      }\r\n    }\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  const handleWarInput = (e) => {\r\n    e.preventDefault()\r\n    setMessage(null)\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        const wordText = reader.result\r\n        const data = warior(wordText)\r\n        setWarData(data)\r\n        setProcessing(false)\r\n      }\r\n    }\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  const process = () => {\r\n    if (pensData && warData) {\r\n      setMessage(null)\r\n      const pData = processLists(warData, pensData)\r\n      setProcessedData(pData)\r\n      setReady(true)\r\n    } else {\r\n      setMessage('Не все данные подгружены')\r\n    }\r\n  }\r\n\r\n  const processEx = () => {\r\n    if (ready) {\r\n      const itrestPerson = compareDates(processedData)\r\n      console.log(itrestPerson);\r\n      setFinalData(itrestPerson)\r\n    } else {\r\n      if (pensData && warData) {\r\n        setMessage('Сперва нужно обработать')\r\n      } else {\r\n        setMessage('Не все данные подгружены')\r\n      }\r\n    }\r\n  }\r\n\r\n  const UnitInfo = ({ data }) => {\r\n    console.log(data);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Backdrop className={classes.backdrop} open={processing} >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs>\r\n          <Box>\r\n            <label>Список военных</label>\r\n            <br />\r\n            <input\r\n              type=\"file\"\r\n              onInput={handleWarInput}\r\n            />\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Box>\r\n            <label>Список песионного фонда</label>\r\n            <br />\r\n            <input\r\n              type=\"file\"\r\n              onInput={handleInput}\r\n            />\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={3}>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={process}>\r\n            Обработать\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={processEx}>\r\n            Сравнить даты\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <p></p>\r\n      {errorMessage ?\r\n        <Alert severity=\"error\">{errorMessage}</Alert>\r\n        :\r\n        <p></p>\r\n      }\r\n      <div className=\"parcha-results\">\r\n        {finalData ?\r\n          <WarShow data={finalData} />\r\n          : <p></p>\r\n        }\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WordAnalyzer","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport ParchaXmlAnalyzer from './components/ParchaXmlAnalyzer'\r\nimport WordAnalyzer from './components/WordAnalyzer'\r\n\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      className=\"right-pannel\"\r\n      hidden={value !== index}\r\n      id={`vertical-tabpanel-${index}`}\r\n      aria-labelledby={`vertical-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction allProps(index) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    'aria-controls': `vertical-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    display: 'flex',\r\n  },\r\n  tabs: {\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n    overflow: 'visible'\r\n  },\r\n}));\r\n\r\n\r\nconst PollSettings = ({ id, code }) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Tabs\r\n        orientation=\"vertical\"\r\n        variant=\"scrollable\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        className={classes.tabs}\r\n      >\r\n        <Tab label=\"Парча\" {...allProps(0)} />\r\n        <Tab label=\"Word\" {...allProps(1)} />\r\n      </Tabs>\r\n      <TabPanel value={value} index={0}>\r\n        <ParchaXmlAnalyzer />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <WordAnalyzer />\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PollSettings","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container'\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport DataAnalyzer from '../modules/DataAnalyzer'\r\n\r\nconst Analyze = () => {\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Анализатор данных`} />\r\n      <div style={{ paddingTop: '10px' }}>\r\n        <Container maxWidth=\"xl\">\r\n          <DataAnalyzer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Analyze","import React, { Fragment } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport SettingBar from '../components/SettingBar'\r\n// import Test from '../containers/Test'\r\n\r\n// const Tester = observer(\r\nconst TesterPage = () => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title='Тестирование инерфейса' />\r\n      <Container maxWidth=\"lg\">\r\n        {/* <Test /> */}\r\n      </Container>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default TesterPage","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questionsCount\r\n      answersCount\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        topic {\r\n          id\r\n          title\r\n        }\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n        }\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\nimport { mainUrl } from '../../../../mainconfig'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport EmojiPeopleIcon from '@material-ui/icons/EmojiPeople';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\n\r\nimport { parseIni, normalizeLogic } from '../../../PollDrive/lib/utils'\r\nimport { useQuery } from '@apollo/client'\r\n\r\nimport { GET_POLL_DATA } from \"./queries\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  popover: {\r\n    pointerEvents: 'none',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst ServiceIcons = ({ answer }) => {\r\n  const edit = (\r\n    <Tooltip key={1} title=\"Свободный ответ\">\r\n      <EditIcon />\r\n    </Tooltip>\r\n  )\r\n  const difficult = (\r\n    <Tooltip key={2} title=\"Затрудняюсь ответить\">\r\n      <EmojiPeopleIcon />\r\n    </Tooltip>\r\n  )\r\n  const unique = (\r\n    <Tooltip key={3} title=\"Уникальный ответ\">\r\n      <FlashOnIcon />\r\n    </Tooltip>\r\n  )\r\n  let r = []\r\n  if (answer.difficult) {\r\n    r.push(difficult)\r\n  }\r\n  if (answer.freeAnswer) {\r\n    r.push(edit)\r\n  }\r\n  if (answer.unique) {\r\n    r.push(unique)\r\n  }\r\n  return r\r\n}\r\n\r\nconst AnswerCard = ({ answer, index }) => {\r\n  return (\r\n    <div className={answer.disabled ? \"answer-card invisible\" : \"answer-card\"}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Box m={1}>\r\n          <span className=\"answer-number\">{index + 1}.</span>\r\n          <span className=\"devider\"> </span>\r\n          <span className=\"answer-code\">{answer.code}</span>\r\n          <span className=\"devider\"> - </span>\r\n          <span className=\"answer-title\">{answer.title}</span>\r\n\r\n        </Box>\r\n        <Box m={1}>\r\n          <span>\r\n            <ServiceIcons answer={answer} />\r\n          </span>\r\n        </Box>\r\n      </Grid>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst QuestionTopic = ({ topic }) => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const handlePopoverOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handlePopoverClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const open = Boolean(anchorEl);\r\n\r\n  return (\r\n    <Fragment>\r\n      <InfoIcon\r\n        onMouseEnter={handlePopoverOpen}\r\n        onMouseLeave={handlePopoverClose}\r\n        fontSize=\"small\" />\r\n      <Popover\r\n        className={classes.popover}\r\n        classes={{\r\n          paper: classes.paper,\r\n        }}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left',\r\n        }}\r\n        onClose={handlePopoverClose}\r\n        disableRestoreFocus\r\n      >\r\n        <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n          Тема: {topic.title}\r\n        </Typography>\r\n      </Popover>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nconst QuestionCard = ({ question, index }) => {\r\n  return (\r\n    <Card className=\"question-card\">\r\n      <CardContent>\r\n        <div className=\"question-header\">\r\n          <Tooltip title=\"Макс. кол-во ответов\">\r\n            <span className=\"question-limit\">{question.limit}</span>\r\n          </Tooltip>\r\n          <span className=\"question-number\">{index + 1}.</span>\r\n          <span className=\"question-title\" color=\"textSecondary\">\r\n            {question.title}\r\n            <QuestionTopic topic={question.topic} />\r\n          </span>\r\n        </div>\r\n        {question.answers.map((answer, index) => (\r\n          <AnswerCard key={index} answer={answer} index={index} />\r\n        ))}\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst CommonSetting = ({ id }) => {\r\n  const [ready, setReady] = useState(false)\r\n  const [questions, setQuestions] = useState()\r\n  const {\r\n    loading,\r\n    error,\r\n    data: pollData\r\n  } = useQuery(GET_POLL_DATA, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      handleConfigFileAndUpdateCache(pollData.poll)\r\n    }\r\n  })\r\n\r\n\r\n  const handleConfigFileAndUpdateCache = (poll) => {\r\n    const filePath = poll.logic.path\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const normalizedLogic = normalizeLogic(parseIni(text))\r\n        const updatedQuestions = modulateQuestionsWithLogic(normalizedLogic)\r\n        setQuestions(updatedQuestions.sort((a, b) => (a.order > b.order) ? 1 : -1))\r\n        setReady(true)\r\n      })\r\n  }\r\n\r\n  const modulateQuestionsWithLogic = (logic) => {\r\n    const modQuestions = pollData.poll.questions.map(question => {\r\n      const newAnswers = question.answers.map(answer => {\r\n        let suffix = {}\r\n        if (logic.invisible) {\r\n          if (logic.invisible.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              disabled: true\r\n            }\r\n          }\r\n        }\r\n        if (logic.freeAnswers) {\r\n          if (logic.freeAnswers.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              freeAnswer: true\r\n\r\n            }\r\n          }\r\n        }\r\n        if (logic.unique) {\r\n          if (logic.unique.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              unique: true\r\n            }\r\n          }\r\n        }\r\n        if (logic.difficult) {\r\n          if (logic.difficult.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              difficult: true\r\n            }\r\n          }\r\n        }\r\n        const newAnswer = {\r\n          ...answer,\r\n          ...suffix\r\n        }\r\n        return newAnswer\r\n      })\r\n      const newQuestion = {\r\n        ...question,\r\n        answers: newAnswers,\r\n        ffffuck: true\r\n      }\r\n      return newQuestion\r\n    })\r\n    return modQuestions\r\n  }\r\n\r\n  if (loading || !questions || !ready) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container className=\"common-settings\">\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          <strong>Тема: </strong>{pollData.poll.title}\r\n        </Typography>\r\n        <Grid\r\n          className=\"poll-info\"\r\n          container\r\n          direction=\"row\"\r\n          justify=\"space-between\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Box m={1}>\r\n            <div> Вопросов: {pollData.poll.questionsCount}</div>\r\n          </Box>\r\n          <Box m={1}>\r\n            <div> Ответов: {pollData.poll.answersCount}</div>\r\n          </Box>\r\n        </Grid>\r\n        {questions.map((question, index) => (\r\n          <QuestionCard question={question} key={question.id} index={index} />\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default CommonSetting","import { gql } from '@apollo/client'\r\n\r\nexport const logicQuery = gql`\r\n  query logicQuery($id: ID!) {\r\n    pollLogic(id: $id) {\r\n      id\r\n      path\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const saveConfigChanges = gql`\r\nmutation saveConfigChanges($path: String!, $text: String!) {\r\n  saveConfig(path: $path, text: $text)\r\n}\r\n`","import React, { Fragment, useState, useRef } from 'react'\r\nimport { mainUrl } from '../../../../mainconfig'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Box, Typography } from '@material-ui/core';\r\n\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { logicQuery } from \"./queries\"\r\nimport { saveConfigChanges } from \"./mutations\"\r\nimport { GET_POLL_DATA } from '../../containers/Common/queries'\r\n\r\nconst ConfigEditor = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  const [updated, setUpdated] = useState(false)\r\n  const [config, setConfig] = useState(null)\r\n  const [filePath, setFilePath] = useState(null)\r\n  const textRef = useRef()\r\n  const { loading, error, data } = useQuery(logicQuery, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      handleConfigFile(data.pollLogic.path)\r\n    },\r\n  })\r\n\r\n  const [saveConfig, { loading: configSaveLoading }] = useMutation(saveConfigChanges, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    onCompleted: () => {\r\n      setNoti({\r\n        type: 'success',\r\n        text: 'Конфиг сохранен успешно!'\r\n      })\r\n    },\r\n    refetchQueries: () => [{\r\n      query: GET_POLL_DATA,\r\n      variables: {\r\n        id\r\n      }\r\n    }]\r\n  })\r\n\r\n  const handleConfigFile = (filePath) => {\r\n    setFilePath(filePath)\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        setConfig(text)\r\n      })\r\n  }\r\n\r\n  const handleSave = (e) => {\r\n    saveConfig({\r\n      variables: {\r\n        path: filePath,\r\n        text: textRef.current.value\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleConfigChange = (e) => {\r\n    if (config === e.currentTarget.value) {\r\n      setUpdated(false)\r\n      return\r\n    }\r\n    setUpdated(true)\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (configSaveLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  if (loading || !config) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n\r\n      <Grid item container>\r\n        <Grid item container justify=\"space-between\">\r\n          <Box p={1}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Отображение и настройка конфигурационного файла\r\n            </Typography>\r\n          </Box>\r\n          <Box>\r\n            <Tooltip title=\"Сохранить\">\r\n              <IconButton onClick={handleSave} disabled={!updated}>\r\n                <SaveIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Box>\r\n          <textarea\r\n            ref={textRef}\r\n            defaultValue={config}\r\n            onChange={handleConfigChange}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ConfigEditor","import { gql } from '@apollo/client'\r\n\r\nexport const DELETE_POLL = gql`\r\n  mutation deletePoll($id: ID!) {\r\n    deletePoll(id: $id) {\r\n      title\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_ACTIVE_POLLS } from '../../../PollHome/queries'\r\nimport { DELETE_POLL } from './mutations'\r\n\r\nconst DeletePoll = ({ id, code }) => {\r\n  const history = useHistory();\r\n  const [open, setOpen] = useState(false)\r\n  const [incorrect, setIncorrect] = useState(true)\r\n  const [delPoll, { poll }] = useMutation(DELETE_POLL, {\r\n    onCompleted: () => {\r\n      history.push(\"/\")\r\n    }\r\n  })\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handlePollDel = (id) => {\r\n    delPoll({\r\n      variables: {\r\n        id\r\n      },\r\n      refetchQueries: [{ query: GET_ALL_ACTIVE_POLLS }]\r\n    })\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const text = e.currentTarget.value.toUpperCase()\r\n    e.currentTarget.value = text\r\n    if (text.toUpperCase() === code) {\r\n      setIncorrect(false)\r\n    } else {\r\n      setIncorrect(true)\r\n    }\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    handlePollDel(id)\r\n  }\r\n\r\n  const deleteQuery = () => {\r\n    setOpen(true);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Удаление</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Это действие не может быть отменено.\r\n              Оно приведет к безвозвратному удалению ВСЕХ данных опроса.\r\n            </Typography>\r\n            <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n              Пожалуйста, введите КОД опроса.\r\n            </Typography>\r\n          </DialogContentText>\r\n          <TextField\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Код опроса\"\r\n            type=\"text\"\r\n            fullWidth\r\n            onChange={handleChange}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={handleDelete} color=\"primary\" disabled={incorrect}>\r\n            Удалить\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n        удаление опроса\r\n        </Typography>\r\n      <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n        После удаления ОПРОСА пути назад уже не будет. Пожалуйста, будьте внимательны.\r\n          </Typography>\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={deleteQuery}>\r\n        Удалить опрос\r\n          </Button>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default DeletePoll","import { gql } from '@apollo/client'\r\n\r\nexport const GET_ALL_CITIES_AND_ACTIVE = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      cities {\r\n        id\r\n        title\r\n        population\r\n        category {\r\n          title\r\n        }\r\n      }\r\n    }\r\n    cities {\r\n      id\r\n      title\r\n      category {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const DELETE_CITY_FROM_ACTIVE = gql`\r\n  mutation ($id: ID!, $cities: [String]) {\r\n    deleteCityFromActive(id: $id, cities: $cities) {\r\n      id\r\n      cities {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const SET_ACTIVE_CITIES = gql`\r\n  mutation ($id: ID!, $cities: [String]) {\r\n    setPollCity(id: $id, cities: $cities) {\r\n      id\r\n      cities {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog'\r\n\r\nimport { gql, useApolloClient, useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_CITIES_AND_ACTIVE } from './queries'\r\nimport { SET_ACTIVE_CITIES, DELETE_CITY_FROM_ACTIVE } from './mutations'\r\n\r\nconst CitiesEditor = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  // const client = useApolloClient();\r\n  // const { currentUser } = client.readQuery({\r\n  //   query: gql`\r\n  //   query {\r\n  //     currentUser {\r\n  //       id\r\n  //       username\r\n  //     }\r\n  //   }\r\n  //   `,\r\n  // })\r\n  const [clear, setClear] = useState(0)\r\n  const [delId, setDelId] = useState(false)\r\n  const [allCities, setAllCitites] = useState()\r\n  const [availableCities, setAvailableCities] = useState()\r\n  const [selected, setSelected] = useState([])\r\n  const {\r\n    data: citiesData,\r\n    loading: citiesLoading,\r\n    error: cititesError\r\n  } = useQuery(GET_ALL_CITIES_AND_ACTIVE, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      const pollCities = citiesData.poll.cities\r\n      setAllCitites(citiesData.cities)\r\n      setAvailableCities(citiesData.cities.filter(\r\n        city => {\r\n          for (let i = 0; i < pollCities.length; i++) {\r\n            if (city.id === pollCities[i].id) {\r\n              return false\r\n            }\r\n          }\r\n          return true\r\n        }\r\n      ))\r\n    }\r\n  })\r\n  const [\r\n    setCityActive,\r\n    { loading: cityActivationLoading }\r\n  ] = useMutation(SET_ACTIVE_CITIES, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    update: (cache, { data: { setPollCity } }) => {\r\n      const cities = setPollCity.cities.map(city => city.id)\r\n      setAvailableCities(availableCities.filter(city => {\r\n        return !cities.includes(city.id)\r\n      }))\r\n    }\r\n  })\r\n  const [\r\n    deleteCity,\r\n    { loading: deleteCityLoading }\r\n  ] = useMutation(DELETE_CITY_FROM_ACTIVE, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Удалить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    update: (cache, { data }) => {\r\n      const pollCities = data.deleteCityFromActive.cities\r\n      const aCitites = allCities.filter(city => {\r\n        for (let i = 0; i < pollCities.length; i++) {\r\n          if (city.id === pollCities[i].id) return false\r\n        }\r\n        return true\r\n      })\r\n      setAvailableCities(aCitites)\r\n    }\r\n  })\r\n\r\n  if (citiesLoading || !citiesData || !availableCities) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  const Loading = () => {\r\n    if (cityActivationLoading || deleteCityLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  if (cititesError) {\r\n    console.log(JSON.stringify(cititesError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const handleCityDelete = (id) => {\r\n    setDelId(id)\r\n  }\r\n\r\n  const handleDelConfirm = () => {\r\n    deleteCityCompletely([delId])\r\n    setDelId(false)\r\n  }\r\n\r\n  const handleAdd = () => {\r\n    const selectedCities = selected.map(obj => {\r\n      return obj.id\r\n    })\r\n    setCityActive({\r\n      variables: {\r\n        id,\r\n        cities: selectedCities\r\n      },\r\n    })\r\n    setClear(clear + 1)\r\n  }\r\n\r\n  const handleChange = (_, value) => {\r\n    setSelected(value)\r\n  }\r\n\r\n  const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\n  const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\n  const deleteCityCompletely = (cities) => {\r\n    deleteCity({\r\n      variables: {\r\n        id,\r\n        cities: cities\r\n      }\r\n    })\r\n  }\r\n\r\n  const CityCard = ({ city, deleteCity }) => {\r\n    const handleDelete = () => {\r\n      deleteCity(city.id)\r\n    }\r\n    return (\r\n      <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n        <Paper className=\"city-card\">\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {city.title}\r\n          </Typography>\r\n          <Typography variant=\"subtitle2\" gutterBottom>\r\n            {city.category.title}\r\n          </Typography>\r\n          <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n            Население: {city.population}\r\n          </Typography>\r\n          <Grid container item justify=\"space-between\" className=\"card-service-buttons\">\r\n            <IconButton className=\"card-button\" aria-label=\"delete\" onClick={handleDelete}>\r\n              <DeleteIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <ConfirmDialog\r\n        open={delId}\r\n        confirm={handleDelConfirm}\r\n        close={() => setDelId(false)}\r\n        data={\r\n          {\r\n            title: 'Удалить населенный пункт?',\r\n            text: 'Внимание! Результаты опросов учитывают н.п. в которых они проводились, удаление приведет к потере части статистики и некорректности ее отображения.'\r\n          }\r\n        }\r\n      />\r\n      <div className=\"cities-service-zone\">\r\n        <Typography className=\"header\">Города в которых проводится опрос</Typography>\r\n        <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n          <Grid item xs={12} sm={8} md={6} lg={5}>\r\n            <Autocomplete\r\n              multiple\r\n              key={clear}\r\n              limitTags={3}\r\n              options={availableCities}\r\n              disableCloseOnSelect\r\n              clearOnEscape\r\n              onChange={handleChange}\r\n              getOptionLabel={(option) => option.title}\r\n              renderOption={(option, { selected }) => (\r\n                <React.Fragment>\r\n                  <Checkbox\r\n                    icon={icon}\r\n                    checkedIcon={checkedIcon}\r\n                    style={{ marginRight: 8 }}\r\n                    checked={selected}\r\n                  />\r\n                  {option.title}\r\n                </React.Fragment>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"outlined\" label=\"Добавьте город\" />\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4} md={6} lg={5}>\r\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={handleAdd} disabled={!selected.length}>\r\n              Добавить\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <Grid container spacing={3} xs={12} >\r\n        {citiesData.poll.cities.map((city, index) => (\r\n          <CityCard key={index} city={city} deleteCity={handleCityDelete} />\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default CitiesEditor","import React, { useState } from 'react'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nconst QuestionCard = ({ question, handleLimitInput }) => {\r\n  const [val, setVal] = useState(question.limit)\r\n\r\n  const handleKeyUp = (e) => {\r\n    if (e.keyCode === 13) e.currentTarget.blur()\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const currentValue = e.currentTarget.value\r\n    console.log(e);\r\n    if (currentValue < 1) {\r\n      setVal(1)\r\n    } else if (currentValue > 99) {\r\n      setVal(99)\r\n    } else {\r\n      setVal(currentValue)\r\n    }\r\n  }\r\n\r\n  const handleBlur = (e) => {\r\n    handleLimitInput({\r\n      id: question.id,\r\n      limit: val\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n      <Paper className=\"question-item\" elevation={2}>\r\n        <Grid item xs={12} sm container>\r\n          <Grid item xs container direction=\"column\" spacing={2} alignItems=\"flex-start\">\r\n            <Grid item xs>\r\n              <Tooltip title=\"Очередность отображения\" aria-label=\"add\">\r\n                <Typography variant=\"body2\" color=\"primary\">\r\n                  {question.order}\r\n                </Typography>\r\n              </Tooltip>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs container direction=\"column\" spacing={3} alignItems=\"flex-end\" >\r\n            <Grid item xs alignItems=\"center\" style={{ cursor: 'pointer' }}>\r\n              <Tooltip title=\"Меню. В разработке\" aria-label=\"add\">\r\n                <MoreVertIcon />\r\n              </Tooltip>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Tooltip title=\"Лимит ответов\" aria-label=\"add\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"question-limit-input\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                onKeyUp={handleKeyUp}\r\n                value={val}\r\n              />\r\n            </Tooltip>\r\n          </Grid>\r\n        </Grid>\r\n        <Typography className=\"question-title\">\r\n          {question.title.length > 160 ?\r\n            question.title.substring(0, 100) + ' ... ' + question.title.substring(question.title.length - 45) :\r\n            question.title\r\n          }\r\n        </Typography>\r\n\r\n      </Paper>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default QuestionCard","import { gql } from '@apollo/client'\r\n\r\nexport const pollQuery = gql`\r\n  query pollQuery($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const saveNewLimit = gql`\r\nmutation ($id: ID!, $limit: Int!) {\r\n  newLimit(id: $id, limit: $limit) {\r\n    id\r\n    limit\r\n  }\r\n}\r\n`\r\nexport const saveNewOrder = gql`\r\nmutation ($questions: [ReorderedArray]) {\r\n  newOrder(neworder: $questions) {\r\n    id\r\n    order\r\n  }\r\n}\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\r\nimport arrayMove from \"array-move\";\r\n\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport QuestionCard from '../../components/QuestionCard'\r\nimport { pollQuery } from \"./queries\"\r\nimport { saveNewLimit, saveNewOrder } from \"./mutations\"\r\n\r\nconst ReoderEditor = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  const [questions, setQuestions] = useState(null)\r\n  const [prevOrder, setPrevOrder] = useState(null)\r\n  const { loading: pollLoading, error: pollError, data } = useQuery(pollQuery, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      const questions = data.poll.questions\r\n      console.log(questions);\r\n      setQuestions(questions.slice().sort((a, b) => (a.order > b.order) ? 1 : -1))\r\n    }\r\n  })\r\n  const [saveLimit, { loading: limitSaveLoading }] = useMutation(saveNewLimit, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить лимит не удалось. Смотрите консоль.'\r\n      })\r\n    }\r\n  })\r\n  const [saveOrder, { loading: saveOrderLoading }] = useMutation(saveNewOrder, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить порядок не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    update: (cache, { data }) => {\r\n      const questions = data.newOrder\r\n      for (let i = 0; i < questions.length; i++) {\r\n        const id = questions[i].id\r\n        const dd = cache.data.data\r\n        for (let key in dd) {\r\n          if (dd[key].id === id) console.log(dd[key]);\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  if (pollLoading || !questions) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (pollError) {\r\n    console.log(JSON.stringify(pollError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (limitSaveLoading || saveOrderLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  const handleLimitInput = (inputData) => {\r\n    const id = inputData.id\r\n    const limit = +inputData.limit\r\n    setQuestions(questions.map(question => question.id === id ? { ...question, limit: limit } : question))\r\n    saveLimit({\r\n      variables: {\r\n        id,\r\n        limit\r\n      }\r\n    })\r\n  }\r\n\r\n  const onSortEnd = ({ oldIndex, newIndex }) => {\r\n    setPrevOrder({ ...questions })\r\n    console.log(oldIndex, newIndex);\r\n    if (oldIndex !== newIndex) {\r\n      const newArray = arrayMove(questions, oldIndex, newIndex)\r\n      let deltaArray = []\r\n      const newOrder = newArray.reduce((acum, val, index) => {\r\n        if (val.order === index + 1) {\r\n          acum.push(val)\r\n        } else {\r\n          deltaArray.push({\r\n            id: val.id,\r\n            order: index + 1\r\n          })\r\n          acum.push({ ...val, order: index + 1 })\r\n        }\r\n        return acum\r\n      }, [])\r\n      setQuestions(newOrder)\r\n      saveOrder({\r\n        variables: {\r\n          questions: deltaArray\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n  const SortableItem = SortableElement(({ question }) =>\r\n    <QuestionCard question={question} handleLimitInput={handleLimitInput} />\r\n  );\r\n\r\n  const SortableList = SortableContainer(({ questions }) => {\r\n    return (\r\n      <Grid container item xs={12} spacing={2}>\r\n        {questions.map((question, index) => (\r\n          <SortableItem key={`item-${question.id}`} index={index} question={question} />\r\n        ))}\r\n      </Grid>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <SortableList\r\n        questions={questions}\r\n        onSortEnd={onSortEnd}\r\n        axis=\"xy\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ReoderEditor","import React, { Fragment } from 'react'\r\n\r\nimport AdaptiveTabs from '../../components/AdaptiveTabs'\r\n\r\nimport CommonSetting from './containers/Common'\r\nimport ConfigEditor from './containers/ConfigEditor'\r\nimport DeletePoll from './containers/DeletePoll';\r\nimport CititesEditor from './containers/CitiesEditor';\r\nimport ReoderEditor from './containers/ReoderEditor';\r\n\r\nconst PollSettings = ({ id, code }) => {\r\n  const data = [\r\n    {\r\n      label: 'Общие',\r\n      component: <CommonSetting id={id} />\r\n    },\r\n    {\r\n      label: 'Порядок отображения',\r\n      component: <ReoderEditor id={id} />\r\n    },\r\n    {\r\n      label: 'Конфиг',\r\n      component: <ConfigEditor id={id} />\r\n    },\r\n    {\r\n      label: 'Города',\r\n      component: <CititesEditor id={id} />\r\n    },\r\n    {\r\n      label: 'Удаление',\r\n      component: <DeletePoll id={id} code={code} />\r\n    }\r\n  ]\r\n  return (\r\n    <Fragment>\r\n      <AdaptiveTabs data={data} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollSettings","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollSettings from '../modules/PollSettings'\r\n\r\nconst Settings = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Настройки опроса ` + code} />\r\n      <div>\r\n        <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n          <PollSettings id={id} code={code} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Settings","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`vertical-tabpanel-${index}`}\r\n      aria-labelledby={`vertical-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    'aria-controls': `vertical-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    display: 'flex',\r\n  },\r\n  tabs: {\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n  },\r\n}));\r\n\r\nconst PollFiles = ({ id }) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Tabs\r\n        orientation=\"vertical\"\r\n        variant=\"scrollable\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        className={classes.tabs}\r\n      >\r\n        <Tab label=\"Файлы\" {...a11yProps(0)} />\r\n      </Tabs>\r\n      <TabPanel value={value} index={0}>\r\n        Файлы опроса - {id}\r\n        <p>В РАЗРАБОТКЕ</p>\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PollFiles","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollFiles from '../modules/PollFiles'\r\n\r\nconst Attachment = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Файлы ` + code} />\r\n      <div style={{ paddingTop: '10px' }}>\r\n        <Container maxWidth=\"xl\">\r\n          <PollFiles id={id} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Attachment","import React, { Fragment } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst PollWiki = () => {\r\n  return (\r\n    <Fragment>\r\n      <Grid container item>\r\n        WIKI\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollWiki","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollWiki from '../modules/PollWiki'\r\n\r\nconst Wiki = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Wiki ` + code} />\r\n      <Container maxWidth=\"lg\">\r\n        <PollWiki />\r\n      </Container>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Wiki","import { gql } from '@apollo/client'\r\n\r\nexport const GET_CITITES_WITH_CATEGORIES = gql`\r\nquery {\r\n  cities{\r\n    id\r\n    title\r\n    population\r\n    category {\r\n      id\r\n      title\r\n    }\r\n  }\r\n  cityCategories{\r\n    id\r\n    title\r\n  }\r\n}\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const CITY_SAVE_MUTATION = gql`\r\nmutation ($title: String!, $population: Int!, $category: String!) {\r\n  newCity(title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category {\r\n      id\r\n      title\r\n    }\r\n    population\r\n  }\r\n}\r\n`\r\nexport const CITY_EDIT_SAVE = gql`\r\nmutation ($id: String!, $title: String!, $population: Int!, $category: String!) {\r\n  cityEdit(id: $id, title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category {\r\n      id\r\n      title\r\n    }\r\n    population\r\n  }\r\n}\r\n`\r\nexport const DELETE_CITY = gql`\r\nmutation ($id: String!) {\r\n  deleteCity(id: $id) {\r\n    id\r\n    title\r\n    category {\r\n      id\r\n      title\r\n    }\r\n    population\r\n  }\r\n}\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog'\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_CITITES_WITH_CATEGORIES } from './queries'\r\nimport { CITY_SAVE_MUTATION, CITY_EDIT_SAVE, DELETE_CITY } from './mutations'\r\n\r\nconst Cities = () => {\r\n  const [noti, setNoti] = useState(false)\r\n\r\n  const [delId, setDelId] = useState(false)\r\n  const [cityAdd, setCityAdd] = useState(false)\r\n  const {\r\n    data: citiesData,\r\n    loading: citiesLoading,\r\n    error: citiesError\r\n  } = useQuery(GET_CITITES_WITH_CATEGORIES)\r\n\r\n  const [saveCity, { loading: saveCityLoading }] = useMutation(CITY_SAVE_MUTATION, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить новый город не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data: { newCity } }) => cache.writeQuery({\r\n      query: GET_CITITES_WITH_CATEGORIES,\r\n      data: {\r\n        cities: [\r\n          ...citiesData.cities,\r\n          newCity\r\n        ]\r\n      }\r\n    })\r\n  })\r\n\r\n  const [saveCityEdit, { loading: saveCityEditLoading }] = useMutation(CITY_EDIT_SAVE, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Обновить информацию не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data: { cityEdit } }) => cache.writeQuery({\r\n      query: GET_CITITES_WITH_CATEGORIES,\r\n      data: {\r\n        cities: citiesData.cities.map(city => city.id === cityEdit.id ? cityEdit : city)\r\n      }\r\n    })\r\n  })\r\n\r\n  const [\r\n    deleteCity,\r\n    { loading: deleteCityLoading }\r\n  ] = useMutation(DELETE_CITY, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Удалить город не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data: { deleteCity } }) => cache.writeQuery({\r\n      query: GET_CITITES_WITH_CATEGORIES,\r\n      data: {\r\n        cities: citiesData.cities.filter(city => city.id === deleteCity.id ? false : true)\r\n      }\r\n    })\r\n  })\r\n\r\n  const CityCard = ({ city, save, deleteCity }) => {\r\n    const [editting, setEditting] = useState(false)\r\n\r\n    const handleEdit = () => {\r\n      setEditting(true)\r\n    }\r\n\r\n    const handleSave = (data) => {\r\n      save({\r\n        ...data,\r\n        id: city.id\r\n      })\r\n    }\r\n\r\n    const handleCloseEdit = () => {\r\n      setEditting(false)\r\n    }\r\n\r\n    const handleDelete = () => {\r\n      deleteCity(city.id)\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        {!editting ?\r\n          <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n            <Paper className=\"city-card\">\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                {city.title}\r\n              </Typography>\r\n              <Typography variant=\"subtitle2\" gutterBottom>\r\n                {city.category.title}\r\n              </Typography>\r\n              <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n                Население: {city.population}\r\n              </Typography>\r\n              <Grid container item justify=\"space-between\" className=\"card-service-buttons\">\r\n                <IconButton className=\"card-button\" aria-label=\"delete\" onClick={handleDelete}>\r\n                  <DeleteIcon fontSize=\"small\" />\r\n                </IconButton>\r\n                <IconButton className=\"card-button\" aria-label=\"delete\" onClick={handleEdit}>\r\n                  <EditIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n          : <CityAdd city={city} save={handleSave} close={handleCloseEdit} />\r\n        }\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  const CityAdd = ({ save, close, city }) => {\r\n    const [edit, setEdit] = useState(false)\r\n    const [title, setTitle] = useState(city ? city.title : '')\r\n    const [population, setPopulation] = useState(city ? city.population : '')\r\n    const [category, setCategory] = useState(city ? city.category.id : '')\r\n\r\n    const handleSubmit = (e) => {\r\n      e.preventDefault()\r\n      const newCity = {\r\n        title,\r\n        population: +population,\r\n        category\r\n      }\r\n      console.log(newCity);\r\n      save(newCity)\r\n    }\r\n\r\n    const titleHandle = (e) => {\r\n      setEdit(true)\r\n      setTitle(e.currentTarget.value)\r\n    }\r\n    const popHandle = (e) => {\r\n      setEdit(true)\r\n      setPopulation(e.currentTarget.value)\r\n    }\r\n    const catHandle = (e) => {\r\n      setEdit(true)\r\n      setCategory(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n      <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n        <Paper className=\"add-city-card\">\r\n          <IconButton className=\"add-dialog-close\" aria-label=\"delete\" size=\"small\" onClick={close}>\r\n            <CloseIcon fontSize=\"inherit\" />\r\n          </IconButton>\r\n          <form onSubmit={handleSubmit}>\r\n            <TextField\r\n              className=\"add-city-title\"\r\n              required\r\n              defaultValue={city ? city.title : ''}\r\n              helperText=\"Название н.п.\"\r\n              onChange={titleHandle}\r\n            />\r\n            <TextField\r\n              className=\"add-city-population\"\r\n              type=\"number\"\r\n              required\r\n              defaultValue={city ? city.population : ''}\r\n              onChange={popHandle}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              helperText=\"Численность, чел.\"\r\n            />\r\n            <TextField\r\n              select\r\n              required\r\n              onChange={catHandle}\r\n              defaultValue={city ? city.category.id : ''}\r\n              SelectProps={{\r\n                native: true,\r\n              }}\r\n              helperText=\"Категория н.п.\"\r\n            >\r\n              <option key={0} disabled selected value=\"\"></option>\r\n              {citiesData.cityCategories.map((option) => (\r\n                <option key={option.id} value={option.id}>\r\n                  {option.title}\r\n                </option>\r\n              ))}\r\n            </TextField>\r\n            <Button\r\n              className=\"city-dialog-save\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              startIcon={<SaveIcon />}\r\n              type=\"submit\"\r\n              disabled={!edit}\r\n            >\r\n              Save\r\n          </Button>\r\n          </form>\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const handleAdd = () => {\r\n    setCityAdd(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setCityAdd(false)\r\n  }\r\n\r\n  async function handleSaveNew(newData) {\r\n    await saveCity({\r\n      variables: { ...newData }\r\n    })\r\n    setCityAdd(false)\r\n  }\r\n\r\n  async function handleSaveEdit(cityData) {\r\n    await saveCityEdit({\r\n      variables: { ...cityData }\r\n    })\r\n  }\r\n\r\n  async function deleteCityCompletely(id) {\r\n    await deleteCity({\r\n      variables: { id }\r\n    })\r\n  }\r\n\r\n  const handleCityDelete = (id) => {\r\n    setDelId(id)\r\n  }\r\n\r\n  const handleDelConfirm = () => {\r\n    deleteCityCompletely(delId)\r\n    setDelId(false)\r\n  }\r\n\r\n  const handleDelDialogClose = () => {\r\n    setDelId(false)\r\n  }\r\n\r\n  if (citiesLoading) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (citiesError) {\r\n    console.log(JSON.stringify(citiesError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (saveCityLoading || saveCityEditLoading || deleteCityLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n\r\n      <div className=\"cities-service-zone\">\r\n        <Typography className=\"header\">Города проведения опросов</Typography>\r\n        <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={handleAdd}>\r\n          Добавить\r\n        </Button>\r\n      </div>\r\n      <ConfirmDialog\r\n        open={delId}\r\n        confirm={handleDelConfirm}\r\n        close={handleDelDialogClose}\r\n        data={\r\n          {\r\n            title: 'Удалить населенный пункт?',\r\n            text: 'Внимание! Результаты опросов учитывают н.п. в которых они проводились, удаление приведет к потере части статистики и некорректности ее отображения.'\r\n          }\r\n        }\r\n      />\r\n      <Grid container spacing={3} xs={12}>\r\n        {cityAdd &&\r\n          <CityAdd save={handleSaveNew} close={handleClose} />\r\n        }\r\n        {citiesData.cities.map((city, index) => (\r\n          <CityCard city={city} save={handleSaveEdit} deleteCity={handleCityDelete} />\r\n        ))}\r\n      </Grid>\r\n      <p></p>\r\n      <span>Статус</span>\r\n      <Divider />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Cities","import React, { Fragment } from 'react'\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Sample = () => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"sample-service-zone\">\r\n        <Typography className=\"header\">Конструктор выборки</Typography>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Sample","import React from 'react'\r\n\r\nimport AdaptiveTabs from '../../components/AdaptiveTabs'\r\n\r\nimport Cities from './containers/Cities'\r\nimport Sample from './containers/Sample'\r\n\r\nconst PollAppSettings = () => {\r\n  const data = [\r\n    {\r\n      label: 'Города',\r\n      component: <Cities />\r\n    },\r\n    {\r\n      label: 'Выборка',\r\n      component: <Sample />\r\n    },\r\n    {\r\n      label: 'Пол',\r\n      component: 'ПОЛ'\r\n    },\r\n    {\r\n      label: 'Возраст',\r\n      component: 'Возраст'\r\n    },\r\n    {\r\n      label: 'Статус',\r\n      component: 'Статус'\r\n    },\r\n    {\r\n      label: 'ТНП',\r\n      component: 'ТНП'\r\n    }\r\n  ]\r\n  return (\r\n    <AdaptiveTabs data={data} />\r\n  )\r\n}\r\n\r\nexport default PollAppSettings","import React, { Fragment } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollAppSettings from '../modules/PollAppSettings'\r\n\r\nconst PollAppSettingsPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Настройки подсистемы`} />\r\n      <div>\r\n        <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n          <PollAppSettings />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollAppSettingsPage","import React, { Fragment, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nconst UserAddDialog = ({ open, close, saveNewUser, selects }) => {\r\n  const [userData, setUserData] = useState()\r\n\r\n  const save = (e) => {\r\n    e.preventDefault()\r\n    saveNewUser(userData)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={close} aria-labelledby=\"form-dialog-title\">\r\n        <form onSubmit={save}>\r\n          <DialogTitle>Добавление пользователя</DialogTitle>\r\n          <DialogContent>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пользователь\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      username: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: Иванов И.И.\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Логин\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      login: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: IvanovII\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      password: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Не менее восьми символов\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"Повторите пароль\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Статус</InputLabel>\r\n                  <Select\r\n                    required\r\n                    native\r\n                    label=\"Статус\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        status: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userStatus.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите социальный статус</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Права</InputLabel>\r\n                  <Select\r\n                    native\r\n                    label=\"Права\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        rights: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userRights.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите права поьзователя</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <p></p>\r\n          <DialogActions>\r\n            <Button variant=\"contained\" onClick={close}>\r\n              Отмена\r\n          </Button>\r\n            <Button variant=\"contained\" type=\"submit\" color=\"primary\">\r\n              Добавить\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default UserAddDialog","import React, { Fragment, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nconst UserUpdateDialog = ({ data, selects, open, close, updateUser }) => {\r\n  const [userData, setUserData] = useState(false)\r\n\r\n  const save = (e) => {\r\n    e.preventDefault()\r\n    updateUser({\r\n      id: data.id,\r\n      data: userData\r\n    })\r\n    setUserData(false)\r\n    close()\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={close} aria-labelledby=\"form-dialog-title\">\r\n        <form onSubmit={save}>\r\n          <DialogTitle>Обновить данные</DialogTitle>\r\n          <DialogContent>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пользователь\"\r\n                  variant=\"outlined\"\r\n                  defaultValue={data.username}\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      username: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: Иванов И.И.\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Логин\"\r\n                  variant=\"outlined\"\r\n                  defaultValue={data.login}\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      login: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: IvanovII\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Статус</InputLabel>\r\n                  <Select\r\n                    required\r\n                    native\r\n                    defaultValue={data.status ? data.status.id : ''}\r\n                    label=\"Статус\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        status: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userStatus.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите социальный статус</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Права</InputLabel>\r\n                  <Select\r\n                    native\r\n                    defaultValue={data.rights ? data.rights.id : ''}\r\n                    label=\"Права\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        rights: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userRights.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите права поьзователя</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <p></p>\r\n          <DialogActions>\r\n            <Button variant=\"contained\" onClick={close}>\r\n              Отмена\r\n          </Button>\r\n            <Button variant=\"contained\" type=\"submit\" color=\"primary\">\r\n              Обновить\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default UserUpdateDialog","import React, { Fragment, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst PassResetDialog = ({ data, open, close, passReset }) => {\r\n  const [userData, setUserData] = useState(false)\r\n\r\n  const save = (e) => {\r\n    e.preventDefault()\r\n    passReset({\r\n      id: data.id,\r\n      password: userData.password\r\n    })\r\n    setUserData(false)\r\n    close()\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={close} aria-labelledby=\"form-dialog-title\">\r\n        <form onSubmit={save}>\r\n          <DialogTitle>Установка пароля</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              Установите новый пароль пользователя - {data.username}\r\n            </DialogContentText>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      password: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Не менее восьми символов\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"Повторите пароль\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <p></p>\r\n          <DialogActions>\r\n            <Button variant=\"contained\" onClick={close}>\r\n              Отмена\r\n          </Button>\r\n            <Button variant=\"contained\" type=\"submit\" color=\"primary\">\r\n              Сохранить\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PassResetDialog","import React, { Fragment, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Button from '@material-ui/core/Button';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog';\r\nimport UserAddDialog from '../UserAddDialog'\r\nimport UserUpdateDialog from '../UserUpdateDialog'\r\nimport PassResetDialog from '../PassResetDialog'\r\n\r\n// const users = [\r\n//   {\r\n//     id: '1111',\r\n//     username: 'Петров И.В.',\r\n//     login: 'PtrovIV',\r\n//     status: 'военнослужащий',\r\n//     rights: 'Пользователь'\r\n//   },\r\n//   {\r\n//     id: '22222',\r\n//     username: 'Иванов С.В.',\r\n//     login: 'IvanovSV',\r\n//     status: 'военнослужащий',\r\n//     rights: 'Пользователь'\r\n//   },\r\n//   {\r\n//     id: '33333',\r\n//     username: 'Сидорова С.В.',\r\n//     login: 'SidorovaSV',\r\n//     status: 'гражданский служащий',\r\n//     rights: 'Админ'\r\n//   },\r\n// ]\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'username', numeric: false, disablePadding: true, label: 'Пользователь', sort: true },\r\n  { id: 'login', numeric: false, disablePadding: false, label: 'Логин', sort: true },\r\n  { id: 'status', numeric: false, disablePadding: false, label: 'Статус', sort: true },\r\n  { id: 'rights', numeric: false, disablePadding: false, label: 'Права', sort: true },\r\n  { id: '', numeric: true, disablePadding: true, label: 'Action', sort: false }\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n          >{headCell.sort ? (\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n              hideSortIcon={headCell.sort ? false : true}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n\r\n          ) : (<span>{headCell.label}</span>)}\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n      }\r\n      : {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n      },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, deleteDelete, setUserAddOpen } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} выбрано\r\n        </Typography>\r\n      ) : (\r\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n            Пользователи\r\n          </Typography>\r\n        )\r\n      }\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Удалить\">\r\n          <IconButton aria-label=\"delete\" onClick={deleteDelete}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n          <Tooltip title=\"Добавить пользователя\">\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => setUserAddOpen(true)}>\r\n              Добавить\r\n            </Button>\r\n          </Tooltip>\r\n        )\r\n      }\r\n    </Toolbar >\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nconst UsersTable = ({ users, addNewUser, deleteUsers, updateUser, resetPassword, selects }) => {\r\n  const classes = useStyles();\r\n\r\n  const [deleteDialog, setDeleteDialog] = useState(false)\r\n  const [userAddOpen, setUserAddOpen] = useState(false)\r\n  const [userUpdate, setUserUpdate] = useState(false)\r\n  const [passReset, setPassReset] = useState(false)\r\n\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState('calories');\r\n  const [selected, setSelected] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((n) => n.id);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (_, id) => {\r\n    const selectedIndex = selected.indexOf(id);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleRowEdit = (_, row) => {\r\n    setUserUpdate(row)\r\n  }\r\n\r\n  const handlePassReset = (_, row) => {\r\n    setPassReset(row)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const handleDelConfirm = () => {\r\n    deleteUsers(selected)\r\n    setDeleteDialog(false)\r\n    setSelected([])\r\n  }\r\n\r\n  const saveNewUser = (data) => {\r\n    // TODO: \"Нужна заставка ожидания\"\r\n    addNewUser(data)\r\n    setUserAddOpen(false)\r\n  }\r\n\r\n  const hanleUserUpdate = ({ id, data }) => {\r\n    updateUser({\r\n      id,\r\n      data\r\n    })\r\n  }\r\n\r\n  const handlePasswordReset = ({ id, password }) => {\r\n    resetPassword({\r\n      id, password\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <UserAddDialog open={userAddOpen} selects={selects} close={() => setUserAddOpen(false)} saveNewUser={saveNewUser} />\r\n      <UserUpdateDialog data={userUpdate} selects={selects} open={userUpdate} close={() => setUserUpdate(false)} updateUser={hanleUserUpdate} />\r\n      <PassResetDialog data={passReset} open={passReset} close={() => setPassReset(false)} passReset={handlePasswordReset} />\r\n      <ConfirmDialog\r\n        open={deleteDialog}\r\n        confirm={handleDelConfirm}\r\n        close={() => setDeleteDialog(false)}\r\n        data={\r\n          {\r\n            title: 'Удалить пользователей(я)?',\r\n            text: 'Внимание! Это операция не может быть отменена. Часть данных приложения привязаны к учетной записи, будьте внимательны.'\r\n          }\r\n        }\r\n      />\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar numSelected={selected.length} deleteDelete={setDeleteDialog} setUserAddOpen={setUserAddOpen} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={users.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(users, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.id);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          onClick={(event) => handleClick(event, row.id)}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell align=\"center\" component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row.username}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.login}</TableCell>\r\n                      <TableCell align=\"center\">{row.status ? row.status.title : '-'}</TableCell>\r\n                      <TableCell align=\"center\">{row.rights ? row.rights.title : '-'}</TableCell>\r\n                      <TableCell align=\"center\" padding=\"none\">\r\n                        <Tooltip title=\"Обновить\">\r\n                          <IconButton\r\n                            onClick={(event) => handleRowEdit(event, row)}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Сбросить пароль\">\r\n                          <IconButton\r\n                            onClick={(event) => handlePassReset(event, row)}\r\n                          >\r\n                            <LockOpenIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={users.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          labelRowsPerPage=\"Строк:\"\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default UsersTable","import { gql } from '@apollo/client'\r\n\r\nexport const GET_ALL_USERS = gql`\r\n  query {\r\n    users {\r\n      id\r\n      username\r\n      login\r\n      status {\r\n        id\r\n        title\r\n      }\r\n      rights {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_AUTH_SELECTS = gql`\r\n  query {\r\n    userRights {\r\n      id\r\n      title\r\n    }\r\n    userStatus {\r\n      id\r\n      title\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const ADD_NEW_USER = gql`\r\n  mutation($user: UserDataCreate!) {\r\n    addNewUser(user: $user) {\r\n      id\r\n      username\r\n      login\r\n      status {\r\n        id\r\n        title\r\n      }\r\n      rights {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const UPDATE_USER = gql`\r\n  mutation($id: String, $data: UserDataUpdate) {\r\n    updateUser(id: $id, data: $data) {\r\n      id\r\n      username\r\n      login\r\n      status {\r\n        id\r\n        title\r\n      }\r\n      rights {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const DELETE_USERS = gql`\r\n  mutation($users: [String]) {\r\n    deleteUsers(users: $users) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const RESET_PASSWORD = gql`\r\n  mutation($id: String, $password: String) {\r\n    resetPassword(id: $id, password: $password)\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport UsersTable from './components/UsersTable'\r\n\r\nimport LoadingState from '../../components/LoadingState'\r\nimport ErrorState from '../../components/ErrorState'\r\nimport SystemNoti from '../../components/SystemNoti'\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_USERS, GET_AUTH_SELECTS } from './queries'\r\nimport { ADD_NEW_USER, UPDATE_USER, DELETE_USERS, RESET_PASSWORD } from './mutations'\r\n\r\nconst Users = () => {\r\n  const [noti, setNoti] = useState(false)\r\n  const {\r\n    loading: dataLoading,\r\n    error: dataError,\r\n    data\r\n  } = useQuery(GET_ALL_USERS)\r\n  const {\r\n    loading: selectsLoading,\r\n    error: selectsError,\r\n    data: selects\r\n  } = useQuery(GET_AUTH_SELECTS)\r\n\r\n  const [deleteUsers, { loading: deleteLoading }] = useMutation(DELETE_USERS,\r\n    {\r\n      onError: (e) => {\r\n        setNoti({\r\n          type: 'error',\r\n          text: 'Удалить не удалось. Смотрите консоль.'\r\n        })\r\n        console.log(e);\r\n      },\r\n      update: (cache, { data: { deleteUsers } }) => cache.writeQuery({\r\n        query: GET_ALL_USERS,\r\n        data: {\r\n          users: data.users.filter(user => {\r\n            for (let i = 0; i < deleteUsers.length; i++) {\r\n              if (deleteUsers[i].id === user.id) return false\r\n            }\r\n            return true\r\n          })\r\n        }\r\n      })\r\n    }\r\n  )\r\n  const [addUser, { loading: addLoading }] = useMutation(ADD_NEW_USER,\r\n    {\r\n      onError: (e) => {\r\n        setNoti({\r\n          type: 'error',\r\n          text: 'Добавить не удалось. Смотрите консоль.'\r\n        })\r\n        console.log(e);\r\n      },\r\n      update: (cache, { data: { addNewUser } }) => cache.writeQuery({\r\n        query: GET_ALL_USERS,\r\n        data: {\r\n          users: [\r\n            ...data.users,\r\n            addNewUser\r\n          ]\r\n        }\r\n      })\r\n    }\r\n  )\r\n\r\n  const [updateUser, { loading: updateLoading }] = useMutation(UPDATE_USER,\r\n    {\r\n      onError: (e) => {\r\n        setNoti({\r\n          type: 'error',\r\n          text: 'Обновить не удалось. Смотрите консоль.'\r\n        })\r\n        console.log(e);\r\n      },\r\n      update: (cache, { data: { updateUser } }) => cache.writeQuery({\r\n        query: GET_ALL_USERS,\r\n        data: {\r\n          users: data.users.map(user => user.id === updateUser.id ? updateUser : user)\r\n        }\r\n      })\r\n    }\r\n  )\r\n  const [resetPassword] = useMutation(RESET_PASSWORD)\r\n\r\n  if (dataLoading || selectsLoading) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (dataError || selectsError) {\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const addNewUser = (data) => {\r\n    addUser({\r\n      variables: {\r\n        user: data\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleUsersDelete = (data) => {\r\n    deleteUsers({\r\n      variables: {\r\n        users: data\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleUserUpdate = ({ id, data }) => {\r\n    updateUser({\r\n      variables: {\r\n        id,\r\n        data\r\n      }\r\n    })\r\n  }\r\n\r\n  const resetPass = ({ id, password }) => {\r\n    resetPassword({\r\n      variables: {\r\n        id,\r\n        password\r\n      }\r\n    })\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (deleteLoading) return <LoadingStatus />\r\n    if (addLoading) return <LoadingStatus />\r\n    if (updateLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n\r\n      <UsersTable\r\n        users={data.users}\r\n        selects={selects}\r\n        addNewUser={addNewUser}\r\n        deleteUsers={handleUsersDelete}\r\n        updateUser={handleUserUpdate}\r\n        resetPassword={resetPass}\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Users","import React, { Fragment } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport Users from '../modules/Users'\r\n\r\nconst UsersPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Пользователи системы`} />\r\n      <div style={{ paddingTop: '10px' }}>\r\n        <Container maxWidth=\"lg\">\r\n          <Users />\r\n        </Container>\r\n      </div>\r\n    </Fragment >\r\n  )\r\n}\r\n\r\nexport default UsersPage","import React, { Fragment } from 'react';\r\nimport ErrorState from '../components/ErrorState'\r\n\r\n\r\n// import { ReactComponent as ErrorIllustration } from \"../../illustrations/error.svg\";\r\n\r\n\r\nconst NotFoundPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <ErrorState\r\n        title=\"404 Страница не найдена\"\r\n        description=\"Вы заблудились. Проверьте адрес\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default NotFoundPage;","import React from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\n\r\nimport {\r\n  HomePage,\r\n  DrivePage,\r\n  ResultsPage,\r\n  AnalyzePage,\r\n  SettingsPage,\r\n  TesterPage,\r\n  AttachmentPage,\r\n  WikiPage,\r\n  PollAppSettingsPage,\r\n  UsersPage,\r\n  NotFoundPage\r\n} from '../../pages'\r\n\r\nconst Router = () => {\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path={\"/\"} exact component={HomePage} />\r\n        <Route path={\"/settings/users\"} exact component={UsersPage} />\r\n        <Route path={\"/results/:id/:code\"} component={ResultsPage} />\r\n        <Route path={\"/poll-settings/:id/:code\"} component={SettingsPage} />\r\n        <Route path={\"/drive/:id/:code\"} component={DrivePage} />\r\n        <Route path={\"/analyze\"} component={AnalyzePage} />\r\n        <Route path={\"/attachment/:id/:code\"} component={AttachmentPage} />\r\n        <Route path={\"/poll-wiki/:id/:code\"} component={WikiPage} />\r\n        <Route path={\"/poll-app-settings\"} component={PollAppSettingsPage} />\r\n        <Route path={\"/tester\"} component={TesterPage} />\r\n        <Route component={NotFoundPage} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default Router","import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      {'РИАЦi51' + ' '}\r\n      {new Date().getFullYear()}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  forget: {\r\n    cursor: 'pointer'\r\n  }\r\n}));\r\n\r\nconst SignIn = ({ onLogin, userError, passwordError }) => {\r\n  const [login, setlogin] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const classes = useStyles();\r\n\r\n  const handleName = (e) => {\r\n    setlogin(e.target.value)\r\n  }\r\n\r\n  const handlePassword = (e) => {\r\n    setPassword(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (login || password)\r\n      onLogin({\r\n        login,\r\n        password\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Войдите в систему\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            error={!!userError}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"login\"\r\n            label=\"Логин\"\r\n            name=\"login\"\r\n            autoComplete=\"login\"\r\n            autoFocus\r\n            onChange={handleName}\r\n            helperText={userError}\r\n\r\n          />\r\n          <TextField\r\n            error={passwordError}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Пароль\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            onChange={handlePassword}\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n            label=\"Запомнить меня\"\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={handleSubmit}\r\n          >\r\n            Войти\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <Box >\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\nexport default SignIn","import { gql } from '@apollo/client';\r\n\r\nexport const SIGNIN_MUTATION = gql`\r\n  mutation signin(\r\n    $login: String!,\r\n    $password: String!\r\n  ) {\r\n    signin(\r\n      login: $login,\r\n      password: $password\r\n    ) {\r\n      user {\r\n        id\r\n        login\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SIGNUP_MUTATION = gql`\r\n  mutation signup(\r\n    $login: String!,\r\n    $password: String!\r\n  ) {\r\n    signup(\r\n      login: $login,\r\n      password: $password\r\n    ) {\r\n      user {\r\n        id\r\n        login\r\n      }\r\n    }\r\n  }\r\n\r\n`","import React, { Fragment, useState } from 'react';\r\n\r\nimport './App.scss';\r\nimport Router from '../Router'\r\n\r\nimport SignInForm from '../../components/SignInForm'\r\n\r\nimport ErrorState from '../../components/ErrorState'\r\nimport LoadingSate from '../../components/LoadingState'\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\n\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { CURRENT_USER_QUERY } from './queries';\r\nimport { SIGNIN_MUTATION } from './mutations';\r\n\r\n\r\nconst App = () => {\r\n  const { loading, error, data } = useQuery(CURRENT_USER_QUERY);\r\n  const [passwordError, setPasswordError] = useState(null)\r\n  const [userError, setUserError] = useState(null)\r\n\r\n  const [signin, { loading: signinLoading }] = useMutation(\r\n    SIGNIN_MUTATION,\r\n    {\r\n      onError: (e) => {\r\n        setUserError('Неправильный логин или пароль')\r\n        setPasswordError(true)\r\n      },\r\n      update: (cache, { data: { signin } }) => cache.writeQuery({\r\n        query: CURRENT_USER_QUERY,\r\n        data: { currentUser: signin.user },\r\n      }),\r\n    }\r\n  )\r\n\r\n  if (loading) return <LoadingSate />\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-пошло не так\"\r\n        description=\"Приложение не хочет стартовать, смотрите консоль!\"\r\n      />\r\n    )\r\n  };\r\n\r\n  const handleLogin = (data) => {\r\n    signin({ variables: data })\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (signinLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n\r\n  if (!!data.currentUser) {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"App\">\r\n          <Loading />\r\n          <Router />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n  return <div>\r\n    <Loading />\r\n    <SignInForm onLogin={handleLogin} userError={userError} passwordError={passwordError} />\r\n  </div>\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport { mainUrl } from './mainconfig'\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { cache } from './cache'\r\n\r\nimport App from './containers/App/App';\r\n\r\n// const cache = new InMemoryCache()\r\n\r\nconst client = new ApolloClient({\r\n  uri: mainUrl + '/graphql',\r\n  cache,\r\n  credentials: 'include',\r\n  connectToDevTools: true\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}