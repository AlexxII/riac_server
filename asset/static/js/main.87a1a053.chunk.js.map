{"version":3,"sources":["mainconfig.js","serviceWorker.js","cache.js","containers/UserProfile/mutations.js","containers/App/queries.js","containers/UserProfile/index.js","components/ServiceMenu/ServiceMenu.js","components/HomeBar/HomeBar.js","modules/PollHome/components/PollAvatar/PollAvatar.js","modules/PollHome/lib/constants.js","modules/PollHome/components/PollCard/PollCard.js","modules/PollHome/components/ListOfPolls/ListOfPolls.js","modules/PollHome/lib/utils.js","modules/PollHome/components/XmlInput/index.js","modules/PollHome/components/AddPollDialog/AddPollDialog.js","components/SpeedDealFab/SpeedDealFab.js","modules/PollHome/components/AddPollLogic/AddPollLogic.js","components/LoadingState/LoadingState.js","components/LoadingStatus/LoadingStatus.js","components/SystemNoti/SystemNoti.js","components/ErrorState/ErrorState.js","modules/PollHome/queries.js","modules/PollHome/mutations.js","modules/PollHome/PollHome.js","pages/HomePage.js","components/SettingBar/index.js","modules/PollArchive/PollArchive.js","pages/PollArchive.js","modules/PollDrive/components/FreeAnswer/index.js","modules/PollDrive/components/Answer/index.js","modules/PollDrive/components/MultipleAnswers/index.js","modules/PollDrive/components/Question/index.js","modules/PollDrive/components/FinishDialog/index.js","components/ConfirmDialog/ConfirmDialog.js","modules/PollDrive/lib/keycodes.js","modules/PollDrive/lib/defineSelectedAnswer.js","modules/PollDrive/lib/questionFormation.js","modules/PollDrive/lib/beep.js","modules/PollDrive/components/DriveLogic/DriveLogic.js","components/DialogWithSelect/index.js","modules/PollDrive/queries.js","modules/PollResults/containers/OverallResults/queries.js","modules/PollDrive/mutaions.js","modules/PollDrive/lib/utils.js","modules/PollDrive/PollDrive.js","pages/DrivePage.js","components/AdaptiveTabs/AdaptiveTabs.js","modules/PollResults/containers/Generation/queries.js","modules/PollResults/containers/Generation/index.js","modules/PollResults/components/RespondentCard/index.js","modules/PollResults/components/DataGrid/DataGrid.js","modules/PollResults/components/Filters/Filters.js","modules/PollResults/components/AnswersCard/AnswerCard.js","modules/PollResults/components/QuestionCard/QuestionCard.js","modules/PollResults/components/BatchUpdate/BatchUpdate.js","modules/PollResults/components/BarChart/BarChart.js","modules/PollResults/components/LinearTable/LinearTable.js","modules/PollResults/components/BatchCharts/BatchCharts.js","modules/PollResults/containers/OverallResults/mutations.js","modules/PollResults/containers/OverallResults/OverallResults.js","modules/PollResults/containers/LinearDistribution/queries.js","modules/PollResults/containers/LinearDistribution/LinearDistribution.js","modules/PollResults/containers/BatchInput/queries.js","modules/PollResults/containers/BatchInput/BatchInput.js","modules/PollResults/PollResults.js","pages/ResultsPage.js","modules/DataAnalyzer/lib/xmlparser.js","modules/DataAnalyzer/components/ParchaXmlAnalyzer/index.js","modules/DataAnalyzer/DataAnalyzer.js","pages/AnalyzePage.js","pages/TesterPage.js","modules/PollSettings/containers/Common/queries.js","modules/PollSettings/containers/Common/Common.js","modules/PollSettings/containers/ConfigEditor/queries.js","modules/PollSettings/containers/ConfigEditor/mutations.js","modules/PollSettings/containers/ConfigEditor/ConfigEditor.js","modules/PollSettings/containers/DeletePoll/mutations.js","modules/PollSettings/containers/DeletePoll/DeletePoll.js","modules/PollSettings/containers/CitiesEditor/queries.js","modules/PollSettings/containers/CitiesEditor/mutations.js","modules/PollSettings/containers/CitiesEditor/CitiesEditor.js","modules/PollSettings/components/QuestionCard/index.js","modules/PollSettings/containers/ReoderEditor/queries.js","modules/PollSettings/containers/ReoderEditor/mutations.js","modules/PollSettings/containers/ReoderEditor/ReoderEditor.js","modules/PollSettings/PollSettings.js","pages/SettingsPage.js","modules/PollFiles/index.js","pages/AttachmentPage.js","modules/PollWiki/index.js","pages/WikiPage.js","modules/PollAppSettings/containers/Cities/queries.js","modules/PollAppSettings/containers/Cities/mutations.js","modules/PollAppSettings/containers/Cities/Cities.js","modules/PollAppSettings/containers/Sample/Sample.js","modules/PollAppSettings/PollAppSettings.js","pages/PollAppSettingsPage.js","modules/Users/components/UserAddDialog/UserAddDialog.js","modules/Users/components/UserUpdateDialog/UserUpdateDialog.js","modules/Users/components/PassResetDialog/PassResetDialog.js","modules/Users/components/UsersTable/UsersTable.js","modules/Users/queries.js","modules/Users/mutations.js","modules/Users/Users.js","pages/UsersPage.js","pages/NotFoundPage.js","containers/Router/index.js","components/SignInForm/index.js","containers/App/mutations.js","containers/App/App.js","index.js"],"names":["mainUrl","Boolean","window","location","hostname","match","cache","InMemoryCache","typePolicies","Poll","fields","question","read","LOGOUT_MUTATION","gql","CURRENT_USER_QUERY","UserProfile","close","currentUser","useApolloClient","readQuery","query","useState","anchorEl","setAnchorEl","isMenuOpen","useMutation","update","writeQuery","data","logout","handleMenuClose","renderMenu","Menu","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","MenuItem","onClick","IconButton","edge","aria-label","aria-controls","aria-haspopup","e","currentTarget","color","Badge","badgeContent","Tooltip","title","username","useStyles","makeStyles","list","width","fullList","ServiceMenu","classes","Drawer","anchor","className","clsx","role","onKeyDown","List","Typography","variant","style","fontSize","to","ListItem","button","key","ListItemIcon","ListItemText","primary","Divider","theme","grow","flexGrow","menuButton","marginRight","spacing","display","breakpoints","up","inputRoot","sectionDesktop","sectionMobile","link","textDecoration","HomeBar","React","appAnchorEl","setAppAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","menuOpen","setMenuOpen","isMobileMenuOpen","isAppMenuOpen","handleAppsMenuOpen","event","handleMobileMenuClose","handleAppMenuClose","renderAppsMenu","renderMobileMenu","AppBar","position","Toolbar","noWrap","StyledBadge","withStyles","badge","backgroundColor","boxShadow","palette","background","paper","top","left","height","borderRadius","animation","border","content","transform","opacity","root","avatar","ActiveAvatar","active","overlap","Avatar","liter","pollWays","pollTypes","maxWidth","margin","header","padding","flex","PollCard","Results","code","Drive","Settings","Card","CardHeader","PollAvatar","action","subheader","startDate","endDate","CardContent","Grid","container","item","xs","sm","gutterBottom","way","sample","CardActions","disableSpacing","justify","cities","length","ListOfPolls","polls","map","poll","i","xmlparser","xmlString","xml","parser","DOMParser","parsererrorNS","parseFromString","getElementsByTagName","namespaceURI","doc","getElementsByTagNameNS","testXml","element","getAttribute","start","end","structure","backdrop","zIndex","drawer","XmlImport","field","props","errorMessage","setFieldValue","touched","name","onBlur","value","onChange","processing","setProcessing","undefined","count","fileUpload","useRef","Fragment","Backdrop","CircularProgress","type","preventDefault","reader","FileReader","file","target","files","onloadend","xmlText","result","console","log","regEx","replace","readAsText","Button","startIcon","current","click","TextInputComponent","label","TextField","fullWidth","error","helperText","InputLabelProps","shrink","SelectInputComponent","array","select","option","AddPollDialog","closeHndl","saveHndl","SUPPORTED_FORMATS","validationSchema","yup","shape","required","startdate","enddate","matches","min","ensure","xmlfile","test","size","includes","Dialog","disableBackdropClick","disableEscapeKeyDown","aria-labelledby","aria-describedby","DialogTitle","DialogContent","initialValues","comment","validateOnBlur","onSubmit","values","setSubmitting","errors","isSubmitting","dirty","handleSubmit","handleReset","handleChange","handleBlur","component","XmlInput","DialogActions","disabled","speedDial","bottom","right","SpeedDialFab","actions","setOpen","handleClose","SpeedDial","ariaLabel","icon","SpeedDialIcon","onMouseLeave","onOpen","SpeedDialAction","tooltipTitle","AddPollLogic","addPoll","history","useHistory","openDialog","setOpenDialog","xmlParse","questions","logic","topic","Promise","resolve","reject","questionsLen","questionData","limit","order","answers","questionAnswers","answersLen","answerData","padStart","defaultLogic","logicLen","logicData","restrict","topics","topicsLen","topicData","basicLogicFormation","basicLogic","reduce","acum","val","exclude","unique","extLogic","filter","obj","difficult","freeAnswers","push","xmlFile","then","basicData","pollInfo","variables","newPoll","shortTitle","poolOfQuestions","LoadingState","imageWidth","imageHeight","Box","textAlign","image","clone","mb","description","defaultProps","LoadingStatus","SystemNoti","Alert","elevation","Snackbar","autoHideDuration","duration","severity","text","popover","pointerEvents","ErrorState","handlePopoverOpen","handlePopoverClose","PopOver","Popover","disableRestoreFocus","poper","onMouseEnter","DefaultPoper","GET_ALL_ACTIVE_POLLS","ADD_NEW_POLL","PollHome","noti","setNoti","useQuery","pollsLoading","loading","pollsError","pollsData","onError","addLoading","Loading","Container","HomePage","arrow","SettingBar","PollArchive","FreeAnswer","answer","focusHandler","blurHandler","textInput","useEffect","focus","freeAnswerText","showFreeAnswer","ref","data-code","data-keycode","keyCode","placeholder","onKeyUp","blur","onFocus","Answer","clickHandler","settings","answerRef","answerCls","answerTitle","selected","join","showIndex","codesShow","freeAnswer","excludeM","marginTop","errorText","Tags","multipleHandler","setAnswers","codes","setCodes","state","setError","defVal","codesOfAnswers","Autocomplete","multiple","options","reason","getOptionLabel","getOptionDisabled","renderOption","renderTags","getTagProps","index","Chip","renderInput","params","Question","mega","FinishDialog","finishAll","confirm","DialogContentText","autoFocus","ConfirmDialog","buttons","serviceBtns","resetBtn","confirmBtns","castCodes","97","98","99","100","101","102","103","104","105","answersCodes","keycodes","cast","defineSelectedAnswer","checkAnswerSelected","do","trueCode","checkServiceBtn","checkResetBtn","checkConfirmBtn","questionFormation","setResults","keyCodesPool","codesPool","visibleAnswers","invisible","criticalExclude","uniqueIn","selectedIn","uniqueSelected","newAnswers","suffix","pool","answerCode","qSuffix","megaMltp","prevState","next","mAnswers","beep","config","audioCtx","AudioContext","webkitAudioContext","Object","assign","volume","frequency","oscillator","createOscillator","gainNode","createGain","connect","destination","gain","setTimeout","stop","PollDrive","logics","setCurrentQuestion","saveAndGoBack","saveWorksheet","questionsLimit","setQuestion","userSettings","setUserSettings","earlyСompletion","setEarlyСompletion","direction","setDirection","setCount","results","finish","setFinish","finishDialog","setFinishDialog","inlineMessage","setInlineMessage","keyUpHandler","nodeName","nextStep","mainLogic","confirmResults","resetAnswers","finishRespondent","goToNext","goToPrevious","document","addEventListener","removeEventListener","newQuestion","checkRespondentFinish","newResults","resPool","eCode","savedCodes","excludePool","selectedAnswer","el","answerId","nonCriticalExclude","newResultState","InlineInformer","when","message","alignItems","md","FormControlLabel","control","Checkbox","defaultChecked","labelPlacement","Hidden","only","mdUp","dataset","selectedCode","selectedKeyCode","keycode","resultsPool","clearPool","DialogWithSelect","save","setState","Select","native","selectedIndex","innerHTML","GET_POLL_DATA","GET_FILTER_SELECTS","GET_POLL_RESULTS","SAVE_NEW_RESULT","parseIni","area","regex","section","param","lines","split","forEach","line","parseParams","property","concatLogic","temp","trimData","srange","output","exec","range","concat","rangeToArray","normalizeLogic","normalizedLogic","critical","invisiblePool","client","show","setPoll","poolOfCities","setPoolOfCities","openCityDialog","setOpenCityDialog","setPollLogic","currentCity","setCurrentCity","currentQuestion","onCompleted","_","__","handleConfigFile","path","filePath","fetch","r","normLogic","refetchQueries","saveResult","saveLoading","newOrderQuestion","slice","sort","a","b","visibleQuestions","lAnswers","JSON","stringify","prepareResultData","city","DriveLogic","user","res","DrivePage","useParams","TabPanel","children","p","other","hidden","allProps","tabs","minWidth","borderRight","divider","overflow","Vertical","Tabs","orientation","scrollButtons","Tab","Horizontal","AdaptiveTabs","setValue","newValue","xsDown","smUp","Generation","setQuestions","setLogic","questionsCount","answersCount","modQuestions","worksheetsCount","RespondentCard","edit","Paper","processed","checked","inputProps","created","lastModified","DataGrid","selectPool","setSelectPool","lastSelectedIndex","setLastSelectedIndex","showDetails","datails","handleEdit","handleSelect","inData","nativeEvent","shiftKey","rr","ctrlKey","n","lg","Filters","filters","setActiveFilters","age","category","intervs","intervievers","interv","sex","status","avaiableFilters","newFilter","setNewFilters","updated","setUpdated","checkedIcon","shownDate","RegExp","date","InputProps","startAdornment","InputAdornment","cursor","limitTags","disableCloseOnSelect","clearOnEscape","ages","noOptionsText","groupBy","ct","ServiceIcons","AnswerCard","totalAnswers","setChecked","CountR","len","respondent","toFixed","m","QuestionCard","totalResults","j","BatchUpdate","useTheme","fullScreen","useMediaQuery","down","BarChart","labels","set","chartRef","myChartRef","getContext","Chart","datasets","showLines","hover","animationDuration","responsiveAnimationDuration","legend","fontColor","scales","yAxes","ticks","beginAtZero","LinearTable","curr","appBar","marginLeft","Transition","forwardRef","Slide","BatchCharts","selectedData","setSelectedData","newQuestions","newAnswer","dd","TransitionComponent","DELETE_RESULTS","OverallResults","delOpen","setDelOpen","activeResults","setActiveResults","activeFilters","batchOpen","setBatchOpen","batchGrOpen","setBatchGrOpen","pollResults","pollResultsLoading","pollResultsError","filtersResults","filtersResultsLoading","filtersResultsError","deletedPool","deleteResults","del","modify","existingRefs","readField","respRef","deleteResult","loadOnDelete","newResult","newSelectPool","selectId","downloadIt","createElement","Blob","href","URL","createObjectURL","download","body","appendChild","regExp","lResults","allResults","details","replaceAll","rLength","tempResult","counter","GET_POLL_WITH_RESULTS","LinearDistribution","BatchInput","dataPool","setDataPool","displayData","setDisplayData","pollData","resultPoolLength","newQuestionsPool","newAnswersPool","pollDataLoading","pollDataError","onInput","oprArray","arr","aLength","splitedCodesArrays","tempAr","tempLength","normTemp","atomData","trim","PollResults","outData","resultData","unit","lan","lon","lQuestions","answersPool","ParchaXmlAnalyzer","parchaData","setParchaData","UnitInfo","toString","DataAnalyzer","Analyze","paddingTop","TesterPage","QuestionTopic","CommonSetting","ready","setReady","handleConfigFileAndUpdateCache","updatedQuestions","modulateQuestionsWithLogic","ffffuck","logicQuery","saveConfigChanges","ConfigEditor","setConfig","setFilePath","textRef","pollLogic","saveConfig","configSaveLoading","defaultValue","DELETE_POLL","DeletePoll","incorrect","setIncorrect","delPoll","toUpperCase","handlePollDel","GET_ALL_CITIES_AND_ACTIVE","DELETE_CITY_FROM_ACTIVE","SET_ACTIVE_CITIES","CitiesEditor","clear","setClear","delId","setDelId","allCities","setAllCitites","availableCities","setAvailableCities","setSelected","pollCities","citiesData","citiesLoading","cititesError","setPollCity","setCityActive","cityActivationLoading","deleteCityFromActive","aCitites","deleteCity","deleteCityLoading","handleCityDelete","deleteCityCompletely","CityCard","xl","population","selectedCities","handleLimitInput","setVal","currentValue","substring","pollQuery","saveNewLimit","saveNewOrder","ReoderEditor","setPrevOrder","pollLoading","pollError","saveLimit","limitSaveLoading","newOrder","saveOrder","saveOrderLoading","inputData","SortableItem","SortableElement","SortableList","SortableContainer","onSortEnd","oldIndex","newIndex","newArray","arrayMove","deltaArray","axis","PollSettings","Common","PollFiles","Attachment","PollWiki","Wiki","GET_CITITES_WITH_CATEGORIES","CITY_SAVE_MUTATION","CITY_EDIT_SAVE","DELETE_CITY","Cities","cityAdd","setCityAdd","citiesError","newCity","saveCity","saveCityLoading","cityEdit","saveCityEdit","saveCityEditLoading","editting","setEditting","CityAdd","setEdit","setTitle","setPopulation","setCategory","SelectProps","cityCategories","newData","handleSaveEdit","cityData","Sample","PollAppSettings","PollAppSettingsPage","UserAddDialog","saveNewUser","selects","userData","setUserData","login","password","FormControl","InputLabel","htmlFor","userStatus","FormHelperText","rights","userRights","UserUpdateDialog","updateUser","PassResetDialog","passReset","descendingComparator","orderBy","headCells","numeric","disablePadding","EnhancedTableHead","onSelectAllClick","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","indeterminate","headCell","align","TableSortLabel","hideSortIcon","visuallyHidden","useToolbarStyles","paddingLeft","paddingRight","highlight","secondary","main","lighten","light","dark","EnhancedTableToolbar","deleteDelete","setUserAddOpen","marginBottom","table","clip","UsersTable","users","addNewUser","deleteUsers","resetPassword","deleteDialog","setDeleteDialog","userAddOpen","userUpdate","setUserUpdate","setPassReset","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","TableContainer","Table","newSelecteds","TableBody","comparator","stabilizedThis","stableSort","getComparator","row","isItemSelected","indexOf","labelId","aria-checked","tabIndex","newSelected","handleClick","scope","handleRowEdit","handlePassReset","TablePagination","rowsPerPageOptions","labelRowsPerPage","onChangePage","newPage","onChangeRowsPerPage","parseInt","GET_ALL_USERS","GET_AUTH_SELECTS","ADD_NEW_USER","UPDATE_USER","DELETE_USERS","RESET_PASSWORD","Users","dataLoading","dataError","selectsLoading","selectsError","deleteLoading","addUser","updateLoading","UsersPage","NotFoundPage","Router","exact","ResultsPage","SettingsPage","AnalyzePage","AttachmentPage","WikiPage","Copyright","Date","getFullYear","flexDirection","form","submit","forget","SignIn","onLogin","userError","passwordError","setlogin","setPassword","CssBaseline","noValidate","autoComplete","SIGNIN_MUTATION","App","setPasswordError","setUserError","signin","signinLoading","SignInForm","ApolloClient","uri","credentials","connectToDevTools","ReactDOM","render","StrictMode","ApolloProvider","getElementById","navigator","serviceWorker","registration","unregister","catch"],"mappings":"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","file":"static/js/main.87a1a053.chunk.js","sourcesContent":["// export const mainUrl = 'http://localhost:4000'\r\n// export const mainUrl = 'http://182.11.57.111:4000'\r\nexport const mainUrl = 'http://192.168.31.82:4000'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { InMemoryCache } from '@apollo/client'\r\n\r\nexport const cache = new InMemoryCache({\r\n  typePolicies: {\r\n    Poll: {\r\n      fields: {\r\n        question: {\r\n          read(question) {\r\n            return question\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n})","import { gql } from '@apollo/client';\r\n\r\nexport const LOGOUT_MUTATION = gql`\r\n  mutation Logout {\r\n    logout\r\n  }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const CURRENT_USER_QUERY = gql`\r\n  query {\r\n    currentUser {\r\n      id\r\n      username\r\n    }\r\n  }\r\n`;","import React, { Fragment, useState } from 'react'\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport { gql, useApolloClient } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { LOGOUT_MUTATION } from './mutations'\r\nimport { CURRENT_USER_QUERY } from '../../containers/App/queries'\r\n\r\nconst UserProfile = ({ close }) => {\r\n  const client = useApolloClient();\r\n  const { currentUser } = client.readQuery({\r\n    query: gql`\r\n    query {\r\n      currentUser {\r\n        id\r\n        username\r\n      }\r\n    }\r\n    `,\r\n  })\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const [logout] = useMutation(\r\n    LOGOUT_MUTATION,\r\n    {\r\n      update: (cache) => cache.writeQuery({\r\n        query: CURRENT_USER_QUERY,\r\n        data: { currentUser: null },\r\n      }),\r\n    },\r\n  );\r\n  const menuId = 'account-menu';\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const handleProfileExit = () => {\r\n    logout()\r\n    handleMenuClose()\r\n  }\r\n  const handleProfileMenuOpen = (e) => {\r\n    setAnchorEl(e.currentTarget)\r\n  }\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      {/* <MenuItem onClick={handleMenuClose}>Профиль</MenuItem> */}\r\n      <MenuItem onClick={handleProfileExit}>Выход</MenuItem>\r\n    </Menu>\r\n  );\r\n  return (\r\n    <Fragment>\r\n      <IconButton\r\n        edge=\"end\"\r\n        aria-label=\"account of current user\"\r\n        aria-controls={menuId}\r\n        aria-haspopup=\"true\"\r\n        onClick={handleProfileMenuOpen}\r\n        color=\"inherit\"\r\n      >\r\n        <Badge badgeContent={0} color=\"secondary\">\r\n          <Tooltip\r\n            title={currentUser.username}\r\n          >\r\n            <AccountCircle />\r\n          </Tooltip>\r\n        </Badge>\r\n      </IconButton>\r\n      { renderMenu}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default UserProfile","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport PieChartIcon from '@material-ui/icons/PieChart';\r\n\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n});\r\n\r\nexport default function ServiceMenu({ open, close }) {\r\n  const classes = useStyles();\r\n  const list = () => (\r\n    <div\r\n      className={clsx(classes.list)}\r\n      role=\"presentation\"\r\n      onClick={close}\r\n      onKeyDown={close}\r\n    >\r\n      <List>\r\n        <Typography variant=\"overline\" style={{ fontSize: '10px' }}>\r\n          подсистема опросов\r\n        </Typography>\r\n        <NavLink to='analyze'>\r\n          <ListItem button key={1}>\r\n            <ListItemIcon><PieChartIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Анализатор\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        {/* <NavLink to='tester'>\r\n          <ListItem button key={1}>\r\n            <ListItemIcon><AlarmOnIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Тест интерфейса\" />\r\n          </ListItem>\r\n        </NavLink> */}\r\n        <ListItem button key={2}>\r\n          <ListItemIcon><PhoneIcon /></ListItemIcon>\r\n          <ListItemText primary=\"Генератор номеров\" />\r\n        </ListItem>\r\n        <NavLink to='poll-app-settings'>\r\n          <ListItem button key={3}>\r\n            <ListItemIcon><SettingsIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Настройки\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <Typography variant=\"overline\" style={{ fontSize: '10px' }}>\r\n          общие\r\n        </Typography>\r\n        <Divider />\r\n        <NavLink to='settings/users'>\r\n          <ListItem button key={4}>\r\n            <ListItemIcon><GroupIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Пользователи\" />\r\n          </ListItem>\r\n        </NavLink>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Drawer anchor={'left'} open={open} onClose={close} className=\"left-app-menu\">\r\n      {list('left')}\r\n    </Drawer>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport UserProfile from '../../containers/UserProfile'\r\nimport ServiceMenu from '../ServiceMenu'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('xs')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  sectionDesktop: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  link: {\r\n    color: 'white',\r\n    textDecoration: 'none'\r\n  }\r\n}));\r\n\r\nconst HomeBar = ({ title }) => {\r\n  const classes = useStyles();\r\n  const [appAnchorEl, setAppAnchorEl] = React.useState(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n  const [menuOpen, setMenuOpen] = React.useState(false)\r\n\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n  const isAppMenuOpen = Boolean(appAnchorEl);\r\n\r\n  const handleAppsMenuOpen = (event) => {\r\n    setAppAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n\r\n  const handleAppMenuClose = () => {\r\n    setAppAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  }\r\n\r\n  const handleMobileMenuOpen = (event) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const openServiceMenu = (e) => {\r\n    setMenuOpen(true)\r\n  }\r\n\r\n  const closeServiceMenu = (e) => {\r\n    setMenuOpen(false)\r\n  }\r\n\r\n  const appsMenuId = 'primary-apps-menu';\r\n\r\n  const renderAppsMenu = (\r\n    <Menu\r\n      anchorEl={appAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={appsMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isAppMenuOpen}\r\n      onClose={handleAppMenuClose}\r\n    >\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_1</MenuItem>\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_2</MenuItem>\r\n    </Menu>\r\n  )\r\n\r\n  const mobileMenuId = 'primary-account-menu-mobile';\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem>\r\n        <IconButton color=\"inherit\">\r\n          <Badge badgeContent={0} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Уведомления</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={handleAppsMenuOpen}>\r\n        <IconButton\r\n          aria-label=\"more apps\"\r\n          aria-controls=\"primary-apps-menu\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\">\r\n          <AppsIcon />\r\n        </IconButton>\r\n        <p>Приложения</p>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <UserProfile />\r\n        <p>Profile</p>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            onClick={openServiceMenu}\r\n            aria-label=\"open drawer\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.sectionDesktop}>\r\n            <IconButton color=\"inherit\">\r\n              <Badge badgeContent={0} color=\"secondary\">\r\n                <NotificationsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <IconButton\r\n              aria-label=\"apps\"\r\n              aria-controls={appsMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleAppsMenuOpen}\r\n              color=\"inherit\">\r\n              <Badge badgeContent={0} color=\"secondary\">\r\n                <AppsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <UserProfile />\r\n          </div>\r\n          <div className={classes.sectionMobile}>\r\n            <IconButton\r\n              aria-label=\"show more\"\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleMobileMenuOpen}\r\n              color=\"inherit\"\r\n            >\r\n              <MoreIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <ServiceMenu open={menuOpen} close={closeServiceMenu} />\r\n      {renderMobileMenu}\r\n      {renderAppsMenu}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeBar","import React from 'react';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    backgroundColor: '#44b700',\r\n    color: '#44b700',\r\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n    '&::after': {\r\n      position: 'absolute',\r\n      top: '-1px',\r\n      left: '-1px',\r\n      width: '100%',\r\n      height: '100%',\r\n      borderRadius: '50%',\r\n      animation: '$ripple 1.2s infinite ease-in-out',\r\n      border: '1px solid currentColor',\r\n      content: '\"\"',\r\n    },\r\n  },\r\n  '@keyframes ripple': {\r\n    '0%': {\r\n      transform: 'scale(.8)',\r\n      opacity: 1,\r\n    },\r\n    '100%': {\r\n      transform: 'scale(2.4)',\r\n      opacity: 0,\r\n    },\r\n  },\r\n}))(Badge);\r\n\r\nconst useStyles = makeStyles(({\r\n  root: {\r\n    display: 'flex'\r\n  },\r\n  avatar: {\r\n    backgroundColor: data => data.color\r\n  }\r\n}));\r\n\r\nconst ActiveAvatar = ({ data }) => {\r\n  const classes = useStyles(data);\r\n  if (data.active) {\r\n    return (\r\n      <div className={classes.root}>\r\n        <StyledBadge\r\n          overlap=\"circle\"\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'right',\r\n          }}\r\n          variant=\"dot\"\r\n        >\r\n          <Avatar className={classes.avatar}>\r\n            <span className=\"poll-liter-title\">{data.liter}</span>\r\n          </Avatar>\r\n        </StyledBadge>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <Avatar className={classes.avatar}>\r\n        {data.liter}\r\n      </Avatar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ActiveAvatar","export const pollWays = [\r\n  'Интервьюирование',\r\n  'Анкетирование',\r\n  'Телефонный',\r\n  'WEB'\r\n]\r\n\r\nexport const pollTypes = [\r\n  'Всероссийский',\r\n  'Экспертный'\r\n]","import React, { Fragment } from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PollIcon from '@material-ui/icons/Poll';\r\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport PollAvatar from '../PollAvatar'\r\n\r\nimport { pollWays } from '../../lib/constants'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: '100%',\r\n    margin: '10px 0'\r\n  },\r\n  header: {\r\n    padding: '16px 16px 0 16px'\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    padding: '10px 16px 0 16px'\r\n  },\r\n}));\r\n\r\nconst PollCard = ({ data }) => {\r\n  const classes = useStyles();\r\n  const Results = () => {\r\n    return (\r\n      <Tooltip title=\"Результаты\">\r\n        <NavLink to={`/results/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <PollIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  const Drive = () => {\r\n    return (\r\n      <Tooltip title=\"Ввод результатов\">\r\n        <NavLink to={`/drive/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <AssignmentTurnedInIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip >\r\n    )\r\n  }\r\n  const Attachment = () => {\r\n    return (\r\n      <Tooltip title=\"Файлы\">\r\n        <NavLink to={`/attachment/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  const Settings = () => {\r\n    return (\r\n      <Tooltip title=\"Настройки опроса\">\r\n        <NavLink to={`/poll-settings/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <SettingsIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  const Wiki = () => {\r\n    return (\r\n      <Tooltip title=\"Заметки\">\r\n        <NavLink to={`/poll-wiki/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <LibraryBooksIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Card className={classes.root}>\r\n        <CardHeader className={classes.header}\r\n          avatar={\r\n            <PollAvatar data={data} />\r\n          }\r\n          action={\r\n            <Settings />\r\n          }\r\n          title={data.code + ': ' + data.title}\r\n          subheader={data.startDate + ' - ' + data.endDate}\r\n        />\r\n        <CardContent className={classes.content}>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12} sm={6}>\r\n              <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                Метод проведения: {pollWays[data.way]}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                Респондентов: {data.sample}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <CardActions disableSpacing>\r\n          <Grid container item xs={12}>\r\n            <Results />\r\n          </Grid>\r\n          <Grid container item xs={12} justify=\"flex-end\">\r\n            {data.cities.length ?\r\n              <Drive /> :\r\n              <Tooltip title=\"Города устанавливаются в настройках опроса\">\r\n                <Typography variant=\"overline\" display=\"block\" gutterBottom className=\"empty-cities-warning\">\r\n                  настройте города\r\n              </Typography>\r\n              </Tooltip>\r\n            }\r\n            {/* <Attachment />\r\n            <Wiki /> */}\r\n          </Grid>\r\n        </CardActions>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PollCard","import React from 'react'\r\nimport PollCard from '../PollCard'\r\n\r\nconst ListOfPolls = ({ data }) => {\r\n  return data.polls.map((poll, i) => (\r\n    <PollCard key={i} data={poll} />\r\n  ))\r\n}\r\n\r\nexport default ListOfPolls","function testXml(xmlString) {\r\n  var parser = new DOMParser();\r\n  var docError = parser.parseFromString('INVALID', 'text/xml');\r\n  var parsererrorNS = docError.getElementsByTagName(\"parsererror\")[0].namespaceURI;\r\n  var doc = parser.parseFromString(xmlString, 'text/xml');\r\n  if (doc.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0) {\r\n    return false\r\n  }\r\n  return doc;\r\n}\r\n\r\nconst xmlparser = (xmlString) => {\r\n  const xml = testXml(xmlString)\r\n  if (xml) {\r\n    let data = {}\r\n    const element = xml.getElementsByTagName(\"opros\")[0]\r\n    data.title = element.getAttribute('name')\r\n    data.code = element.getAttribute('cod')\r\n    data.start = element.getAttribute('start_date')\r\n    data.end = element.getAttribute('end_date')\r\n    data.structure = {\r\n      data: ''\r\n    }\r\n    return data\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default xmlparser","import React, { useRef, useEffect, useState } from 'react'\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Button from '@material-ui/core/Button';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport xmlparser from '../../lib/utils'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst XmlImport = ({ field, ...props }) => {\r\n  const { errorMessage, touched, setFieldValue } = props;\r\n  const { name, value, onChange, onBlur } = field;\r\n  const [processing, setProcessing] = useState(false)\r\n  const [file, setFile] = useState(undefined)\r\n  const [count, setCount] = useState(0)\r\n  const classes = useStyles();\r\n  const fileUpload = useRef();\r\n  let fileReader\r\n\r\n  const upload = () => {\r\n    if (fileUpload) {\r\n      fileUpload.current.click();\r\n    }\r\n  }\r\n\r\n  const handleChg = (e) => {\r\n    e.preventDefault()\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        const xmlText = reader.result\r\n        const xml = xmlparser(xmlText)\r\n        if (xml) {\r\n          setProcessing(false)\r\n          const regEx = /^(\\d{2}).(\\d{2}).(\\d{4})$/;\r\n          setFieldValue('title', xml.title)\r\n          setFieldValue('startdate', xml.start.replace(regEx, `$3-$2-$1`))\r\n          setFieldValue('enddate', xml.end.replace(regEx, `$3-$2-$1`))\r\n          setFieldValue('code', xml.code)\r\n          setFieldValue('xmlfile', file)\r\n        } else {\r\n          console.log('Неправильный формат XML');\r\n          setFieldValue('mainconfig', '')\r\n          return\r\n        }\r\n      }\r\n      reader.readAsText(file);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Backdrop className={classes.backdrop} open={processing} >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n\r\n      <input\r\n        style={{ display: 'none' }}\r\n        id={name}\r\n        name={name}\r\n        type=\"file\"\r\n        id={name}\r\n        ref={fileUpload}\r\n        onBlur={onBlur}\r\n        // onChange={handleChange}\r\n        onInput={handleChg}\r\n      />\r\n      <Badge\r\n        color=\"secondary\"\r\n        badgeContent={count}\r\n        style={{ top: '5px' }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"default\"\r\n          startIcon={<PublishIcon />}\r\n          onClick={upload}\r\n        >\r\n          XML\r\n        </Button>\r\n      </Badge>\r\n      {errorMessage ? (\r\n        <Typography variant=\"caption\" color=\"error\">\r\n          {errorMessage}\r\n        </Typography>\r\n      ) : null}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default XmlImport","import React from \"react\";\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport { Formik, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nimport XmlInput from \"../XmlInput\";\r\n\r\nimport {pollTypes, pollWays} from '../../lib/constants'\r\n\r\nconst TextInputComponent = ({ field, ...props }) => {\r\n  const { errorMessage, label, type, touched } = props;\r\n  const { name, value, onChange, onBlur } = field;\r\n  return (\r\n    <div>\r\n      <TextField\r\n        fullWidth\r\n        type={type}\r\n        name={name}\r\n        label={label}\r\n        value={value}\r\n        error={touched && errorMessage ? true : false}\r\n        helperText={touched && errorMessage ? errorMessage : undefined}\r\n        onChange={onChange}\r\n        onBlur={onBlur}\r\n        InputLabelProps={{\r\n          shrink: true\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SelectInputComponent = ({ field, ...props }) => {\r\n  const { errorMessage, label, touched, array } = props;\r\n  const { name, value, onChange, onBlur } = field;\r\n  return (\r\n    <div>\r\n      <TextField\r\n        select\r\n        fullWidth\r\n        name={name}\r\n        label={label}\r\n        value={value}\r\n        error={touched && errorMessage ? true : false}\r\n        helperText={touched && errorMessage ? errorMessage : undefined}\r\n        onChange={onChange}\r\n        onBlur={onBlur}\r\n        InputLabelProps={{\r\n          shrink: true\r\n        }}\r\n      >\r\n        {array.map((option, i) => (\r\n          <MenuItem key={i} value={i}>\r\n            {option}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst AddPollDialog = ({ open, closeHndl, saveHndl }) => {\r\n  const FILE_SIZE = 1024 * 1024;                              // 1 mb\r\n  const codeRegExp = /^[A-Za-z]{3}[0-9]{2}-[0-9]{2}?$/\r\n  const SUPPORTED_FORMATS = [\r\n    \"text/xml\"\r\n  ];\r\n  const validationSchema = yup.object().shape({\r\n    title: yup.string().required(\"Обязательное поле\"),\r\n    startdate: yup.date().required('Обязательное поле'),\r\n    enddate: yup.date().required('Обязательное поле'),\r\n    code: yup.string().matches(codeRegExp, 'Формат не валидный').required('Обязательное поле'),\r\n    sample: yup.number().min(1, 'Не меньше одного').required('Обязательное поле'),\r\n    type: yup.string().ensure().required('Обязательное поле'),\r\n    way: yup.string().ensure().required('Обязательное поле'),\r\n    xmlfile: yup\r\n      .mixed()\r\n      .required(\"Обязательное поле формы\")\r\n      .test(\r\n        \"fileSize\",\r\n        \"Слишком большой файл\",\r\n        value => value && value.size <= FILE_SIZE\r\n      )\r\n      .test(\r\n        \"fileFormat\",\r\n        \"Неподдерживаемый формат\",\r\n        value => value && SUPPORTED_FORMATS.includes(value.type)\r\n      )\r\n  });\r\n  const submitHandling = (values, { setSubmitting }) => {\r\n    saveHndl(values)\r\n    closeHndl()\r\n    setSubmitting(true);\r\n  }\r\n  return (\r\n    <Dialog\r\n      className=\"add-poll-dialog\"\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n      open={open}\r\n      maxWidth={'sm'}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">Добавить опрос</DialogTitle>\r\n      <DialogContent>\r\n        <Formik\r\n          initialValues={{\r\n            xmlfile: undefined,\r\n            title: undefined,\r\n            startdate: undefined,\r\n            enddate: undefined,\r\n            code: undefined,\r\n            sample: 10,\r\n            type: 1,\r\n            way: 1,\r\n            comment: undefined\r\n          }}\r\n          validationSchema={validationSchema}\r\n          validateOnBlur={true}\r\n          onSubmit={submitHandling}\r\n        >\r\n          {\r\n            ({\r\n              saveHndl,\r\n              values,\r\n              errors,\r\n              touched,\r\n              dirty,\r\n              isSubmitting,\r\n              handleReset,\r\n              handleSubmit,\r\n              handleChange,\r\n              handleBlur,\r\n              setFieldValue\r\n            }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={6} sm={6}>\r\n                      <Field\r\n                        name=\"xmlfile\"\r\n                        component={XmlInput}\r\n                        setFieldValue={setFieldValue}\r\n                        errorMessage={errors[\"xmlfile\"] ? errors[\"xmlfile\"] : undefined}\r\n                        touched={touched[\"xmlfile\"]}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12}>\r\n                      <Field\r\n                        name=\"title\"\r\n                        type=\"text\"\r\n                        label=\"Наименование\"\r\n                        setFieldValue={setFieldValue}\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"title\"]}\r\n                        touched={touched[\"title\"]}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"startdate\"\r\n                        type=\"date\"\r\n                        label=\"Дата начала\"\r\n                        setFieldValue={setFieldValue}\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"startdate\"]}\r\n                        touched={touched[\"startdate\"]}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"enddate\"\r\n                        type=\"date\"\r\n                        label=\"Дата окончания\"\r\n                        setFieldValue={setFieldValue}\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"enddate\"]}\r\n                        touched={touched[\"enddate\"]}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"code\"\r\n                        label=\"Код опроса\"\r\n                        type=\"text\"\r\n                        setFieldValue={setFieldValue}\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"code\"]}\r\n                        touched={touched[\"code\"]}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"sample\"\r\n                        type=\"number\"\r\n                        label=\"Выборка\"\r\n                        setFieldValue={setFieldValue}\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"sample\"]}\r\n                        touched={touched[\"sample\"]}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"type\"\r\n                        label=\"Тип опроса\"\r\n                        array={pollTypes}\r\n                        setFieldValue={setFieldValue}\r\n                        component={SelectInputComponent}\r\n                        errorMessage={errors[\"type\"]}\r\n                        touched={touched[\"type\"]}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <Field\r\n                        name=\"way\"\r\n                        label=\"Способ проведения\"\r\n                        array={pollWays}\r\n                        component={SelectInputComponent}\r\n                        errorMessage={errors[\"way\"]}\r\n                        touched={touched[\"way\"]}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"comment\"\r\n                        label=\"Комментарии\"\r\n                        component={TextInputComponent}\r\n                        errorMessage={errors[\"comment\"]}\r\n                        touched={touched[\"comment\"]}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <DialogActions>\r\n                    <Button onClick={closeHndl} color=\"primary\">\r\n                      Отмена\r\n                    </Button>\r\n                    <Button type=\"submit\" disabled={isSubmitting}>\r\n                      Сохранить\r\n                    </Button>\r\n                  </DialogActions>\r\n                </form>\r\n              )\r\n          }\r\n        </Formik>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\nexport default AddPollDialog;","import React, { Fragment, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  speedDial: {\r\n    position: 'fixed',\r\n    bottom: '30px',\r\n    right: '30px'\r\n  },\r\n}));\r\n\r\nconst SpeedDialFab = ({ actions }) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <SpeedDial\r\n        ariaLabel=\"SpeedDial openIcon\"\r\n        className={classes.speedDial}\r\n        icon={<SpeedDialIcon />}\r\n        // icon={<SpeedDialIcon openIcon={<EditIcon />} />}\r\n        onClose={handleClose}\r\n        onMouseLeave={handleClose}\r\n        onOpen={handleOpen}\r\n        open={open}\r\n      >\r\n        {actions.map((action) => (\r\n          <SpeedDialAction\r\n            key={action.name}\r\n            icon={action.icon}\r\n            onClick={action.click}\r\n            tooltipTitle={action.name}\r\n          />\r\n        ))}\r\n      </SpeedDial>\r\n    </Fragment>\r\n  );\r\n}\r\nexport default SpeedDialFab","import React, { Fragment, useState } from 'react'\r\nimport AddPollDialog from '../AddPollDialog';\r\nimport PollIcon from '@material-ui/icons/Poll';\r\nimport CalendarTodayRoundedIcon from '@material-ui/icons/CalendarTodayRounded';\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport SpeedDialFab from '../../../../components/SpeedDealFab'\r\n\r\nconst AddPollLogic = ({ addPoll }) => {\r\n  const history = useHistory()\r\n  const [openDialog, setOpenDialog] = useState(false)\r\n  const openPollDialog = () => {\r\n    setOpenDialog(true)\r\n  }\r\n  const closeDialog = () => {\r\n    setOpenDialog(false)\r\n  }\r\n  const saveNewPoll = (data) => {\r\n    const xmlFile = data.xmlfile\r\n    if (xmlFile.size) {\r\n      let promise = new Promise((resolve, reject) => {\r\n        resolve(xmlParse(xmlFile))\r\n      })\r\n      promise.then(result => {\r\n        const basicData = basicLogicFormation(result)\r\n        const pollInfo = {\r\n          title: data.title,\r\n          startDate: data.startdate,\r\n          endDate: data.enddate,\r\n          code: data.code,\r\n          sample: data.sample,\r\n          type: data.type,\r\n          way: data.way,\r\n          comment: data.comment\r\n        }\r\n        addPoll({\r\n          variables: {\r\n            newPoll: {\r\n              ...pollInfo,\r\n              comment: pollInfo.comment ? pollInfo.comment : \"\",\r\n              shortTitle: '',\r\n              active: true\r\n            },\r\n            poolOfQuestions: basicData.questions,\r\n            logic: {\r\n              ...basicData.logic\r\n            },\r\n            topic: basicData.topic\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  const xmlParse = (file) => {\r\n    let result = {\r\n      questions: [],\r\n      logic: [],\r\n      topic: []\r\n    }\r\n    let reader = new FileReader();\r\n    return new Promise((resolve, reject) => {\r\n      reader.onloadend = () => {\r\n        const xmlText = reader.result\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(xmlText, 'text/xml');\r\n        const questions = doc.getElementsByTagName('vopros')\r\n        const questionsLen = questions.length\r\n        for (let i = 0; i < questionsLen; i++) {\r\n          let questionData = {\r\n            title: questions[i].getAttribute('text'),\r\n            topic: +questions[i].getAttribute('tema_id'),\r\n            limit: questions[i].getAttribute('limit') ? +questions[i].getAttribute('limit') : 1,\r\n            type: +questions[i].getAttribute('type_id'),\r\n            order: +questions[i].getAttribute('sort'),\r\n            answers: []\r\n          }\r\n          const questionAnswers = questions[i].getElementsByTagName('otvet')\r\n          const answersLen = questionAnswers.length\r\n          for (let i = 0; i < answersLen; i++) {\r\n            const answerData = {\r\n              title: questionAnswers[i].getAttribute('otvet_text'),\r\n              code: questionAnswers[i].getAttribute('otvet_cod').padStart(3, \"0\"),\r\n              type: +questionAnswers[i].getAttribute('otvet_type'),\r\n              order: +questionAnswers[i].getAttribute('otvet_sort')\r\n            }\r\n            questionData.answers[i] = answerData\r\n          }\r\n          result.questions[i] = questionData\r\n        }\r\n        const defaultLogic = doc.getElementsByTagName('restrict')\r\n        const logicLen = defaultLogic.length\r\n        if (logicLen) {\r\n          let logicData = []\r\n          for (let i = 0; i < logicLen; i++) {\r\n            const logic = {\r\n              code: defaultLogic[i].getAttribute('otvet_cod').padStart(3, \"0\"),\r\n              restrict: defaultLogic[i].getAttribute('restrict_cod').padStart(3, \"0\"),\r\n              type: defaultLogic[i].getAttribute('restrict_type')\r\n            }\r\n            logicData[i] = logic\r\n          }\r\n          result.logic = logicData\r\n        }\r\n        const topics = doc.getElementsByTagName('tema')\r\n        const topicsLen = topics.length\r\n        if (topicsLen) {\r\n          for (let i = 0; i < topicsLen; i++) {\r\n            const topicData = {\r\n              id: topics[i].getAttribute('id'),\r\n              title: topics[i].getAttribute('name')\r\n            }\r\n            result.topic[i] = topicData\r\n          }\r\n        }\r\n        resolve(result)\r\n      }\r\n      reader.readAsText(file);\r\n    })\r\n  }\r\n\r\n  const basicLogicFormation = (data) => {\r\n    const basicLogic = data.logic.reduce((acum, val, i) => {\r\n      if (val.type === '3') {\r\n        if (!acum.exclude[val.code]) {\r\n          acum.exclude[val.code] = { restrict: [val.restrict] }\r\n        } else {\r\n          acum.exclude[val.code] = {\r\n            restrict: [\r\n              ...acum.exclude[val.code].restrict,\r\n              val.restrict\r\n            ]\r\n          }\r\n        }\r\n      } else if (val.type === '5') {\r\n        acum.unique = [...acum.unique, val.code]\r\n      }\r\n      return acum\r\n    }, {\r\n      unique: [],\r\n      exclude: {}\r\n    })\r\n    const extLogic = data.questions.reduce((acum, val) => {\r\n      if (val.limit > 1) {\r\n        // если вопрос с множество ответов -> ответ 'Затрудняюсь ответить' (type = 3) - УНИКАЛЬНЫЙ\r\n        basicLogic.unique = [\r\n          ...basicLogic.unique,\r\n          ...val.answers.filter(obj => obj.type === 3).map(obj => obj.code)\r\n        ]\r\n      }\r\n      acum.difficult = [\r\n        ...acum.difficult,\r\n        ...val.answers.filter(obj => obj.type === 3).map(obj => obj.code)\r\n      ]\r\n      acum.freeAnswers = [\r\n        ...acum.freeAnswers,\r\n        ...val.answers.filter(obj => obj.type === 2).map(obj => obj.code)\r\n      ]\r\n      return acum\r\n    }, {\r\n      difficult: [],\r\n      freeAnswers: []\r\n    })\r\n    data.logic = {\r\n      ...basicLogic,\r\n      ...extLogic\r\n    }\r\n    return data\r\n  }\r\n\r\n  // элементы для кнопки быстрого доступа\r\n  const actions = [\r\n    { icon: <PollIcon />, name: 'Новый опрос', click: () => openPollDialog() },\r\n    { icon: <CalendarTodayRoundedIcon />, name: 'Архив опросов', click: () => history.push(\"/poll-archive\") }\r\n  ];\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <SpeedDialFab actions={actions} />\r\n      <AddPollDialog open={openDialog} saveHndl={saveNewPoll} closeHndl={closeDialog} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default AddPollLogic","import React, { Fragment } from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Box, Typography } from \"@material-ui/core\";\r\n\r\nconst LoadingState = (props) => {\r\n  let imageWidth;\r\n  let imageHeight;\r\n  let variant;\r\n\r\n  switch (props.size) {\r\n    case \"small\":\r\n      imageWidth = 40;\r\n      imageHeight = 40;\r\n      variant = \"h6\";\r\n      break;\r\n\r\n    case \"medium\":\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n\r\n    case \"large\":\r\n      imageWidth = 100;\r\n      imageHeight = 100;\r\n      variant = \"h4\";\r\n      break;\r\n\r\n    default:\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n  }\r\n\r\n  if (props.type === \"page\") {\r\n    return (\r\n      <Box\r\n        style={{ transform: \"translate(-50%, -50%)\" }}\r\n        position=\"absolute\"\r\n        top=\"50%\"\r\n        left=\"50%\"\r\n        textAlign=\"center\"\r\n      >\r\n        {props.image && (\r\n          <Box\r\n            clone\r\n            mb={props.title || props.description ? 2 : 0}\r\n            width={`${imageWidth}%`}\r\n            height={`${imageHeight}%`}\r\n          >\r\n            {props.image}\r\n          </Box>\r\n        )}\r\n\r\n        {props.title && (\r\n          <Box mb={!props.description && props.button ? 2 : 0}>\r\n            <Typography variant={variant}>{props.title}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.description && (\r\n          <Box mb={props.button && 2}>\r\n            <Typography variant=\"body1\">{props.description}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.button && props.button}\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (props.type === \"card\") {\r\n    return (\r\n      <Box padding={props.padding} textAlign=\"center\">\r\n        {props.image && (\r\n          <Box\r\n            clone\r\n            mb={props.title || props.description ? 2 : 0}\r\n            width={`${imageWidth}%`}\r\n            height={`${imageHeight}%`}\r\n          >\r\n            {props.image}\r\n          </Box>\r\n        )}\r\n\r\n        {props.title && (\r\n          <Box mb={!props.description && props.button ? 2 : 0}>\r\n            <Typography variant={variant}>{props.title}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.description && (\r\n          <Box mb={props.button && 2}>\r\n            <Typography variant=\"body1\">{props.description}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.button && props.button}\r\n      </Box>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nLoadingState.defaultProps = {\r\n  image: <CircularProgress />,\r\n  title: 'Загрузка',\r\n  description: 'Подождите пожалуйста',\r\n  type: \"page\",\r\n  size: \"medium\",\r\n  padding: 2,\r\n};\r\n\r\n\r\nexport default LoadingState","import React from 'react'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst LoadingStatus = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Backdrop className={classes.backdrop} open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  )\r\n}\r\n\r\nexport default LoadingStatus","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst SystemNoti = (props) => {\r\n\r\n  const Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n  return (\r\n    <Snackbar open={props.open} autoHideDuration={props.duration} onClose={props.close}>\r\n      <Alert severity={props.type} onClose={props.close}>\r\n        {props.text}\r\n      </Alert>\r\n    </Snackbar>\r\n\r\n  )\r\n}\r\n\r\nSystemNoti.defaultProps = {\r\n  type: 'error',\r\n  duration: 4000\r\n}\r\n\r\nexport default SystemNoti","import React, { Fragment } from 'react'\r\nimport { Box, Typography } from \"@material-ui/core\";\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  popover: {\r\n    pointerEvents: 'none',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n\r\nconst ErrorState = (props) => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const classes = useStyles();\r\n\r\n  const handlePopoverOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handlePopoverClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n\r\n  const PopOver = ({ open }) => {\r\n    return (\r\n      <Popover\r\n        id=\"mouse-over-popover\"\r\n        className={classes.popover}\r\n        classes={{\r\n          paper: classes.paper,\r\n        }}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left',\r\n        }}\r\n        onClose={handlePopoverClose}\r\n        disableRestoreFocus\r\n      >\r\n        <Typography>\r\n          {props.poper &&\r\n            props.poper}\r\n        </Typography>\r\n      </Popover>\r\n    )\r\n  }\r\n\r\n  let imageWidth;\r\n  let imageHeight;\r\n  let variant;\r\n\r\n  switch (props.size) {\r\n    case \"small\":\r\n      imageWidth = 40;\r\n      imageHeight = 40;\r\n      variant = \"h6\";\r\n      break;\r\n\r\n    case \"medium\":\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n\r\n    case \"large\":\r\n      imageWidth = 100;\r\n      imageHeight = 100;\r\n      variant = \"h4\";\r\n      break;\r\n\r\n    default:\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n  }\r\n\r\n  if (props.type === \"page\") {\r\n    return (\r\n      <Fragment>\r\n        <PopOver open={open} />\r\n        <Box\r\n          style={{ transform: \"translate(-50%, -50%)\" }}\r\n          position=\"absolute\"\r\n          top=\"50%\"\r\n          left=\"50%\"\r\n          textAlign=\"center\"\r\n        >\r\n          {props.image && (\r\n            <Box\r\n              clone\r\n              mb={props.title || props.description ? 2 : 0}\r\n              width={`${imageWidth}%`}\r\n              height={`${imageHeight}%`}\r\n            >\r\n              {props.image}\r\n            </Box>\r\n          )}\r\n\r\n          {props.title && (\r\n            <Box mb={!props.description && props.button ? 2 : 0}>\r\n              <Typography variant={variant}>{props.title}</Typography>\r\n            </Box>\r\n          )}\r\n\r\n          {props.description && (\r\n            <Box mb={props.button && 2}>\r\n              <Typography variant=\"body1\">{props.description}</Typography>\r\n            </Box>\r\n          )}\r\n          <HelpOutlineIcon\r\n            onMouseEnter={handlePopoverOpen}\r\n            onMouseLeave={handlePopoverClose}\r\n          />\r\n\r\n          {props.button && props.button}\r\n        </Box>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  if (props.type === \"card\") {\r\n    return (\r\n      <Fragment>\r\n        <PopOver open={open} />\r\n        <Box padding={props.padding} textAlign=\"center\">\r\n          {props.image && (\r\n            <Box\r\n              clone\r\n              mb={props.title || props.description ? 2 : 0}\r\n              width={`${imageWidth}%`}\r\n              height={`${imageHeight}%`}\r\n            >\r\n              {props.image}\r\n            </Box>\r\n          )}\r\n\r\n          {props.title && (\r\n            <Box mb={!props.description && props.button ? 2 : 0}>\r\n              <Typography variant={variant}>{props.title}</Typography>\r\n            </Box>\r\n          )}\r\n\r\n          {props.description && (\r\n            <Box mb={props.button && 2}>\r\n              <Typography variant=\"body1\">{props.description}</Typography>\r\n            </Box>\r\n          )}\r\n          <HelpOutlineIcon\r\n            onMouseEnter={handlePopoverOpen}\r\n            onMouseLeave={handlePopoverClose}\r\n          />\r\n\r\n          {props.button && props.button}\r\n        </Box>\r\n      </Fragment>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nconst DefaultPoper = () => {\r\n  return(\r\n    <span>Смотрите консоль</span>\r\n  )\r\n}\r\n\r\nErrorState.defaultProps = {\r\n  title: 'Ошибка',\r\n  description: 'Что-то пошло не так',\r\n  poper: <DefaultPoper />,\r\n  type: \"page\",\r\n  size: \"medium\",\r\n  padding: 2,\r\n};\r\n\r\n\r\nexport default ErrorState","import { gql } from '@apollo/client'\r\n\r\nexport const GET_ALL_ACTIVE_POLLS = gql`\r\n  query {\r\n    polls {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      color\r\n      startDate\r\n      endDate\r\n      sample\r\n      way\r\n      type\r\n      complete\r\n      questionsCount\r\n      answersCount\r\n      active\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const ADD_NEW_POLL = gql`\r\n  mutation ($newPoll: PollWithConfig!, $poolOfQuestions: [QuestionInput], $logic: LogicInput, $topic: [TopicInput]) {\r\n    addPoll(poll: $newPoll, questions: $poolOfQuestions, logic: $logic, topic: $topic) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      color\r\n      startDate\r\n      endDate\r\n      sample\r\n      way\r\n      type\r\n      complete\r\n      questionsCount\r\n      answersCount\r\n      active\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\nimport Container from '@material-ui/core/Container'\r\n\r\nimport ListOfPolls from './components/ListOfPolls'\r\nimport AddPollLogic from './components/AddPollLogic'\r\nimport LoadingState from '../../components/LoadingState'\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\nimport SystemNoti from '../../components/SystemNoti'\r\nimport ErrorState from '../../components/ErrorState'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_ACTIVE_POLLS } from \"./queries\"\r\nimport { ADD_NEW_POLL } from './mutations'\r\n\r\nconst PollHome = () => {\r\n  const [noti, setNoti] = useState(false)\r\n\r\n  const {\r\n    loading: pollsLoading,\r\n    error: pollsError,\r\n    data: pollsData\r\n  } = useQuery(GET_ALL_ACTIVE_POLLS)\r\n\r\n  const [addPoll, {\r\n    loading: addLoading\r\n  }] = useMutation(ADD_NEW_POLL, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Добавить не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data }) => {\r\n      const { polls } = cache.readQuery({ query: GET_ALL_ACTIVE_POLLS })\r\n      cache.writeQuery({ query: GET_ALL_ACTIVE_POLLS, data: { polls: [...polls, data.addPoll] } })\r\n    }\r\n  })\r\n\r\n  if (pollsLoading) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (pollsError) return (\r\n    <ErrorState\r\n      title=\"Что-то пошло не так\"\r\n      description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n    />\r\n  );\r\n\r\n  const Loading = () => {\r\n    if (addLoading)\r\n      return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <Container maxWidth=\"md\">\r\n        <ListOfPolls data={pollsData} />\r\n      </Container>\r\n      <AddPollLogic addPoll={addPoll} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollHome","import React, { Fragment } from 'react'\r\n\r\nimport HomeBar from '../components/HomeBar'\r\nimport PollHome from '../modules/PollHome'\r\n\r\nconst HomePage = () => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <HomeBar title={\"Опросы\"} />\r\n      <PollHome />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default HomePage","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    textDecoration: 'none'\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('xs')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  sectionDesktop: {\r\n    display: 'flex'\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  arrow: {\r\n    color: 'white',\r\n    textDecoration: 'none'\r\n  }\r\n}));\r\n\r\nconst SettingBar = ({ title }) => {\r\n  const classes = useStyles();\r\n  const [appAnchorEl, setAppAnchorEl] = React.useState(null);\r\n  const isAppMenuOpen = Boolean(appAnchorEl);\r\n\r\n  const handleAppsMenuOpen = (event) => {\r\n    setAppAnchorEl(event.currentTarget);\r\n  };\r\n  const handleAppMenuClose = () => {\r\n    setAppAnchorEl(null);\r\n  }\r\n\r\n  const appsMenuId = 'primary-apps-menu';\r\n\r\n  const renderAppsMenu = (\r\n    <Menu\r\n      anchorEl={appAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={appsMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isAppMenuOpen}\r\n      onClose={handleAppMenuClose}\r\n    >\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_1</MenuItem>\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_2</MenuItem>\r\n    </Menu>\r\n  )\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <NavLink to=\"/\">\r\n            <IconButton\r\n              edge=\"start\"\r\n              className={classes.menuButton}\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n            >\r\n              <ArrowBackIcon className={classes.arrow} />\r\n            </IconButton>\r\n          </NavLink>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.sectionDesktop}>\r\n            <IconButton\r\n              edge=\"end\"\r\n              aria-label=\"apps\"\r\n              aria-controls={appsMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleAppsMenuOpen}\r\n              color=\"inherit\">\r\n              <AppsIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {renderAppsMenu}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingBar","import React from 'react'\r\n\r\nconst PollArchive = () => {\r\n  return(\r\n    <p>Пока Пусто</p>\r\n  )\r\n}\r\n\r\nexport default PollArchive","import React, { Fragment } from 'react'\r\n\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollArchive from '../modules/PollArchive'\r\n\r\nconst HomePage = () => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={'Архив опросов'} />\r\n      <div>\r\n        <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n          <PollArchive />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default HomePage","import React, { useRef, useEffect } from 'react'\r\n\r\nconst FreeAnswer = ({ answer, focusHandler, blurHandler }) => {\r\n  const textInput = useRef(null);\r\n  useEffect(() => {\r\n    if (answer.focus) {\r\n      textInput.current.focus()\r\n    }\r\n    if (answer.freeAnswerText !== '') {\r\n      textInput.current.value = answer.freeAnswerText\r\n    }\r\n  }, [])\r\n\r\n  const handlerInput = (e) => {\r\n    let keyCode = e.keyCode\r\n    if (keyCode === 13) {\r\n      e.currentTarget.blur()\r\n      return\r\n    } else if (keyCode === 27) {\r\n      if (textInput.current.value !== '') {\r\n        textInput.current.value = ''\r\n        return\r\n      }\r\n      e.currentTarget.blur()\r\n      return\r\n    }\r\n  }\r\n  if (answer.showFreeAnswer) {\r\n    return (\r\n      <span>\r\n        <input\r\n          className=\"free-answer\"\r\n          type=\"text\"\r\n          ref={textInput}\r\n          data-code={answer.code}\r\n          data-keycode={answer.keyCode}\r\n          placeholder=\"Введите свободный ответ\"\r\n          onKeyUp={handlerInput}\r\n          onFocus={focusHandler}\r\n          onBlur={blurHandler}\r\n        />\r\n      </span>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nexport default FreeAnswer","import React, { Fragment, useRef } from 'react'\r\nimport FreeAnswer from '../FreeAnswer'\r\nimport FlashOnSharpIcon from '@material-ui/icons/FlashOnSharp';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst Answer = ({ answer, clickHandler, focusHandler, blurHandler, settings }) => {\r\n  const answerRef = useRef(null)\r\n\r\n  let answerCls = ['answer-wrap']\r\n  let answerTitle = ['answer-title']\r\n  if (answer.selected) {\r\n    answerCls.push('selected')\r\n  }\r\n  if (answer.disabled) {\r\n    answerTitle.push('disabled')\r\n  }\r\n\r\n  const click = () => {\r\n    clickHandler(answerRef.current)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div onClick={(e) => click(e)}\r\n        className={answerCls.join(' ')}\r\n        ref={answerRef}\r\n        data-code={answer.keyCode} >\r\n        <div className={\"answer-title\"}>\r\n          <span className={\"answer-key\"}>{answer.showIndex}</span>\r\n          <span> </span>\r\n          {settings.codesShow &&\r\n            <span className={\"answer-code\"} >{answer.code}</span>\r\n          }\r\n          <span> - </span>\r\n          <span className={answerTitle.join(' ')}>{answer.title}</span>\r\n          <span className=\"free-answer-icon\">{answer.freeAnswer ? <EditIcon fontSize=\"small\" /> : null}</span>\r\n          <span className=\"answer-exclude-message\">{answer.excludeM}</span>\r\n        </div>\r\n        <div>\r\n          {answer.showFreeAnswer && (\r\n            <FreeAnswer\r\n              answer={answer}\r\n              focus={answer.focus}\r\n              focusHandler={focusHandler}\r\n              blurHandler={blurHandler}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Answer","import React, { useState, useEffect } from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 500,\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n  errorText: {\r\n    color: 'red'\r\n  }\r\n}));\r\n\r\nexport default function Tags({ data, limit, settings, multipleHandler }) {\r\n  const classes = useStyles();\r\n  const [answers, setAnswers] = useState([])\r\n  const [codes, setCodes] = useState([])\r\n  const [error, setError] = useState({\r\n    state: false,\r\n    text: ''\r\n  })\r\n\r\n  useEffect(() => {\r\n    const defVal = data.filter(val => {\r\n      if (val.selected) return val\r\n    })\r\n    const codesOfAnswers = data.map(val => val.code)\r\n    setCodes(codesOfAnswers)\r\n    setAnswers(defVal)\r\n  }, [])\r\n\r\n  const handleAnswerSelect = (e, value, reason) => {\r\n    switch (reason) {\r\n      case 'select-option':\r\n        if (value.length > limit) {\r\n          setError({ state: true, text: 'Максимальное количество ответов' })\r\n          return\r\n        }\r\n        setAnswers(value)\r\n        setError({ ...error, state: false })\r\n        break\r\n      case 'remove-option':\r\n        setAnswers(value)\r\n        setError({ ...error, state: false })\r\n        break\r\n      case 'clear':\r\n        setAnswers([])\r\n        setError({ ...error, state: false })\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const blurHandler = (e) => {\r\n    setError({ ...error, state: false })\r\n    multipleHandler(answers, codes)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Autocomplete\r\n        multiple={limit > 1}\r\n        id=\"tags-standard\"\r\n        options={data}\r\n        onChange={handleAnswerSelect}\r\n        value={answers}\r\n        getOptionLabel={(option) => option.title}\r\n        getOptionDisabled={(option) => option.disabled}\r\n        renderOption={(option) => {\r\n          if (settings.codesShow) {\r\n            return <span><span style={{ fontSize: '10px' }}>{option.code}</span> - {option.title}</span>\r\n          }\r\n          return option.title\r\n        }}\r\n        onBlur={blurHandler}\r\n        renderTags={(value, getTagProps) =>\r\n          value.map((option, index) => (\r\n            <Chip\r\n              {...getTagProps({ index })}\r\n              variant=\"outlined\"\r\n              key={index}\r\n              label={settings.codesShow ?\r\n                <span><span style={{ fontSize: '10px' }}>{option.code}</span> - {option.title}</span> :\r\n                <span>{option.title}</span>\r\n              }\r\n            />\r\n          ))\r\n        }\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            error={error.state}\r\n            variant=\"standard\"\r\n            label=\"Выберите ответы\"\r\n            helperText={error.state ? error.text : ''}\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}","import React, { Fragment, useState } from 'react'\r\nimport Answer from \"../Answer\";\r\nimport Tags from '../MultipleAnswers'\r\n\r\nconst Question = ({ count, question, clickHandler, focusHandler, blurHandler, multipleHandler, settings }) => {\r\n  function FlatAnswer() {\r\n    return (\r\n      question.answers.map((answer, i) => (\r\n        <Answer key={i} answer={answer}\r\n          clickHandler={clickHandler}\r\n          focusHandler={focusHandler}\r\n          blurHandler={blurHandler}\r\n          settings={settings}\r\n        />\r\n      )))\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <span className=\"drive-question-card\">\r\n        <h3 className=\"question-title-card\" >\r\n          <span className={\"question-number\"}>{count + 1}</span>\r\n          <span> - </span>\r\n          {question.title}</h3>\r\n        <div>{\r\n          !question.mega ?\r\n            question.answers.map((answer, i) => (\r\n              <Answer key={i} answer={answer}\r\n                clickHandler={clickHandler}\r\n                focusHandler={focusHandler}\r\n                blurHandler={blurHandler}\r\n                settings={settings}\r\n              />\r\n            )) : <Tags data={question.answers} limit={question.limit} settings={settings} multipleHandler={multipleHandler} />\r\n        }\r\n        </div>\r\n      </span>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Question","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst FinishDialog = ({ open, handleClose, finishAll, confirm }) => {\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Данная анкета завершена.\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Кажется данная анкета закончена. Перейти к другой анкете?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={finishAll} color=\"primary\">\r\n            Закончить\r\n          </Button>\r\n          <Button onClick={confirm} color=\"primary\" autoFocus>\r\n            Следующая\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FinishDialog","import React from 'react'\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst ConfirmDialog = ({ open, confirm, close, data, buttons }) => {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={close}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">{data.title}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          {data.text}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        {buttons.close &&\r\n          <Button onClick={close} color=\"primary\">\r\n            {buttons.close}\r\n          </Button>\r\n        }\r\n        {buttons.confirm &&\r\n          <Button onClick={confirm} color=\"primary\" autoFocus>\r\n            {buttons.confirm}\r\n          </Button>\r\n        }\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default ConfirmDialog","export const serviceBtns = [\r\n  8, 9, 16, 17, 18, 19, 20, 32,\r\n  33, 34, 35, 36, 38, 40, 91, 106,\r\n  107, 109, 110, 112, 113, 114, 115,\r\n  116, 117, 118, 119, 120, 121, 122, 123, 144\r\n];\r\n\r\nexport const resetBtn = [\r\n  27\r\n]\r\n\r\nexport const confirmBtns = [\r\n  48,\r\n  96,\r\n  13\r\n];\r\n\r\nexport const castCodes = {\r\n  97: 49,\r\n  98: 50,\r\n  99: 51,\r\n  100: 52,\r\n  101: 53,\r\n  102: 54,\r\n  103: 55,\r\n  104: 56,\r\n  105: 57\r\n};\r\n\r\nexport const answersCodes = [\r\n  37,\r\n  39,\r\n  49,\r\n  50,\r\n  51,\r\n  52,\r\n  53,\r\n  54,\r\n  55,\r\n  56,\r\n  57,\r\n  81,\r\n  87,\r\n  69,\r\n  82,\r\n  84,\r\n  89,\r\n  85,\r\n  73,\r\n  79,\r\n  80,\r\n  65,\r\n  83,\r\n  68,\r\n  70,\r\n  71,\r\n  72,\r\n  74,\r\n  75,\r\n  76,\r\n  90,\r\n  88,\r\n  67,\r\n  97,\r\n  98,\r\n  99,\r\n  100,\r\n  101,\r\n  102,\r\n  103,\r\n  104,\r\n  105\r\n]\r\n\r\nexport const keycodes = [\r\n  ['1', 49],\r\n  ['2', 50],\r\n  ['3', 51],\r\n  ['4', 52],\r\n  ['5', 53],\r\n  ['6', 54],\r\n  ['7', 55],\r\n  ['8', 56],\r\n  ['9', 57],\r\n  ['Q', 81],\r\n  ['W', 87],\r\n  ['E', 69],\r\n  ['R', 82],\r\n  ['T', 84],\r\n  ['Y', 89],\r\n  ['U', 85],\r\n  ['I', 73],\r\n  ['O', 79],\r\n  ['P', 80],\r\n  ['A', 65],\r\n  ['S', 83],\r\n  ['D', 68],\r\n  ['F', 70],\r\n  ['G', 71],\r\n  ['H', 72],\r\n  ['J', 74],\r\n  ['K', 75],\r\n  ['L', 76],\r\n  ['Z', 90],\r\n  ['X', 88],\r\n  ['C', 67],\r\n  ['V', 86],\r\n  ['B', 66],\r\n  ['N', 78],\r\n  ['M', 77]\r\n];","import { castCodes, serviceBtns, resetBtn, confirmBtns, answersCodes } from './keycodes'\r\n\r\n// приведение клавиш доп.клавиатуры к кодам основной цифровой клавиатуры\r\nfunction cast(keyCode) {\r\n  if (castCodes[keyCode] !== undefined) return castCodes[keyCode];\r\n  return keyCode;\r\n}\r\n\r\nfunction checkAnswerSelected(keyCode) {\r\n  return answersCodes.includes(keyCode)\r\n}\r\n\r\nfunction checkResetBtn(keyCode) {\r\n  return resetBtn.includes(keyCode)\r\n\r\n}\r\n\r\nfunction checkConfirmBtn(keyCode) {\r\n  return confirmBtns.includes(keyCode)\r\n}\r\n\r\nfunction checkServiceBtn(keyCode) {\r\n  return serviceBtns.includes(keyCode)\r\n}\r\n\r\nconst defineSelectedAnswer = (keyCode) => {\r\n  if (checkAnswerSelected(keyCode)) {\r\n    return {\r\n      do: 1,\r\n      trueCode: cast(keyCode)\r\n    }\r\n  }\r\n  if (checkServiceBtn(keyCode)) {\r\n    return {\r\n      do: 4\r\n    }\r\n  }\r\n  if (checkResetBtn(keyCode)) {\r\n    return {\r\n      do: 2\r\n    }\r\n  }\r\n  if (checkConfirmBtn(keyCode)) {\r\n    return {\r\n      do: 3\r\n    }\r\n  }\r\n  return {\r\n    do: 4\r\n  }\r\n}\r\n\r\nexport default defineSelectedAnswer","import { keycodes } from './keycodes'\r\n\r\n// формирует вопрос, на основании логики и ранее сохраненных результатов\r\nconst questionFormation = (poll, count, result, logic, setResults) => {\r\n  const question = poll.questions[count]\r\n  let keyCodesPool = []\r\n  let codesPool = []\r\n\r\n  // проверка на видимость ответа в перечне (ВНЕШНЯЯ ЛОГИКА - видимость)\r\n  const visibleAnswers = logic.invisible ? question.answers.filter(obj => !logic.invisible.includes(obj.code))\r\n    : question.answers\r\n\r\n  // если вопрос пропущен\r\n\r\n  const exclude = logic.criticalExclude ? logic.criticalExclude : false\r\n  let uniqueIn = false\r\n  let selectedIn = false\r\n  let uniqueSelected = false\r\n  const newAnswers = visibleAnswers.map((answer, i) => {\r\n    // надстройка для объекта - ответ\r\n    let suffix = {\r\n      freeAnswer: false,\r\n      showFreeAnswer: false,\r\n      freeAnswerText: '',\r\n      focus: false,\r\n      selected: false,\r\n      disabled: false,\r\n      exclude: [],\r\n      excludeM: ''\r\n    }\r\n    codesPool.push(answer.code)\r\n    // устанавливаем исключения\r\n    if (exclude) {\r\n      // заполняем поле exclude, в котором указаны все коды, которые будут исключены при выборе данного ответа\r\n      for (let code in exclude) {\r\n        if (code === answer.code) {\r\n          suffix = {\r\n            ...suffix,\r\n            exclude: [...suffix.exclude, ...exclude[code]]\r\n          }\r\n        }\r\n        if (exclude[code].includes(answer.code)) {\r\n          suffix = {\r\n            ...suffix,\r\n            exclude: [...suffix.exclude, code]\r\n          }\r\n        }\r\n      }\r\n      // проверяем не исключен ли данный ответ кодами, которые указаны в поле exclude\r\n      suffix.exclude.map(code => {\r\n        if (result.pool.includes(code)) {\r\n          suffix = {\r\n            ...suffix,\r\n            disabled: true,\r\n            excludeM: `противоречит коду ${code}`\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    if (visibleAnswers.length > keycodes.length) {\r\n      keyCodesPool[i] = [i, i + 1]\r\n    } else {\r\n      keyCodesPool[i] = keycodes[i][1]\r\n      suffix = {\r\n        ...suffix,\r\n        showIndex: keycodes[i][0],\r\n        keyCode: keycodes[i][1],\r\n      }\r\n    }\r\n    // восстанавливаем ответы !\r\n    if (result.pool.includes(answer.code)) {\r\n      selectedIn = true\r\n      suffix = {\r\n        ...suffix,\r\n        selected: true\r\n      }\r\n    }\r\n    // проверка на блокировку ответа (ВНЕШНЯЯ ЛОГИКА - уникальность)\r\n    if (logic.unique.includes(answer.code)) {\r\n      uniqueIn = true\r\n      suffix = {\r\n        ...suffix,\r\n        unique: true\r\n      }\r\n    }\r\n    if (logic.unique.includes(answer.code) & result.pool.includes(answer.code)) uniqueSelected = true\r\n\r\n    // проверка на свободный ответ (ВНЕШНЯЯ ЛОГИКА - свободный ответ)\r\n    if (logic.freeAnswers.includes(answer.code)) {\r\n      suffix = {\r\n        ...suffix,\r\n        freeAnswer: true,\r\n        focus: true\r\n      }\r\n    }\r\n    if (result[question.id]) {\r\n      let data = result[question.id].data\r\n      for (let i = 0; i < data.length; i++) {\r\n        if (answer.code === data[i].answerCode && data[i].freeAnswerText !== '') {\r\n          suffix = {\r\n            ...suffix,\r\n            freeAnswer: true,\r\n            showFreeAnswer: true,\r\n            freeAnswerText: data[i].freeAnswerText,\r\n            focus: false\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const resultQ = { ...answer, ...suffix }\r\n    return resultQ\r\n  })\r\n\r\n  // надстройка для объекта - вопрос\r\n  let qSuffix = {\r\n    mega: false,\r\n    megaMltp: false,\r\n    multiple: false                                      // много возможных ответов\r\n  }\r\n\r\n  if (question.limit > 1) {\r\n    qSuffix = {\r\n      ...qSuffix,\r\n      multiple: true\r\n    }\r\n  }\r\n\r\n  // проверка сколько всего ответов в вопросе -> если много, то формируем multiple select\r\n  if (visibleAnswers.length > keycodes.length) {\r\n    qSuffix = {\r\n      ...qSuffix,\r\n      mega: true,\r\n      megaMltp: question.limit\r\n    }\r\n  } else {\r\n    qSuffix = {\r\n      ...qSuffix,\r\n      keyCodesPool\r\n    }\r\n  }\r\n\r\n  const countSkipAnswers = newAnswers.reduce((acum, answer) => {\r\n    return acum + answer.disabled\r\n  }, 0)\r\n\r\n  if (countSkipAnswers === newAnswers.length) {\r\n    setResults(prevState => ({\r\n      ...prevState,\r\n      [question.id]: {\r\n        data: [],\r\n        codesPool,\r\n        count\r\n      }\r\n    }))\r\n    return {\r\n      next: true\r\n    }\r\n  }\r\n\r\n  if (result[question.id] === undefined) {\r\n    setResults(prevState => ({\r\n      ...prevState,\r\n      [question.id]: {\r\n        data: [],\r\n        codesPool,\r\n        count\r\n      }\r\n    }))\r\n  }\r\n\r\n  // определение выбранных ответов и их уникальность для вопроса при восстановлении результатов\r\n  const mAnswers = newAnswers.map((answer, index) => {\r\n    if (selectedIn) {\r\n      if (uniqueIn) {\r\n        if (uniqueSelected) {\r\n          return answer.unique & answer.selected ? answer : { ...answer, disabled: true }\r\n        } else {\r\n          return answer.unique ? { ...answer, disabled: true } : answer\r\n        }\r\n      }\r\n    }\r\n    return answer\r\n  }).map(answer => {\r\n    if (exclude) {\r\n      for (let code in exclude) {\r\n        if (result.pool.includes(code)) {\r\n          if (exclude[code].includes(answer.code)) {\r\n            return { ...answer, disabled: true }\r\n          }\r\n          return answer\r\n        }\r\n      }\r\n\r\n    }\r\n    return answer\r\n  })\r\n\r\n  const data = {\r\n    ...question,\r\n    ...qSuffix,\r\n    answers: mAnswers\r\n  }\r\n\r\n  return {\r\n    next: false,\r\n    data\r\n  }\r\n}\r\n\r\nexport default questionFormation","const beep = (config) => {\r\n  let audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n  config = Object.assign({\r\n    volume: 25 / 100,\r\n    frequency: 3020,\r\n    duration: 150,\r\n    type: 'sine'\r\n  }, config);\r\n\r\n  let oscillator = audioCtx.createOscillator();\r\n  let gainNode = audioCtx.createGain();\r\n  oscillator.connect(gainNode);\r\n  gainNode.connect(audioCtx.destination);\r\n  gainNode.gain.value = config.volume;\r\n  oscillator.frequency.value = config.frequency;\r\n  oscillator.type = config.type;\r\n  oscillator.start();\r\n  setTimeout(\r\n    function () {\r\n      oscillator.stop();\r\n    },\r\n    config.duration\r\n  );\r\n}\r\nexport default beep","import React, { Fragment, useEffect, useState } from 'react'\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport { Grid } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { Prompt } from 'react-router-dom'\r\n\r\nimport Question from '../Question'\r\nimport FinishDialog from '../FinishDialog';\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog'\r\n\r\nimport defineSelectedAnswer from '../../lib/defineSelectedAnswer'\r\nimport questionFormation from '../../lib/questionFormation'\r\nimport beep from '../../lib/beep'\r\n\r\nconst KEY_TYPE = 'keyup'\r\nconst STEP_DELAY = 100\r\nconst MOVE_DELAY = 0\r\n\r\nconst ANSWER_SELECTED = 1\r\nconst RESET_RESULTS = 2\r\nconst CONFIRM_QUESTION = 3\r\nconst SKIP = 4\r\n\r\nconst PollDrive = ({ poll, logics, setCurrentQuestion, saveAndGoBack, saveWorksheet }) => {\r\n  const questionsLimit = poll.questions.length\r\n  const [question, setQuestion] = useState(null)\r\n  const [userSettings, setUserSettings] = useState({\r\n    codesShow: true\r\n  })\r\n  const [earlyСompletion, setEarlyСompletion] = useState(false)\r\n  const [direction, setDirection] = useState(1)\r\n  const [logic] = useState(logics)\r\n  const [count, setCount] = useState(0)\r\n  const [results, setResults] = useState(\r\n    {\r\n      pool: []\r\n    }\r\n  )\r\n  const [finish, setFinish] = useState(false)\r\n  const [finishDialog, setFinishDialog] = useState(false)\r\n  const [inlineMessage, setInlineMessage] = useState('')\r\n  const keyUpHandler = ({ target, keyCode }) => {\r\n    if (target.nodeName === 'BODY') {\r\n      const nextStep = defineSelectedAnswer(keyCode)\r\n      switch (nextStep.do) {\r\n        case ANSWER_SELECTED: {\r\n          mainLogic(nextStep.trueCode)\r\n          return\r\n        }\r\n        case CONFIRM_QUESTION: {\r\n          confirmResults()\r\n          return\r\n        }\r\n        case RESET_RESULTS: {\r\n          resetAnswers()\r\n          return\r\n        }\r\n        case SKIP: {\r\n          return                                                    // нажата системная клавиша, не относящаяся к опросу\r\n        }\r\n        default: {\r\n          return\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const confirmResults = () => {\r\n    if (finish) {\r\n      finishRespondent()\r\n    } else {\r\n      if (results[question.id].data.length) {\r\n        goToNext()\r\n        return\r\n      }\r\n      beep()\r\n    }\r\n  }\r\n\r\n\r\n  const goToNext = () => {\r\n    setDirection(1)\r\n    if (count < questionsLimit - 1) {\r\n      setCount(count + 1)\r\n    } else {\r\n      setCount(0)\r\n    }\r\n  }\r\n\r\n  const goToPrevious = () => {\r\n    setDirection(0)\r\n    if (count === 0) {\r\n      setCount(questionsLimit - 1)\r\n    } else {\r\n      setCount(count - 1)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(KEY_TYPE, keyUpHandler)\r\n    return () => {\r\n      document.removeEventListener(KEY_TYPE, keyUpHandler)\r\n    };\r\n  })\r\n\r\n  // Кнопка с треброванием выдать ID и сохранить !!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n  useEffect(() => {\r\n    // первичная инициализация, наложение логики и сохранение в стор следующего вопроса + восстановление промежуточных итогов\r\n    const newQuestion = questionFormation(poll, count, results, logic, setResults);\r\n    if (!newQuestion) return\r\n    if (newQuestion.next) {\r\n      if (direction) {\r\n        if (count === questionsLimit - 1) {\r\n          console.log('END');\r\n          setEarlyСompletion(true)\r\n          return\r\n        }\r\n        setCount(count + 1)\r\n      } else {\r\n        setCount(count - 1)\r\n      }\r\n      return\r\n    }\r\n    setQuestion(newQuestion.data)\r\n    setCurrentQuestion(newQuestion.data)\r\n  }, [count])\r\n\r\n  const clickHandler = (target) => {\r\n    const code = target.dataset.code\r\n    const selectedAnswer = question.answers.filter(obj => obj.keyCode === +code)[0]\r\n    // проверка, если поле со свободным ответом необходимо отредактировать\r\n    if (selectedAnswer.freeAnswer && selectedAnswer.selected) {\r\n      return\r\n    }\r\n    mainLogic(code)\r\n  }\r\n\r\n  const codesShow = (e) => {\r\n    setUserSettings(prevState => ({\r\n      ...prevState,\r\n      codesShow: !prevState.codesShow\r\n    }))\r\n  }\r\n\r\n  const checkRespondentFinish = (newResults) => {\r\n    let count = 0\r\n    for (let key in newResults) {\r\n      if (key !== 'pool') {\r\n        count++\r\n      }\r\n    }\r\n    // проверка - если не дошли до конца анкета, нет смысла анализировать концовку\r\n    if (count < poll.questions.length) {\r\n      return false\r\n    }\r\n    for (let key in newResults) {\r\n      if (key !== 'pool') {\r\n        const result = newResults[key]\r\n        if (!result.data.length) {\r\n          // необходимо проверить - пропущен был вопрос или нет\r\n          if (logic.criticalExclude) {\r\n            const resPool = newResults.pool                // уже сохраненные ответы\r\n            const codesPool = result.codesPool\r\n            const criticalExclude = logic.criticalExclude\r\n            const r = codesPool.filter((code, index) => {\r\n              for (let eCode in criticalExclude) {\r\n                if (resPool.includes(eCode)) {\r\n                  if (criticalExclude[eCode].includes(code)) return false\r\n                }\r\n              }\r\n              return true\r\n            })\r\n            if (r.length) {\r\n              setInlineMessage(`Пропущен ${result.count + 1}й вопрос`)\r\n              setFinish(false)\r\n              return false\r\n            }\r\n          } else {\r\n            // пула критичных ответов нет -> запрещенных вопросов нет -> какой-то вопрос пропущен\r\n            // ОПРЕДЕЛИТЬ какой номер вопроса\r\n            setInlineMessage(`Пропущен ${result.count + 1}й вопрос`)\r\n            setFinish(false)\r\n            return false\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setInlineMessage('')\r\n    setFinish(true)\r\n    return true\r\n  }\r\n\r\n  const finishRespondent = () => {\r\n    setFinishDialog(true)\r\n  }\r\n\r\n  // ОСНОВНЫЙ обработчик сброса ответов\r\n  const resetAnswers = () => {\r\n    const savedCodes = results[question.id].data.reduce((acum, val) => [...acum, val.answerCode], [])\r\n    // Сделано так, чтобы не ждать обновления СТЕЙТА с результатами\r\n    let newResults = {}\r\n    for (let key in results) {\r\n      if (key === question.id) {\r\n        newResults[question.id] = {\r\n          ...results[question.id],\r\n          data: []\r\n        }\r\n      } else {\r\n        if (key !== 'pool') {\r\n          newResults = {\r\n            ...newResults,\r\n            [key]: results[key]\r\n          }\r\n        } else {\r\n          newResults = {\r\n            ...newResults,\r\n            pool: results.pool.filter(code => {\r\n              return savedCodes.includes(code) ? false : true\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setResults(newResults)\r\n    checkRespondentFinish(newResults)\r\n    setQuestion(prevState => ({\r\n      ...prevState,\r\n      answers: prevState.answers.map(\r\n        answer => true ? { ...answer, selected: false, showFreeAnswer: false, disabled: false } : answer\r\n      ).map(\r\n        answer => {\r\n          let excludePool = []\r\n          // формирование пула кодов которые запрещены в результатах\r\n          for (let code in logic.criticalExclude) {\r\n            if (code === answer.code) {\r\n              excludePool = [\r\n                ...excludePool,\r\n                ...logic.criticalExclude[code]\r\n              ]\r\n            }\r\n            if (logic.criticalExclude[code].includes(answer.code)) {\r\n              excludePool = [\r\n                ...excludePool,\r\n                code\r\n              ]\r\n            }\r\n          }\r\n          for (let i = 0; i < excludePool.length; i++) {\r\n            if (newResults.pool.includes(excludePool[i])) {\r\n              return {\r\n                ...answer,\r\n                disabled: true,\r\n                excludeM: `противоречит коду ${excludePool[i]}`\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            ...answer,\r\n            disabled: false,\r\n            excludeM: ''\r\n          }\r\n        }\r\n      )\r\n    }))\r\n    setFinish(false)\r\n    // обновить логику и проверить запрещенные ответы для данного вопроса для их перерисовки!!!!!!\r\n  }\r\n\r\n  // ОСНОВНОЙ обработчик логики\r\n  const mainLogic = (code) => {\r\n    const trueCode = +code\r\n    const keyCodesPool = question.keyCodesPool\r\n    const selectedAnswer = question.answers.filter(obj => obj.keyCode === trueCode)[0]\r\n    // движение по опросу\r\n    if (trueCode === 39) { // клавиша вправо\r\n      setTimeout(() => {\r\n        goToNext()\r\n      }, MOVE_DELAY)\r\n      return\r\n    } else if (trueCode === 37) { // клавиша влево\r\n      setTimeout(() => {\r\n        goToPrevious()\r\n      }, MOVE_DELAY)\r\n      return\r\n    }\r\n    // входит ли код клавиатуры в перечень ответов\r\n    if (keyCodesPool.includes(trueCode)) {\r\n      // промежуточные результаты уже содержат выбранный код => удаляем промежуточный результат => обновляем текущий вью\r\n      if (results.pool.includes(selectedAnswer.code)) {\r\n        let newResults = {}\r\n        for (let key in results) {\r\n          if (key === question.id) {\r\n            newResults = {\r\n              ...newResults,\r\n              [question.id]: {\r\n                ...results[question.id],\r\n                data: results[question.id].data.filter(el => el.answerCode !== selectedAnswer.code)\r\n              }\r\n            }\r\n          } else {\r\n            if (key !== 'pool') {\r\n              newResults = {\r\n                ...newResults,\r\n                [key]: results[key]\r\n              }\r\n            } else {\r\n              newResults = {\r\n                ...newResults,\r\n                pool: results.pool.filter(el => el !== selectedAnswer.code)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        setResults(newResults)\r\n        setQuestion(prevState => ({\r\n          ...prevState,\r\n          answers: prevState.answers.map(\r\n            answer => answer.code === selectedAnswer.code ? { ...answer, selected: false, showFreeAnswer: false } : answer\r\n          ).map(\r\n            answer => newResults[question.id].data.length ? answer : ({ ...answer, disabled: false })\r\n          ).map(\r\n            answer => {\r\n              let excludePool = []\r\n              // формирование пула кодов которые запрещены в результатах \r\n              for (let code in logic.criticalExclude) {\r\n                if (code === answer.code) {\r\n                  excludePool = [\r\n                    ...excludePool,\r\n                    ...logic.criticalExclude[code]\r\n                  ]\r\n                }\r\n                if (logic.criticalExclude[code].includes(answer.code)) {\r\n                  excludePool = [\r\n                    ...excludePool,\r\n                    code\r\n                  ]\r\n                }\r\n              }\r\n              for (let i = 0; i < excludePool.length; i++) {\r\n                if (newResults.pool.includes(excludePool[i])) {\r\n                  return {\r\n                    ...answer,\r\n                    disabled: true,\r\n                    excludeM: `противоречит коду ${excludePool[i]}`\r\n                  }\r\n                }\r\n              }\r\n              return {\r\n                ...answer,\r\n                disabled: false,\r\n                excludeM: ''\r\n              }\r\n            }\r\n          ).map(answer => {\r\n            // проверка на уникальность\r\n            if (newResults[question.id].data.length) {\r\n              return answer.unique ? { ...answer, disabled: true } : answer\r\n            }\r\n            return answer\r\n          })\r\n        }))\r\n        checkRespondentFinish(newResults)\r\n        return\r\n      }\r\n      // проверка на уникальность ответа и выбраннного до этого противоречивого ответа (ВНЕШНЯЯ ЛОГИКА - уникальность)\r\n      if (logic.unique.includes(selectedAnswer.code)) {\r\n        if (results[question.id].data.length) {\r\n          beep()\r\n          return\r\n        }\r\n      }\r\n      // проверка на активность ответа и ограничение по количеству ответов\r\n      if (selectedAnswer.disabled || results[question.id].data.length >= question.limit) {\r\n        beep()\r\n        return\r\n      }\r\n      // проверка на свободный ответ\r\n      if (selectedAnswer.freeAnswer) {\r\n        setQuestion(prevState => ({\r\n          ...prevState,\r\n          answers: prevState.answers.map(\r\n            answer => answer.keyCode === selectedAnswer.keyCode ? { ...answer, selected: true, showFreeAnswer: true } : answer\r\n          )\r\n        }))\r\n        return\r\n      }\r\n      const result = {\r\n        answerCode: selectedAnswer.code,\r\n        answerId: selectedAnswer.id,\r\n        freeAnswer: false,\r\n        freeAnswerText: ''\r\n      }\r\n      // проверка на исключаемость (ВНЕШНЯЯ ЛОГИКА - КРИТИЧНАЯ исключаемость) -> запретить ответы, которые указаны в конфиг файле\r\n      for (let code in logic.criticalExclude) {\r\n        // если в выбранных ответах присутствует код, который исключает другие ответы\r\n        if (results.pool.includes(code)) {\r\n          if (logic.criticalExclude[code].includes(selectedAnswer.code)) {\r\n            beep()\r\n            return\r\n          }\r\n        }\r\n      }\r\n      // проверка на исключаемость (ВНЕШНЯЯ ЛОГИКА - НЕКРИТИЧНАЯ исключаемость) -> ОПОВЕСТИТЬ при ответе, которые указаны в конфиг файле\r\n      for (let code in logic.nonCriticalExclude) {\r\n        // если в выбранных ответах присутствует код, который исключает другие ответы\r\n        if (results.pool.includes(code)) {\r\n          if (logic.nonCriticalExclude[code].includes(selectedAnswer.code)) {\r\n            console.log('Ответ не совсем корректен');\r\n          }\r\n        }\r\n      }\r\n\r\n      let newResultState = Object.assign({}, results);\r\n      newResultState[question.id].data.push(result)\r\n      newResultState.pool.push(selectedAnswer.code)\r\n      setResults(newResultState)\r\n      setQuestion(prevState => ({\r\n        ...prevState,\r\n        answers: prevState.answers.map(\r\n          answer => answer.keyCode === trueCode ? { ...answer, selected: true } : answer\r\n        ).map(\r\n          answer => logic.unique.includes(answer.code) & answer.keyCode !== trueCode ? { ...answer, disabled: true } : answer\r\n        ).map(\r\n          answer => selectedAnswer.exclude.includes(answer.code) ? {\r\n            ...answer,\r\n            disabled: true,\r\n            excludeM: `противоречит коду ${selectedAnswer.code}`\r\n          } : answer\r\n        )\r\n      }))\r\n      // проверить на уникальность (ВНЕШНЯЯ ЛОГИКА - уникальность) -> запретить другие ответы\r\n      if (logic.unique.includes(selectedAnswer.code)) {\r\n        setQuestion(prevState => ({\r\n          ...prevState,\r\n          answers: prevState.answers.map(\r\n            answer => answer.keyCode === trueCode ? answer : { ...answer, disabled: true }\r\n          )\r\n        }))\r\n      }\r\n\r\n      // ПРОВЕРКА на окончание ввода\r\n      if (checkRespondentFinish(newResultState)) {\r\n        return\r\n      } else {\r\n        // проверка на ЛИМИТ (для автоматического перехода к следующему вопросу)\r\n        if (results[question.id].data.length >= question.limit) {\r\n          // переходим дальше\r\n          setTimeout(() => {\r\n            goToNext()\r\n          }, STEP_DELAY)\r\n          return\r\n        }\r\n      }\r\n    } else {\r\n      beep()\r\n    }\r\n  }\r\n\r\n  // ОСНОВНОЙ обработчик свободного ответа\r\n  const blurHandler = (e) => {\r\n    const value = e.currentTarget.value\r\n    const selectedCode = e.currentTarget.dataset.code\r\n    const selectedKeyCode = e.currentTarget.dataset.keycode\r\n    const selectedAnswer = question.answers.filter(obj => obj.keyCode === +selectedKeyCode)[0]\r\n    if (value === '') {\r\n      // пустое поле не позволительно -> стираем из промежуточного результата и обновляем вью\r\n      let newResults = {}\r\n      for (let key in results) {\r\n        if (key === question.id) {\r\n          newResults = {\r\n            ...newResults,\r\n            [question.id]: {\r\n              ...results[question.id],\r\n              data: results[question.id].data.filter(el => el.answerCode !== selectedCode)\r\n            }\r\n          }\r\n        } else {\r\n          if (key !== 'pool') {\r\n            newResults = {\r\n              ...newResults,\r\n              [key]: results[key]\r\n            }\r\n          } else {\r\n            newResults = {\r\n              ...newResults,\r\n              pool: results.pool.filter(el => el !== selectedCode)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setResults(newResults)\r\n      setQuestion(prevState => ({\r\n        ...prevState,\r\n        answers: prevState.answers.map(\r\n          answer => answer.code === selectedCode ? { ...answer, selected: false, showFreeAnswer: false } : answer\r\n        ).map(\r\n          answer => newResults[question.id].data.length ? answer : ({ ...answer, disabled: false })\r\n        ).map(\r\n          answer => {\r\n            let excludePool = []\r\n            // формирование пула кодов которые запрещены в результатах \r\n            for (let code in logic.criticalExclude) {\r\n              if (code === answer.code) {\r\n                excludePool = [\r\n                  ...excludePool,\r\n                  ...logic.criticalExclude[code]\r\n                ]\r\n              }\r\n              if (logic.criticalExclude[code].includes(answer.code)) {\r\n                excludePool = [\r\n                  ...excludePool,\r\n                  code\r\n                ]\r\n              }\r\n            }\r\n            for (let i = 0; i < excludePool.length; i++) {\r\n              if (newResults.pool.includes(excludePool[i])) {\r\n                return {\r\n                  ...answer,\r\n                  disabled: true,\r\n                  excludeM: `противоречит коду ${excludePool[i]}`\r\n                }\r\n              }\r\n            }\r\n            return {\r\n              ...answer,\r\n              disabled: false,\r\n              excludeM: ''\r\n            }\r\n          }\r\n        ).map(answer => {\r\n          // проверка на уникальность\r\n          if (newResults[question.id].data.length) {\r\n            return answer.unique ? { ...answer, disabled: true } : answer\r\n          }\r\n          return answer\r\n        })\r\n      }))\r\n      checkRespondentFinish(newResults)\r\n      return\r\n    }\r\n    // поле не пустое -> сохраняем результат\r\n    const result = {\r\n      answerCode: selectedCode,\r\n      answerId: selectedAnswer.id,\r\n      freeAnswer: false,\r\n      freeAnswerText: value\r\n    }\r\n\r\n    /// опять новый СТЕЙТ результата!!!!!!!!!!!\r\n\r\n    let newResultState = {}\r\n    if (results.pool.includes(selectedCode)) {\r\n      newResultState = Object.assign({}, results);\r\n      newResultState[question.id] = {\r\n        ...newResultState[question.id],\r\n        data: results[question.id].data.map(\r\n          answer => answer.answerCode === selectedCode ? { ...answer, freeAnswerText: value } : answer\r\n        )\r\n      }\r\n    } else {\r\n      newResultState = Object.assign({}, results);\r\n      newResultState[question.id].data.push(result)\r\n      newResultState.pool.push(selectedCode)\r\n    }\r\n    setResults(newResultState)\r\n\r\n    // проверить на уникальность (ВНЕШНЯЯ ЛОГИКА - уникальность) -> запретить другие ответы\r\n    if (logic.unique.includes(selectedCode)) {\r\n      setQuestion(prevState => ({\r\n        ...prevState,\r\n        answers: prevState.answers.map(\r\n          answer => answer.keyCode === +selectedKeyCode ? answer : { ...answer, disabled: true }\r\n        )\r\n      }))\r\n    }\r\n    setQuestion(prevState => ({\r\n      ...prevState,\r\n      answers: prevState.answers.map(\r\n        answer => answer.keyCode === selectedCode ? { ...answer, selected: true } : answer\r\n      ).map(\r\n        answer => logic.unique.includes(answer.code) & answer.keyCode !== selectedCode ? { ...answer, disabled: true } : answer\r\n      ).map(\r\n        answer => selectedAnswer.exclude.includes(answer.code) ? {\r\n          ...answer,\r\n          disabled: true,\r\n          excludeM: `противоречит коду ${selectedAnswer.code}`\r\n        } : answer\r\n      )\r\n    }))\r\n\r\n    // \r\n    if (checkRespondentFinish(newResultState)) {\r\n      return\r\n    } else {\r\n      if (results[question.id].data.length >= question.limit - 1) {         // -1 т.к. не успевает обновится стейт\r\n        setTimeout(() => {\r\n          goToNext()\r\n        }, STEP_DELAY)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // !!!!!!!!!!!!!!!!!!!!Обработчик SELECTa - не доделана логика выбора!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n  const multipleHandler = (value, codes) => {\r\n    if (value.length) {\r\n      const codesPool = value.map(val => val.code)\r\n      const resultsPool = value.map(val => {\r\n        return {\r\n          answerCode: val.code,\r\n          freeAnswer: false,\r\n          freeAnswerText: ''\r\n        }\r\n      })\r\n      const clearPool = results.pool.filter(val => !codes.includes(val))\r\n      setResults(prevState => ({\r\n        ...prevState,\r\n        [question.id]: {\r\n          ...prevState[question.id],\r\n          data: [\r\n            ...resultsPool\r\n          ]\r\n        },\r\n        pool: [\r\n          ...clearPool,\r\n          ...codesPool\r\n        ]\r\n      }))\r\n      if (value.length) {\r\n        setTimeout(() => {\r\n          goToNext()\r\n        }, STEP_DELAY)\r\n      }\r\n      return\r\n    }\r\n    setResults(prevState => ({\r\n      ...prevState,\r\n      [question.id]: {\r\n        ...prevState[question.id],\r\n        data: []\r\n      },\r\n      pool: prevState.pool.filter(obj => !codes.includes(obj))\r\n    }))\r\n  }\r\n\r\n  const cancelFinish = () => {\r\n    // просто возврат к анкете, чтобы что-то поправить\r\n    setFinishDialog(false)\r\n  }\r\n\r\n  const confirmFinish = () => {\r\n    // закончить данную анкету и начать новую, сбросив все данные\r\n    saveWorksheet(results)\r\n    setResults({\r\n      pool: []\r\n    })\r\n    setCount(0)\r\n    setFinish(false)\r\n    setFinishDialog(false)\r\n  }\r\n\r\n  const finishThisPoll = () => {\r\n    // закончить данный опрос и перейти на главную страницу\r\n    setFinish(false)\r\n    setFinishDialog(false)\r\n    saveAndGoBack(results)\r\n  }\r\n\r\n  const handleEarlyСompletion = () => {\r\n    setResults({\r\n      pool: []\r\n    })\r\n    setCount(0)\r\n    setEarlyСompletion(false)\r\n  }\r\n\r\n  const InlineInformer = () => {\r\n    return (\r\n      <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n        {inlineMessage}\r\n      </Typography>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Prompt\r\n        when={results.pool.length}\r\n        message={location =>\r\n          `Вы действительно хотите покинуть страницу ввода данных. Сохраненные данные будут потеряны!`\r\n        }\r\n      />\r\n      <ConfirmDialog\r\n        open={earlyСompletion}\r\n        confirm={handleEarlyСompletion}\r\n        buttons={{\r\n          confirm: \"Заново\"\r\n        }}\r\n        data={\r\n          {\r\n            title: 'Анкета досрочно завершена',\r\n            text: 'Внимание! Вносимые данные противоречат условиям проведения данного опроса. Вероятно был выбран код, который привел к завершению. Посмотрите конфигурационный файл.'\r\n          }\r\n        }\r\n      />\r\n      <FinishDialog open={finishDialog} handleClose={cancelFinish} finishAll={finishThisPoll} confirm={confirmFinish} />\r\n      <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n        <Grid container xs={6} md={3} justify=\"flex-start\">\r\n          <FormControlLabel\r\n            value=\"end\"\r\n            control={<Checkbox color=\"primary\" onChange={codesShow} defaultChecked={userSettings.codesShow} />}\r\n            label=\"Коды ответов\"\r\n            labelPlacement=\"end\"\r\n          />\r\n        </Grid>\r\n        <Hidden only={['sm', 'xs']}>\r\n          <Grid container md={6} justify=\"center\">\r\n            <InlineInformer />\r\n          </Grid>\r\n        </Hidden>\r\n        <Grid container xs={6} md={3} justify=\"flex-end\">\r\n          <p>Всего: <span><strong>{questionsLimit}</strong></span></p>\r\n        </Grid>\r\n        <Hidden mdUp>\r\n          <Grid container xs={12} justify=\"center\">\r\n            <InlineInformer />\r\n          </Grid>\r\n        </Hidden>\r\n\r\n      </Grid>\r\n      {question &&\r\n        <Question\r\n          count={count}\r\n          question={question}\r\n          settings={userSettings}\r\n          clickHandler={clickHandler}\r\n          blurHandler={blurHandler}\r\n          multipleHandler={multipleHandler}\r\n        />\r\n      }\r\n      <Button onClick={goToPrevious} variant=\"contained\" className=\"control-button\">Назад</Button>\r\n      <Button onClick={goToNext} variant=\"contained\" className=\"control-button\">Вперед</Button>\r\n      {finish &&\r\n        <Button onClick={finishRespondent} variant=\"contained\" className=\"control-button\">Финиш</Button>\r\n      }\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollDrive","import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst DialogWithSelect = ({ open, handleClose, save, header, text, options }) => {\r\n  const [state, setState] = useState(\"\")\r\n  const handleChange = (e) => {\r\n    const { options, selectedIndex, value } = e.target;\r\n    const id = value\r\n    const title = options[selectedIndex].innerHTML\r\n    setState({\r\n      id,\r\n      title\r\n    })\r\n  }\r\n\r\n  const handleSave = () => {\r\n    save(state)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={open} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">{header}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {text}\r\n          </DialogContentText>\r\n          <Select\r\n            fullWidth\r\n            native\r\n            value={state.id}\r\n            onChange={e => handleChange(e)}\r\n          >\r\n            <option aria-label=\"None\" disabled selected value=\"\" />\r\n            {options.map((option, i) =>\r\n              <option key={option.id} value={option.id}>{option.title}</option>\r\n            )}\r\n          </Select>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={handleSave} disabled={!Boolean(state)} color=\"primary\">\r\n            Сохранить\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DialogWithSelect","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      questions{\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          code\r\n          title\r\n        }\r\n      }\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const GET_FILTER_SELECTS = gql`\r\n  query {\r\n    cities {\r\n      id\r\n      title\r\n      population\r\n      category {\r\n        title\r\n      }\r\n    }\r\n    intervievers {\r\n      id\r\n      username\r\n    }\r\n    status {\r\n      value\r\n      title\r\n    }\r\n    sex {\r\n      value\r\n      title\r\n    }\r\n    age {\r\n      value\r\n      title\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_POLL_RESULTS = gql`\r\nquery ($id: ID!) {\r\n  poll(id: $id) {\r\n    id\r\n    title\r\n    results {\r\n      id\r\n      user {\r\n        id\r\n        username\r\n      }\r\n      city {\r\n        id\r\n        title\r\n        category {\r\n          title\r\n        }\r\n      }\r\n      created\r\n      lastModified\r\n      processed\r\n      result {\r\n        answer\r\n        code\r\n        text\r\n      }\r\n    }\r\n    questions {\r\n      id\r\n      title\r\n      order\r\n      limit\r\n      type\r\n      answers {\r\n        id\r\n        title\r\n        order\r\n        code\r\n        results {\r\n          id\r\n          code\r\n          text\r\n          respondent {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const GET_POLL_RESULTS_OLD = gql`\r\n  query ($id: String!) {\r\n    pollResults(id: $id) {\r\n      id\r\n      user {\r\n        id\r\n        username\r\n      }\r\n      city {\r\n        id\r\n        title\r\n        category {\r\n          title\r\n        }\r\n      }\r\n      created\r\n      lastModified\r\n      processed\r\n      result {\r\n        answer\r\n        code\r\n        text\r\n      }\r\n    }\r\n  }\r\n\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const SAVE_NEW_RESULT = gql`\r\nmutation ($poll: String!, $city: String!, $user: String!, $pool: [String], $data: [ResultData]) {\r\n  saveResult(\r\n    poll: $poll,\r\n    city: $city,\r\n    user: $user,\r\n    pool: $pool,\r\n    data: $data\r\n  )\r\n}\r\n`","export const parseIni = (area) => {\r\n  let configData = area;\r\n  // let configData = area.value;\r\n  let regex = {\r\n    section: /^\\s*\\[\\s*([^\\]]*)\\s*\\]\\s*$/,\r\n    param: /^\\s*([^=]+?)\\s*=\\s*(.*?)\\s*$/,\r\n    comment: /^\\s*#.*$/\r\n  };\r\n  let config = {};\r\n  let lines = configData.split(/[\\r\\n]+/);\r\n  let section = null;\r\n  lines.forEach(function (line) {\r\n    if (regex.comment.test(line)) {\r\n      return;\r\n    } else if (regex.param.test(line)) {\r\n      let match = line.match(regex.param);\r\n      if (section) {\r\n        config[section][match[1]] = parseParams(match[2]);\r\n      } else {\r\n        config[match[1]] = parseParams(match[2]);\r\n      }\r\n    } else if (regex.section.test(line)) {\r\n      let match = line.match(regex.section);\r\n      config[match[1]] = {};\r\n      section = match[1];\r\n    } else if (line.length == 0 && section) {\r\n      section = null;\r\n    }\r\n  });\r\n  // console.log(config);\r\n  return concatLogic(config);\r\n}\r\n\r\nfunction concatLogic(config) {\r\n  let regex = /([0-9]{1,})/gm;\r\n  let result = {};\r\n  let property = null;\r\n  for (let key in config) {\r\n    property = key.match(/[a-zA-Z]*/gm)[0];\r\n    result[property] = {};\r\n  }\r\n  for (let key in config) {\r\n    property = key.match(/[a-zA-Z]*/gm)[0];\r\n    let suffix = key.match(regex);\r\n    if (suffix !== null) {\r\n      result[property][suffix] = config[key];\r\n    } else {\r\n      result[property][1] = config[key];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction parseParams(data) {\r\n  // избавляемся от пробелов\r\n  let trimData = data.replace(/\\s*/g, '');\r\n  let regex = {\r\n    // range : /\\[(.+?)\\]/gm,\r\n    // single: /([0-9]{1,3})/gm,\r\n    srange: /([0-9]{1,3})|\\[(.+?)\\]/gm\r\n  };\r\n\r\n  let output = [];\r\n  let temp;\r\n  do {\r\n    temp = regex.srange.exec(trimData);\r\n    if (temp) {\r\n      // одиночные\r\n      if (temp[1] !== undefined) {\r\n        output.push(temp[1]);\r\n      }\r\n      // диапазон\r\n      if (temp[2] !== undefined) {\r\n        let range = temp[2];\r\n        output = output.concat(rangeToArray(range));\r\n      }\r\n    }\r\n  } while (temp);\r\n  return output;\r\n}\r\n\r\nfunction rangeToArray(data) {\r\n  let regex = /(\\d{1,3})\\s*-\\s*(\\d{1,3})/gm;\r\n  let result = (data.replace(regex, (...match) => {\r\n    let temp = [];\r\n    let start = match[1];\r\n    let end = match[2];\r\n    // если перепутаны места\r\n    if (start > end) {\r\n      start = match[2];\r\n      end = match[1];\r\n    }\r\n    let length = (end - start) + 1;\r\n    while (length) {\r\n      start = start + '';\r\n      temp.push(start.padStart(3, '0'));\r\n      start++\r\n      length--;\r\n    }\r\n    return temp;\r\n  }));\r\n  return result.split(',');\r\n}\r\n\r\nexport const normalizeLogic = (logic) => {\r\n  let normalizedLogic = {}\r\n  for (let key in logic) {\r\n    switch (key) {\r\n      case 'difficult':\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          difficult: logic[key][1].answers\r\n        }\r\n        break\r\n      case 'freeAnswers':\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          freeAnswers: logic[key][1].answers\r\n        }\r\n        break\r\n      case 'exclude':\r\n        const exclude = logic[key]\r\n        let criticalExclude = {}\r\n        let nonCriticalExclude = {}\r\n        for (let i in exclude) {\r\n          if (exclude[i].critical[0] === '1') {\r\n            exclude[i].answers.map((answer) => {\r\n              criticalExclude[answer] = exclude[i].exclude\r\n            })\r\n          }\r\n          if (exclude[i].critical[0] === '0') {\r\n            exclude[i].answers.map((answer) => {\r\n              nonCriticalExclude[answer] = exclude[i].exclude\r\n            })\r\n          }\r\n        }\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          criticalExclude,\r\n          nonCriticalExclude\r\n        }\r\n        break\r\n      case 'unique':\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          unique: logic[key][1].answers\r\n        }\r\n        break\r\n      case 'invisible':\r\n        const invisible = logic[key]\r\n        let invisiblePool = []\r\n        for (let i in invisible) {\r\n          invisiblePool = [\r\n            ...invisiblePool,\r\n            ...invisible[i].answers\r\n          ]\r\n        }\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          invisible: invisiblePool\r\n        }\r\n        break\r\n    }\r\n  }\r\n  return normalizedLogic\r\n}","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { mainUrl } from \"../../mainconfig\";\r\n\r\nimport Container from '@material-ui/core/Container'\r\nimport DriveLogic from \"./components/DriveLogic\";\r\nimport DialogWithSelect from '../../components/DialogWithSelect';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\nimport ErrorState from '../../components/ErrorState'\r\nimport LoadingState from '../../components/LoadingState'\r\nimport SystemNoti from '../../components/SystemNoti'\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { gql, useApolloClient, useQuery, useMutation } from '@apollo/client'\r\n\r\nimport { GET_POLL_DATA } from \"./queries\"\r\nimport { GET_POLL_RESULTS } from '../PollResults/containers/OverallResults/queries'\r\n\r\nimport { SAVE_NEW_RESULT } from './mutaions'\r\nimport { parseIni, normalizeLogic } from './lib/utils'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst PollDrive = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  const client = useApolloClient();\r\n  const [message, setMessage] = useState({\r\n    show: false,\r\n    type: 'error',\r\n    message: '',\r\n    duration: 6000\r\n  })\r\n  const { currentUser } = client.readQuery({\r\n    query: gql`\r\n    query CurrentUserQuery {\r\n      currentUser {\r\n        id\r\n        username\r\n      }\r\n    }\r\n    `,\r\n  })\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [poll, setPoll] = useState(null)\r\n  const [backOpen, setBackOpen] = useState(false)\r\n  const [poolOfCities, setPoolOfCities] = useState(null)\r\n  const [openCityDialog, setOpenCityDialog] = useState(true);\r\n  const [logic, setPollLogic] = useState(null)\r\n  const [currentCity, setCurrentCity] = useState(null)\r\n  const [currentQuestion, setCurrentQuestion] = useState({\r\n    'multiple': false\r\n  })\r\n  const { loading, error, data } = useQuery(GET_POLL_DATA, {\r\n    variables: { id },\r\n    onCompleted: (_, __) => {\r\n      handleConfigFile(data.poll.logic.path)\r\n      setPoolOfCities(data.poll.cities)\r\n    }\r\n  })\r\n  const handleConfigFile = (filePath) => {\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const logic = parseIni(text)\r\n        // Нормализация ЛОГИКИ - здесь формируется ЛОГИКА опроса, на основании конфиг файла !!!\r\n        const normLogic = normalizeLogic(logic)\r\n        setPollLogic(normLogic)\r\n      })\r\n  }\r\n  const [saveResult, { loading: saveLoading }] = useMutation(SAVE_NEW_RESULT, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    refetchQueries: [{\r\n      query: GET_POLL_RESULTS,\r\n      variables: {\r\n        id\r\n      }\r\n    }]\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (logic) {\r\n      // применени очередности, если в настройках опроса меняли очередность\r\n      const newOrderQuestion = data.poll.questions.slice().sort((a, b) => (a.order > b.order) ? 1 : -1)\r\n      // исключение вопросов, ответы которых полностью исключены полем [invisible] ВНЕШНЕЙ ЛОГИКИ\r\n      if (logic.invisible) {\r\n        const invisiblePool = logic.invisible\r\n        const visibleQuestions = newOrderQuestion.filter((question) => {\r\n          const answers = question.answers\r\n          const lAnswers = answers.length\r\n          let count = 0\r\n          for (let i = 0; i < lAnswers; i++) {\r\n            if (invisiblePool.includes(answers[i].code)) {\r\n              count++\r\n            }\r\n          }\r\n          if (count !== lAnswers) {\r\n            return true\r\n          }\r\n          return false\r\n        })\r\n        setPoll({\r\n          id: data.poll.id,\r\n          questions: visibleQuestions\r\n        })\r\n      } else {\r\n        setPoll({\r\n          id: data.poll.id,\r\n          questions: newOrderQuestion\r\n        })\r\n      }\r\n    }\r\n  }, [logic])\r\n\r\n\r\n  const Loading = () => {\r\n    if (saveLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  if (!poll || !poolOfCities || !logic || !currentUser) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const saveCity = (city) => {\r\n    setCurrentCity(city)\r\n    setOpenCityDialog(false)\r\n  }\r\n\r\n  const closeDialog = () => {\r\n    setOpenCityDialog(false)\r\n    history.push(\"/\")\r\n  }\r\n\r\n  const prepareResultData = (data) => {\r\n    let result = []\r\n    for (let key in data) {\r\n      if (key !== 'pool') {\r\n        result.push({\r\n          id: key,\r\n          data: data[key].data.map(answer => {\r\n            return {\r\n              answer: answer.answerId,\r\n              code: answer.answerCode,\r\n              text: answer.freeAnswerText,\r\n            }\r\n          })\r\n        })\r\n      }\r\n    }\r\n    return result\r\n  }\r\n\r\n  const saveAndGoBack = (data) => {\r\n    const result = prepareResultData(data)\r\n    saveResult({\r\n      variables: {\r\n        poll: poll.id,\r\n        city: currentCity.id,\r\n        user: currentUser.id,\r\n        pool: data.pool,\r\n        data: result\r\n      }\r\n    }).then(res => {\r\n      history.push(\"/\")\r\n    })\r\n  }\r\n\r\n  const saveWorksheet = (data) => {\r\n    const result = prepareResultData(data)\r\n    saveResult({\r\n      variables: {\r\n        poll: poll.id,\r\n        city: currentCity.id,\r\n        user: currentUser.id,\r\n        pool: data.pool,\r\n        data: result\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <div style={{ backgroundColor: currentQuestion.multiple ? 'rgb(208 226 252)' : '#fff' }}>\r\n        <Container maxWidth=\"md\">\r\n          <DialogWithSelect\r\n            open={openCityDialog}\r\n            options={poolOfCities}\r\n            header=\"Город\"\r\n            text=\"Выберите город в котором проводился опрос\"\r\n            save={saveCity}\r\n            handleClose={closeDialog}\r\n          />\r\n          <DriveLogic\r\n            poll={poll}\r\n            logics={logic}\r\n            setCurrentQuestion={setCurrentQuestion}\r\n            saveAndGoBack={saveAndGoBack}\r\n            saveWorksheet={saveWorksheet} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollDrive","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollDrive from \"../modules/PollDrive\";\r\n\r\nconst DrivePage = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Опрос ` + code + ` - вбивание`} />\r\n      <PollDrive id={id}/>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default DrivePage","import React, { Fragment } from 'react'\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, p, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      className=\"right-pannel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-auto-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-auto-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={p}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction allProps(index) {\r\n  return {\r\n    id: `scrollable-auto-tab-${index}`,\r\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tabs: {\r\n    minWidth: '160px',\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n    overflow: 'visible'\r\n  }\r\n}));\r\n\r\nconst Vertical = ({ data, value, handleChange }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Tabs\r\n      orientation=\"vertical\"\r\n      variant=\"scrollable\"\r\n      value={value}\r\n      onChange={handleChange}\r\n      aria-label=\"Vertical tabs\"\r\n      scrollButtons=\"auto\"\r\n      className={classes.tabs}\r\n    >\r\n      {data.map((obj, index) => (\r\n        <Tab label={obj.label} key={index} {...allProps({ index })} />\r\n      ))}\r\n    </Tabs>\r\n  )\r\n}\r\n\r\nconst Horizontal = ({ data, value, handleChange }) => {\r\n  return (\r\n    <AppBar position=\"static\" color=\"default\">\r\n      <Tabs\r\n        variant=\"scrollable\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        scrollButtons=\"auto\"\r\n        aria-label=\"horizontal auto tabs\"\r\n      >\r\n        {data.map((obj, index) => (\r\n          <Tab label={obj.label} {...allProps({ index })} />\r\n        ))}\r\n      </Tabs>\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nconst AdaptiveTabs = ({ data }) => {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (_, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"root-wrap\">\r\n        <Hidden xsDown>\r\n          <Vertical data={data} value={value} handleChange={handleChange} />\r\n        </Hidden>\r\n        <Hidden smUp>\r\n          <Horizontal data={data} value={value} handleChange={handleChange} />\r\n        </Hidden>\r\n        {data.map((obj, index) => (\r\n          <TabPanel value={value} key={index} index={index} p={obj.padding ? obj.padding : 1}>\r\n            {obj.component}\r\n          </TabPanel>\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default AdaptiveTabs","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query pollQuery($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questionsCount\r\n      answersCount\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n        }\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState, useEffect } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport { parseIni, normalizeLogic } from '../../../PollDrive/lib/utils'\r\nimport { useQuery } from '@apollo/client'\r\n\r\nimport { GET_POLL_DATA } from \"./queries\"\r\n\r\n\r\nconst Generation = ({ id }) => {\r\n  const [poll, setPoll] = useState(null)\r\n  const [questions, setQuestions] = useState(null)\r\n  const [logic, setLogic] = useState(null)\r\n  const [count, setCount] = useState(null)\r\n  const { loading, data } = useQuery(GET_POLL_DATA, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      setPoll({\r\n        id: data.poll.id,\r\n        title: data.poll.title,\r\n        questionsCount: data.poll.questionsCount,\r\n        answersCount: data.poll.answersCount\r\n      })\r\n      handleConfigFile(data.poll.logic.path)\r\n    }\r\n  })\r\n\r\n  const handleConfigFile = (filePath) => {\r\n    fetch(`http://localhost:4000${filePath}`)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const logic = parseIni(text)\r\n        // Нормализация ЛОГИКИ - здесь формируется ЛОГИКА опроса, на основании конфиг файла !!!\r\n        const mainLogic = normalizeLogic(logic)\r\n        setLogic(mainLogic)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (logic) {\r\n      let visibleQuestions = []\r\n      if (logic.invisible) {\r\n        const invisiblePool = logic.invisible\r\n        visibleQuestions = data.poll.questions.filter((question) => {\r\n          const answers = question.answers\r\n          const lAnswers = answers.length\r\n          let count = 0\r\n          for (let i = 0; i < lAnswers; i++) {\r\n            if (invisiblePool.includes(answers[i].code)) {\r\n              count++\r\n            }\r\n          }\r\n          if (count !== lAnswers) {\r\n            return true\r\n          }\r\n        })\r\n      } else {\r\n        visibleQuestions = data.poll.questions\r\n      }\r\n      const modQuestions = visibleQuestions.map((question, index) => {\r\n        const newAnswers = question.answers.map((answer, index) => {\r\n          let suffix = {}\r\n          if (logic.invisible) {\r\n            if (logic.invisible.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                disabled: true\r\n              }\r\n            }\r\n          }\r\n          if (logic.freeAnswers) {\r\n            if (logic.freeAnswers.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                freeAnswer: true\r\n              }\r\n            }\r\n          }\r\n          if (logic.unique) {\r\n            if (logic.unique.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                unique: true\r\n              }\r\n            }\r\n          }\r\n          if (logic.difficult) {\r\n            if (logic.difficult.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                difficult: true\r\n              }\r\n            }\r\n          }\r\n          const newAnswer = {\r\n            ...answer,\r\n            ...suffix\r\n          }\r\n          return newAnswer\r\n        })\r\n        const newQuestion = {\r\n          ...question,\r\n          answers: newAnswers\r\n        }\r\n        return newQuestion\r\n      })\r\n      setQuestions(modQuestions)\r\n    }\r\n  }, [logic])\r\n\r\n\r\n  if (loading || !logic || !questions) return (\r\n    <Fragment>\r\n      <CircularProgress />\r\n      <p>Загрузка. Подождите пожалуйста</p>\r\n    </Fragment>\r\n  )\r\n\r\n  const testPoolChange = (e) => {\r\n    const val = e.currentTarget.value\r\n    if (val < 0) {\r\n      return\r\n    }\r\n    setCount(val)\r\n  }\r\n\r\n  const generateTestPool = () => {\r\n    const worksheetsCount = count\r\n    console.log(questions);\r\n    // freeAnswer\r\n    // freeAnswersPool\r\n    // unique\r\n    // criticalExclude\r\n    // difficult\r\n    for (let i = 0; i < worksheetsCount; i++) {\r\n      questions.map((question, index) => {\r\n\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container>\r\n        <Box>\r\n          <h3>{poll.title}</h3>\r\n        </Box>\r\n        <Grid xs={12} item container justify=\"flex-start\">\r\n          <Box>\r\n            <TextField\r\n              id=\"outlined-number\"\r\n              label=\"Number\"\r\n              type=\"number\"\r\n              value={count}\r\n              onChange={testPoolChange}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n          <Box p={1}>\r\n            <Button variant=\"contained\" color=\"primary\" disabled={count ? false : true} onClick={generateTestPool}>\r\n              Генерировать\r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Generation","import React, { Fragment } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nconst RespondentCard = ({ result, index, show, edit, selected, select, count }) => {\r\n  return (\r\n    <Fragment>\r\n      <Paper className=\"respondent-card\">\r\n        <Grid container item justify=\"space-between\">\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {index + 1}\r\n          </Typography>\r\n          {result.processed ? <p>dd</p> : ''}\r\n          <Checkbox\r\n            checked={selected}\r\n            onChange={(e) => select({\r\n              id: result.id,\r\n              index,\r\n              event: e\r\n            })}\r\n            inputProps={{ 'aria-label': 'primary checkbox' }}\r\n          />\r\n        </Grid>\r\n        <Typography variant=\"subtitle2\" gutterBottom>\r\n          н.п.: {result.city ? result.city.title : '-'}\r\n        </Typography>\r\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n          сохранен: {result.created}\r\n        </Typography>\r\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n          обновлен: {result.lastModified}\r\n        </Typography>\r\n        {/* <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n          {result.city ? result.city.category.label : 'вероятно город стерли из БД'}\r\n        </Typography> */}\r\n        <Grid container item justify=\"space-between\" className=\"card-service-buttons\">\r\n          <IconButton\r\n            className=\"card-button\"\r\n            aria-label=\"delete\"\r\n            onClick={() => edit(result.id)}\r\n            disabled={count > 1}\r\n          >\r\n            <EditIcon fontSize=\"small\" />\r\n          </IconButton>\r\n          <IconButton\r\n            className=\"card-button\"\r\n            aria-label=\"delete\"\r\n            onClick={() => show(result)}\r\n            disabled={count > 1}>\r\n            <ListAltIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Grid>\r\n      </Paper>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default RespondentCard","import React, { Fragment, useState } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport RespondentCard from '../RespondentCard'\r\n\r\nconst DataGrid = ({ data, selectPool, setSelectPool }) => {\r\n  const [lastSelectedIndex, setLastSelectedIndex] = useState()\r\n\r\n  const showDetails = ({ result }) => {\r\n    const oderedResults = result.slice().sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n    const datails = oderedResults.map(obj => {\r\n      if (obj.text !== '') {\r\n        return obj.code + ' ' + obj.text\r\n      }\r\n      return obj.code\r\n    })\r\n    console.log(datails);\r\n  }\r\n\r\n  const handleEdit = () => {\r\n\r\n  }\r\n\r\n\r\n  const handleSelect = (inData) => {\r\n    if (inData.event.nativeEvent.shiftKey) {\r\n      let ar = []\r\n      if (inData.index + 1 > lastSelectedIndex) {\r\n        ar = data.slice(lastSelectedIndex, inData.index + 1)\r\n      } else {\r\n        ar = data.slice(inData.index, lastSelectedIndex)\r\n      }\r\n      const rr = ar.filter(obj => !selectPool.includes(obj.id)).map(obj => obj.id)\r\n      setSelectPool(prevState => ([\r\n        ...prevState,\r\n        ...rr\r\n      ]))\r\n      setLastSelectedIndex(inData.index)\r\n      return\r\n    }\r\n    setLastSelectedIndex(inData.index)\r\n    if (inData.event.nativeEvent.ctrlKey) {\r\n      if (selectPool.includes(inData.id)) {\r\n        const n = selectPool.filter(id => {\r\n          return id !== inData.id\r\n        })\r\n        setSelectPool(n)\r\n        return\r\n      } else {\r\n        setSelectPool(prevState => ([\r\n          ...prevState,\r\n          inData.id\r\n        ]))\r\n        return\r\n      }\r\n    }\r\n    // при простом клике мышью\r\n    if (selectPool.includes(inData.id)) {\r\n      if (selectPool.length > 1) {\r\n        setSelectPool([inData.id])\r\n        return\r\n      }\r\n      setSelectPool([])\r\n    } else {\r\n      setSelectPool([inData.id])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container spacing={3} xs={12}>\r\n        {data.map((result, index) => (\r\n          <Grid item xs={12} sm={6} md={3} lg={2} key={index} >\r\n            <RespondentCard\r\n              result={result}\r\n              index={index}\r\n              show={showDetails}\r\n              edit={handleEdit}\r\n              selected={selectPool.includes(result.id)}\r\n              select={handleSelect}\r\n              count={selectPool.length}\r\n            />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default DataGrid","import React, { Fragment, useState } from 'react'\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Filters = ({ filters, setActiveFilters }) => {\r\n  const [avaiableFilters] = useState({\r\n    age: filters.age,\r\n    cities: filters.cities.map(city => ({\r\n      value: city.id,\r\n      title: city.title,\r\n      category: city.category.label\r\n\r\n    })).sort((a, b) => a.category - b.category),\r\n    intervs: filters.intervievers.map(interv => ({\r\n      value: interv.id,\r\n      title: interv.username,\r\n    })),\r\n    sex: filters.sex,\r\n    status: filters.status\r\n  })\r\n  const [newFilter, setNewFilters] = useState(null)\r\n  const [updated, setUpdated] = useState(false)\r\n\r\n  // ФИЛЬТРЫ\r\n  const handleDataChange = (e) => {\r\n    const RegExp = /(\\d{4})-(\\d{2})-(\\d{2})/\r\n    const date = e.target.value\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      date: e.target.value.replace(RegExp, '$3.$2.$1'),\r\n      shownDate: date\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const cleareDate = () => {\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      date: null,\r\n      shownDate: null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleAgeChange = (_, values) => {\r\n    const ages = values.map(age => age.value)\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      ages: ages.length ? ages : null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleSexChange = (_, value) => {\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      sex: value ? value.value : null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleCityChange = (_, values) => {\r\n    const ct = values.map(city => city.value)\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      cities: ct.length ? ct : null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleInterviewersChange = (_, values) => {\r\n    const intervs = values.map(interv => interv.value)\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      intervs: intervs.length ? intervs : null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleStatusChange = (_, value) => {\r\n    setNewFilters(prevState => ({\r\n      ...prevState,\r\n      status: value ? value.value : null\r\n    }))\r\n    setUpdated(true)\r\n  }\r\n\r\n  const handleFilter = () => {\r\n    setActiveFilters(newFilter)\r\n    setUpdated(false)\r\n  }\r\n\r\n  const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\n  const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\n  if (!avaiableFilters) return <p></p>\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <TextField\r\n            style={{ width: '100%' }}\r\n            id=\"date\"\r\n            type=\"date\"\r\n            variant=\"outlined\"\r\n            value={newFilter ? newFilter.shownDate ? newFilter.shownDate : '' : ''}\r\n            onChange={handleDataChange}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  {true ?\r\n                    <Tooltip title=\"Очистить\">\r\n                      <ClearIcon style={{ cursor: \"pointer\" }}\r\n                        onClick={cleareDate}\r\n                      />\r\n                    </Tooltip>\r\n                    :\r\n                    \"\"\r\n                  }\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <Autocomplete\r\n            multiple\r\n            limitTags={1}\r\n            options={avaiableFilters.age}\r\n            disableCloseOnSelect\r\n            clearOnEscape\r\n            onChange={handleAgeChange}\r\n            noOptionsText={\"Опции не настроены\"}\r\n            getOptionLabel={(option) => option.title}\r\n            renderOption={(option, { selected }) => (\r\n              <React.Fragment>\r\n                <Checkbox\r\n                  icon={icon}\r\n                  checkedIcon={checkedIcon}\r\n                  style={{ marginRight: 8 }}\r\n                  checked={selected}\r\n                />\r\n                {option.title}\r\n              </React.Fragment>\r\n            )}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label=\"Возраст\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <Autocomplete\r\n            options={avaiableFilters.sex}\r\n            onChange={handleSexChange}\r\n            noOptionsText={\"Опции не настроены\"}\r\n            getOptionLabel={(option) => option.title}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label=\"Пол\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <Autocomplete\r\n            multiple\r\n            limitTags={1}\r\n            options={avaiableFilters.cities}\r\n            groupBy={(option) => option.category}\r\n            disableCloseOnSelect\r\n            clearOnEscape\r\n            onChange={handleCityChange}\r\n            noOptionsText={\"Опции не настроены\"}\r\n            getOptionLabel={(option) => option.title}\r\n            renderOption={(option, { selected }) => (\r\n              <React.Fragment>\r\n                <Checkbox\r\n                  icon={icon}\r\n                  checkedIcon={checkedIcon}\r\n                  style={{ marginRight: 8 }}\r\n                  checked={selected}\r\n                />\r\n                {option.title}\r\n              </React.Fragment>\r\n            )}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label=\"Город\"\r\n              />\r\n            )}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <Autocomplete\r\n            multiple\r\n            limitTags={1}\r\n            options={avaiableFilters.intervs}\r\n            disableCloseOnSelect\r\n            clearOnEscape\r\n            onChange={handleInterviewersChange}\r\n            noOptionsText={\"Опции не настроены\"}\r\n            getOptionLabel={(option) => option.title}\r\n            renderOption={(option, { selected }) => (\r\n              <React.Fragment>\r\n                <Checkbox\r\n                  icon={icon}\r\n                  checkedIcon={checkedIcon}\r\n                  style={{ marginRight: 8 }}\r\n                  checked={selected}\r\n                />\r\n                {option.title}\r\n              </React.Fragment>\r\n            )}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label=\"Интервьюер\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3} lg={3}>\r\n          <Autocomplete\r\n            options={avaiableFilters.status}\r\n            onChange={handleStatusChange}\r\n            noOptionsText={\"Опции не настроены\"}\r\n            getOptionLabel={(option) => option.title}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label=\"Статус\" />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item container xs={12} sm={6} md={3} lg={3} justify=\"flex-start\">\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleFilter}\r\n            disabled={!updated}\r\n          >\r\n            применить\r\n            </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Filters","import React, { useState } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport EmojiPeopleIcon from '@material-ui/icons/EmojiPeople';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\nconst ServiceIcons = ({ answer }) => {\r\n  const edit = (\r\n    <Tooltip title=\"Свободный ответ\">\r\n      <EditIcon />\r\n    </Tooltip>\r\n  )\r\n  const difficult = (\r\n    <Tooltip title=\"Затрудняюсь ответить\">\r\n      <EmojiPeopleIcon />\r\n    </Tooltip>\r\n  )\r\n  const unique = (\r\n    <Tooltip title=\"Уникальный ответ\">\r\n      <FlashOnIcon />\r\n    </Tooltip>\r\n  )\r\n  let r = []\r\n  if (answer.difficult) {\r\n    r.push(difficult)\r\n  }\r\n  if (answer.freeAnswer) {\r\n    r.push(edit)\r\n  }\r\n  if (answer.unique) {\r\n    r.push(unique)\r\n  }\r\n  return r\r\n}\r\n\r\nconst AnswerCard = ({ answer, index, pool, totalAnswers }) => {\r\n  const [checked, setChecked] = useState(false)\r\n\r\n  const CountR = () => {\r\n    let count = null\r\n    if (answer.results.length) {\r\n      const len = answer.results.length\r\n      for (let i = 0; i < len; i++) {\r\n        if (pool.includes(answer.results[i].respondent.id)) {\r\n          count++\r\n          setChecked(true)\r\n        }\r\n      }\r\n      return count ? (count / totalAnswers * 100).toFixed(1) : null\r\n    }\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={answer.disabled ? \"answer-card invisible\" : \"answer-card\"}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Box m={1}>\r\n          <span className=\"answer-number\">{index + 1}.</span>\r\n          <span className=\"devider\"> </span>\r\n          <span className=\"answer-code\">{answer.code}</span>\r\n          <span className=\"devider\"> - </span>\r\n          <span className=\"answer-title\">{answer.title}</span>\r\n          <span className=\"answer-extend\"></span>\r\n        </Box>\r\n        <Box m={1}>\r\n          <ServiceIcons answer={answer} />\r\n          <CountR />\r\n          {checked && <CheckIcon />}\r\n        </Box>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AnswerCard","import React, { useEffect, useState } from 'react'\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport AnswerCard from '../AnswersCard'\r\n\r\nconst QuestionCard = ({ question, index, pool }) => {\r\n  const [count, setCount] = useState(0)\r\n  useEffect(() => {\r\n    let totalResults = 0\r\n    for (let i = 0; i < question.answers.length; i++) {\r\n      if (question.answers[i].results.length) {\r\n        for (let j = 0; j < question.answers[i].results.length; j++) {\r\n          if (pool.includes(question.answers[i].results[j].respondent.id)) {\r\n            totalResults++\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setCount(totalResults)\r\n  }, [])\r\n\r\n\r\n\r\n  return (\r\n    <Card className=\"question-card\">\r\n      <CardContent>\r\n        <div className=\"question-header\">\r\n          <Tooltip title=\"Макс. кол-во ответов\">\r\n            <span className=\"question-limit\">{question.limit}</span>\r\n          </Tooltip>\r\n          <span className=\"question-number\">{index + 1}. </span>\r\n          <span className=\"question-title\" color=\"textSecondary\" gutterBottom>\r\n            {question.title}\r\n          </span>\r\n        </div>\r\n        {question.answers.map((answer, index) => (\r\n          <AnswerCard key={index} answer={answer} index={index} pool={pool} totalAnswers={count} />\r\n        ))}\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default QuestionCard","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nimport { useTheme } from '@material-ui/core/styles';\r\n\r\nimport QuestionCard from '../../components/QuestionCard'\r\n\r\nconst BatchUpdate = ({ data, selectPool, open, close }) => {\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n  if (!open) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        fullScreen={fullScreen}\r\n        maxWidth={\"md\"}\r\n        open={open}\r\n        onClose={close}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"responsive-dialog-title\">{\"Обновить результаты\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {data.poll.questions.map((question, index) => (\r\n              <QuestionCard index={index} key={question.id} question={question} pool={selectPool} />\r\n            ))}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={close} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={close} color=\"primary\" autoFocus>\r\n            Сохранить\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BatchUpdate","import React, { Fragment, useEffect, useRef, useState } from 'react'\r\nimport Chart from 'chart.js'\r\n\r\nconst BarChart = ({ question }) => {\r\n\r\n  const [data] = useState({\r\n    labels: question.answers.map((_, index) => index + 1 + ''),\r\n    set: [\r\n      {\r\n        label: 'Кол-во',\r\n        data: question.answers.map(answer => answer.results.length)\r\n      }\r\n    ]\r\n  })\r\n\r\n  const chartRef = useRef()\r\n  useEffect(() => {\r\n    const myChartRef = chartRef.current.getContext(\"2d\")\r\n\r\n    new Chart(myChartRef, {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: data.labels,\r\n        datasets: data.set\r\n      },\r\n      options: {\r\n        showLines: false, // disable for all datasets\r\n        animation: {\r\n          duration: 0 // general animation time\r\n        },\r\n        hover: {\r\n          animationDuration: 0 // duration of animations when hovering an item\r\n        },\r\n        responsiveAnimationDuration: 0, // animation duration after a resize\r\n        legend: {\r\n          display: false,\r\n          labels: {\r\n            // This more specific font property overrides the global property\r\n            fontColor: 'black',\r\n            fontSize: 16\r\n          }\r\n        },\r\n        scales: {\r\n          yAxes: [{\r\n            ticks: {\r\n              beginAtZero: true\r\n            }\r\n          }]\r\n        }\r\n      }\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <canvas ref={chartRef} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default BarChart","import React, { Fragment, useState } from 'react'\r\n\r\nconst LinearTable = ({ index, question }) => {\r\n  const [count] = useState(\r\n    question.answers.reduce((acum, curr) => {\r\n      return acum + curr.results.length\r\n    }, 0)\r\n  )\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"linear-table\">\r\n        <table >\r\n          <tr>\r\n            <th>&nbsp;</th><th>Ответов</th><th>%</th>\r\n          </tr>\r\n          {question.answers.map((answer, index) =>\r\n            <tr>\r\n              <td className=\"answer-title\">\r\n                <strong>{index + 1}</strong>. - <strong>{answer.code}</strong> {answer.title}</td><td>{answer.results.length}</td>\r\n              <td>\r\n                {count ?\r\n                  (answer.results.length / count * 100).toFixed(1) :\r\n                  '-'\r\n                }\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </table>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default LinearTable","import React, { Fragment, useEffect, useState } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\n\r\nimport BarChart from '../../components/BarChart'\r\nimport LinearTable from '../../components/LinearTable'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst BatchCharts = ({ data, selectPool, open, close }) => {\r\n  const classes = useStyles();\r\n  const [selectedData, setSelectedData] = useState()\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      const newQuestions = data.poll.questions.map(question => {\r\n        if (selectPool.length) {\r\n          const newAnswer = question.answers.map(answer => {\r\n            if (answer.results.length) {\r\n              const newResults = answer.results.filter(result =>\r\n                selectPool.includes(result.respondent.id)\r\n              )\r\n              return { ...answer, results: newResults }\r\n            }\r\n            return answer\r\n          })\r\n          return { ...question, answers: newAnswer }\r\n        }\r\n        return question\r\n      })\r\n      const dd = {\r\n        ...data.poll,\r\n        questions: newQuestions\r\n      }\r\n      setSelectedData(dd)\r\n    }\r\n  }, [open])\r\n\r\n  if (!open) {\r\n    return null\r\n  }\r\n\r\n  if (!selectedData) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <Dialog fullScreen open={open} onClose={close} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={close} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Графики\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container className=\"batch-linear\">\r\n          <Grid item container>\r\n            {selectedData.questions.map((question, index) => (\r\n              <Fragment>\r\n                <Grid xs={12} style={{ textAlign: 'center' }}>\r\n                  <p className=\"question-title\">{index + 1}. {question.title}</p>\r\n                </Grid>\r\n                <Grid xs={12} md={6}>\r\n                  <LinearTable index={index} key={question.id} question={question} />\r\n                </Grid>\r\n                <Grid xs={12} md={6}>\r\n                  <BarChart key={question.id} question={question} />\r\n                </Grid>\r\n              </Fragment>\r\n            ))}\r\n          </Grid>\r\n        </Container>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\nexport default BatchCharts","import { gql } from '@apollo/client'\r\n\r\nexport const CITY_SAVE_MUTATION = gql`\r\nmutation saveNewCity($title: String!, $population: Int!, $category: String!) {\r\n  newCity(title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category\r\n    population\r\n  }\r\n}\r\n`\r\n\r\nexport const CITY_EDIT_SAVE = gql`\r\nmutation saveCityEdit($id: String!, $title: String!, $population: Int!, $category: String!) {\r\n  cityEdit(id: $id, title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category\r\n    population\r\n  }\r\n}\r\n`\r\nexport const DELETE_RESULTS = gql`\r\nmutation ($results: [String]!) {\r\n  deleteResults(results: $results) {\r\n    id\r\n  }\r\n}\r\n`","import React, { Fragment, useEffect, useState } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport Box from '@material-ui/core/Box';\r\nimport DynamicFeedIcon from '@material-ui/icons/DynamicFeed';\r\nimport CheckCircleOutlineOutlinedIcon from '@material-ui/icons/CheckCircleOutlineOutlined';\r\n\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog'\r\nimport DataGrid from '../../components/DataGrid'\r\nimport Filters from '../../components/Filters'\r\nimport BatchUpdate from '../../components/BatchUpdate'\r\nimport BatchCharts from '../../components/BatchCharts'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_POLL_RESULTS, GET_FILTER_SELECTS } from './queries'\r\nimport { DELETE_RESULTS } from './mutations'\r\nimport { Tooltip } from '@material-ui/core';\r\n\r\nconst OverallResults = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n\r\n  const [delOpen, setDelOpen] = useState(false)\r\n  const [activeResults, setActiveResults] = useState()\r\n  const [activeFilters, setActiveFilters] = useState()\r\n  const [selectPool, setSelectPool] = useState([])\r\n  const [batchOpen, setBatchOpen] = useState(false)\r\n  const [batchGrOpen, setBatchGrOpen] = useState(false)\r\n\r\n  const {\r\n    data: pollResults,\r\n    loading: pollResultsLoading,\r\n    error: pollResultsError\r\n  } = useQuery(GET_POLL_RESULTS, {\r\n    variables: {\r\n      id\r\n    },\r\n    onCompleted: () => {\r\n      setActiveResults(pollResults.poll.results)\r\n    }\r\n  });\r\n\r\n  const {\r\n    data: filtersResults,\r\n    loading: filtersResultsLoading,\r\n    error: filtersResultsError\r\n  } = useQuery(GET_FILTER_SELECTS)\r\n\r\n  const [\r\n    deleteResult,\r\n    { loading: loadOnDelete }\r\n  ] = useMutation(DELETE_RESULTS, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Удалить не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data }) => {\r\n      const deletedPool = data.deleteResults.map(del => del.id)\r\n      setActiveResults(activeResults.filter(result => !deletedPool.includes(result.id)))\r\n      console.log(cache.data.data);\r\n      cache.modify({\r\n        fields: {\r\n          pollResults(existingRefs, { readField }) {\r\n            console.log(existingRefs);\r\n            return existingRefs.filter(respRef => !deletedPool.includes(readField('id', respRef)))\r\n          }\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n  // процесс фильтрации данных в зависимости от выбора пользователя\r\n  useEffect(() => {\r\n    if (activeFilters) {\r\n      const results = pollResults.poll.results\r\n      const newResult = results.filter(result => {\r\n        return activeFilters.cities ? result.city ? activeFilters.cities.includes(result.city.id) : true : true\r\n      }).filter(result => {\r\n        return activeFilters.intervs ? result.user ? activeFilters.intervs.includes(result.user.id) : true : true\r\n      }).filter(result => {\r\n        return activeFilters.date ? result.lastModified ? activeFilters.date == result.lastModified : true : true\r\n      })\r\n      const newSelectPool = selectPool.filter(\r\n        selectId => {\r\n          const len = newResult.length\r\n          for (let i = 0; i < len; i++) {\r\n            if (selectId === newResult[i].id) return true\r\n          }\r\n          return false\r\n        })\r\n      setSelectPool(newSelectPool)\r\n      setActiveResults(newResult)\r\n    }\r\n  }, [activeFilters])\r\n\r\n  if (pollResultsLoading || !activeResults || filtersResultsLoading) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (pollResultsError || filtersResultsError) {\r\n    console.log(JSON.stringify(pollResultsError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (loadOnDelete) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  const handleResultsExport = () => {\r\n    const regExp = /,/gi\r\n    const resultsPool = activeResults.filter(result =>\r\n      selectPool.includes(result.id)\r\n    ).map(obj => obj.result)\r\n    const lResults = resultsPool.length\r\n    let allResults = ''\r\n    for (let i = 0; i < lResults; i++) {\r\n      const oderedResults = resultsPool[i].slice().sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n      const details = oderedResults.map(obj => {\r\n        if (obj.text !== '') {\r\n          return obj.code + ' ' + obj.text.replaceAll(regExp, ';')\r\n        }\r\n        return obj.code\r\n      })\r\n      // кусок ниже, чтобы вставить перенос каретки при 180 символах и более, для Вити М.\r\n      const rLength = details.length\r\n      let tempResult = ''\r\n      let counter = 0\r\n      for (let j = 0; j < rLength; j++) {\r\n        tempResult += details[j] + ','\r\n        if (tempResult.length - counter > 160) {\r\n          tempResult += '\\n'\r\n          counter = tempResult.length\r\n        }\r\n      }\r\n      allResults += tempResult + ',999' + '\\n'\r\n    }\r\n    downloadIt(allResults)\r\n  }\r\n\r\n  const downloadIt = (data) => {\r\n    const element = document.createElement('a')\r\n    const file = new Blob([data], { type: 'text/plain' });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"myFile.txt\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  }\r\n\r\n  const handleChartsData = () => {\r\n\r\n  }\r\n\r\n  const handleResultsBatchUpdate = () => {\r\n\r\n  }\r\n\r\n  const deleteComplitely = () => {\r\n    deleteResult({\r\n      variables: {\r\n        results: selectPool\r\n      },\r\n    })\r\n    setDelOpen(false)\r\n    setSelectPool([])\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <BatchCharts\r\n        data={pollResults}\r\n        selectPool={selectPool}\r\n        open={batchGrOpen}\r\n        close={() => setBatchGrOpen(false)} />\r\n      <BatchUpdate\r\n        data={pollResults}\r\n        selectPool={selectPool}\r\n        open={batchOpen}\r\n        close={() => setBatchOpen(false)} />\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <ConfirmDialog\r\n        open={delOpen}\r\n        confirm={deleteComplitely}\r\n        close={() => setDelOpen(false)}\r\n        buttons={{\r\n          close: \"Отмена\",\r\n          confirm: \"Удалить\"\r\n        }}\r\n        data={\r\n          {\r\n            title: 'Удалить выбранные результаты?',\r\n            text: 'Внимание! Выбранные результаты будут уничтожены безвозвратно. Будьте внимательны!'\r\n          }\r\n        }\r\n      />\r\n      <div className=\"result-service-zone\">\r\n        <Grid container justify=\"space-between\" className=\"service-buttons\">\r\n          <Box className=\"main-buttons\">\r\n            <Tooltip title=\"Выгрузить\">\r\n              <IconButton\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                onClick={handleResultsExport}\r\n                disabled={!selectPool.length}\r\n              >\r\n                <PublishIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Графики\">\r\n              <IconButton\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                onClick={() => setBatchGrOpen(true)}\r\n                disabled={!selectPool.length}\r\n              >\r\n                <EqualizerIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Обновить\">\r\n              <IconButton\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                onClick={() => setBatchOpen(true)}\r\n                disabled={!selectPool.length}\r\n              >\r\n                <DynamicFeedIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Изменить статус\">\r\n              <IconButton\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                onClick={() => setBatchOpen(true)}\r\n                disabled={!selectPool.length}\r\n              >\r\n                <CheckCircleOutlineOutlinedIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Удалить\">\r\n              <IconButton\r\n                color=\"secondary\"\r\n                component=\"span\"\r\n                onClick={() => setDelOpen(true)}\r\n                disabled={!selectPool.length}\r\n              >\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Box>\r\n          <Grid item container xs={12} sm={6} md={3} lg={3} justify=\"flex-end\">\r\n            <Box m={1}>\r\n              <a href=\"\">Есть дубли</a>\r\n            </Box>\r\n            <Box m={1}>\r\n              <a href=\"\">Есть проблемы</a>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Filters filters={filtersResults} setActiveFilters={setActiveFilters} />\r\n        <DataGrid data={activeResults} selectPool={selectPool} setSelectPool={setSelectPool} />\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n\r\nexport default OverallResults","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_WITH_RESULTS = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      questions {\r\n        id\r\n        title\r\n        order\r\n        limit\r\n        type\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n          results {\r\n            id\r\n            code\r\n            text\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n`","import React, { Fragment } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\n\r\nimport BarChart from '../../components/BarChart'\r\nimport LinearTable from '../../components/LinearTable'\r\n\r\nimport { useQuery } from '@apollo/client'\r\n\r\nimport { GET_POLL_WITH_RESULTS } from './queries'\r\n\r\nconst LinearDistribution = ({ id }) => {\r\n\r\n  const {\r\n    data: pollResults,\r\n    loading: pollResultsLoading,\r\n    error: pollResultsError\r\n  } = useQuery(GET_POLL_WITH_RESULTS, {\r\n    variables: {\r\n      id\r\n    }\r\n  });\r\n\r\n  if (pollResultsLoading) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (pollResultsError) {\r\n    console.log(JSON.stringify(pollResultsError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Линейное распределение ответов\r\n      </Typography>\r\n      <Grid item container className=\"linear-distribution\">\r\n        {pollResults.poll.questions.map((question, index) => (\r\n          <Fragment>\r\n            <Grid xs={12}>\r\n              <p className=\"question-title\">{index + 1}. {question.title}</p>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n              <LinearTable index={index} key={question.id} question={question} />\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n              <BarChart key={question.id} question={question} />\r\n            </Grid>\r\n            <p></p>\r\n          </Fragment>\r\n        ))}\r\n      </Grid>\r\n\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default LinearDistribution","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n          results {\r\n            id\r\n            code\r\n            text\r\n          }\r\n        }\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useEffect, useState } from 'react'\r\nimport { mainUrl } from \"../../../../mainconfig\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\n\r\nimport LinearTable from '../../components/LinearTable'\r\nimport BarChart from '../../components/BarChart'\r\n\r\nimport { parseIni, normalizeLogic } from '../../../../modules/PollDrive/lib/utils'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_POLL_DATA } from './queries'\r\n\r\nconst BatchInput = ({ id }) => {\r\n  const [dataPool, setDataPool] = useState(false)\r\n  const [logic, setLogic] = useState(false)\r\n  const [processing, setProcessing] = useState(false)\r\n\r\n  const [displayData, setDisplayData] = useState(false)\r\n\r\n  useEffect(() => {\r\n\r\n    if (dataPool) {\r\n      const poll = pollData ? pollData.poll : null\r\n      if (poll) {\r\n        const questions = poll.questions\r\n        const resultPoolLength = dataPool.length\r\n        // пройтись по невидимым сперва\r\n\r\n        const newQuestionsPool = questions.map(question => {\r\n          const newAnswersPool = question.answers.map(answer => {\r\n            let temp = [...answer.results]\r\n            for (let i = 0; i < resultPoolLength; i++) {\r\n              if (dataPool[i].includes(answer.code)) {\r\n                temp.push({\r\n                  code: answer.code,\r\n                  text: ''\r\n                })\r\n              }\r\n            }\r\n            return {\r\n              ...answer,\r\n              results: temp\r\n            }\r\n          })\r\n          return {\r\n            ...question,\r\n            answers: newAnswersPool\r\n          }\r\n        })\r\n        setDisplayData(newQuestionsPool)\r\n        console.log(newQuestionsPool);\r\n      }\r\n    }\r\n  }, [dataPool])\r\n\r\n  const {\r\n    data: pollData,\r\n    loading: pollDataLoading,\r\n    error: pollDataError\r\n  } = useQuery(GET_POLL_DATA, {\r\n    variables: {\r\n      id\r\n    },\r\n    onCompleted: () => {\r\n      handleConfigFile(pollData.poll.logic.path)\r\n      console.log(pollData);\r\n    }\r\n  });\r\n\r\n  const handleConfigFile = (filePath) => {\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const logic = parseIni(text)\r\n        // Нормализация ЛОГИКИ - здесь формируется ЛОГИКА опроса, на основании конфиг файла !!!\r\n        const normLogic = normalizeLogic(logic)\r\n        setLogic(normLogic)\r\n      })\r\n  }\r\n\r\n  const handleWarInput = (e) => {\r\n    e.preventDefault()\r\n    if (!e.target.files[0]) return\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        // + удаляем перенос строк\r\n        const oprTextRaw = reader.result.replace(/\\r?\\n/g, \"\")\r\n        const oprArrayRaw = oprTextRaw.split(',999')\r\n        const oprArray = oprArrayRaw.filter(arr => arr.length)\r\n        const aLength = oprArray.length\r\n        let splitedCodesArrays = []\r\n        for (let i = 0; i < aLength; i++) {\r\n          const tempAr = oprArray[i].split(',')\r\n          const tempLength = tempAr.length\r\n          let normTemp = []\r\n          for (let j = 0; j < tempLength; j++) {\r\n            const atomData = tempAr[j]\r\n            normTemp.push(atomData.trim())\r\n          }\r\n          splitedCodesArrays.push(normTemp)\r\n        }\r\n        setDataPool(splitedCodesArrays)\r\n        setProcessing(false)\r\n      }\r\n    }\r\n    reader.readAsText(file);\r\n    e.target.value = \"\"\r\n  }\r\n\r\n  if (pollDataLoading) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (pollDataError) {\r\n    console.log(JSON.stringify(pollDataError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (processing) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Loading />\r\n      <p> Пакетный ввод данных</p>\r\n      <Grid container spacing={3} xs={12}>\r\n        <Grid item xs={12}>\r\n          <Box>\r\n            <label>Подгрузите файл с результатами</label>\r\n            <br />\r\n            <input\r\n              type=\"file\"\r\n              onInput={handleWarInput}\r\n            />\r\n          </Box>\r\n        </Grid>\r\n        {displayData &&\r\n          displayData.map((question, index) => (\r\n            <Fragment>\r\n              <Grid xs={12} md={6}>\r\n                <LinearTable index={index} key={question.id} question={question} />\r\n                <p></p>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <BarChart question={question} />\r\n                <p></p>\r\n              </Grid>\r\n            </Fragment>\r\n          ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default BatchInput","import React from 'react'\r\n\r\nimport AdaptiveTabs from '../../components/AdaptiveTabs'\r\n\r\nimport Generation from './containers/Generation'\r\nimport OverallResults from './containers/OverallResults'\r\nimport LinearDistibution from './containers/LinearDistribution'\r\nimport BatchInput from './containers/BatchInput'\r\n\r\nconst PollResults = ({ id }) => {\r\n  const data = [\r\n    {\r\n      label: 'Общие',\r\n      component: <OverallResults id={id} />\r\n    },\r\n    {\r\n      label: 'Линейка',\r\n      component: <LinearDistibution id={id} />\r\n    },\r\n    {\r\n      label: 'Пакетный',\r\n      component: <BatchInput id={id} />\r\n    },\r\n    {\r\n      label: 'Тестирование',\r\n      component: <Generation id={id} />\r\n    }\r\n  ]\r\n  return (\r\n    <AdaptiveTabs data={data} />\r\n  )\r\n\r\n}\r\n\r\nexport default PollResults","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollResults from '../modules/PollResults'\r\n\r\nconst Results = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Результаты ` + code} />\r\n      <div>\r\n        <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n          <PollResults id={id} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Results","function testXml(xmlString) {\r\n  var parser = new DOMParser();\r\n  var docError = parser.parseFromString('INVALID', 'text/xml');\r\n  var parsererrorNS = docError.getElementsByTagName(\"parsererror\")[0].namespaceURI;\r\n  var doc = parser.parseFromString(xmlString, 'text/xml');\r\n  if (doc.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0) {\r\n    return false\r\n  }\r\n  return doc;\r\n}\r\n\r\nconst xmlparser = (xmlString) => {\r\n  const xml = testXml(xmlString)\r\n  if (xml) {\r\n    const results = xml.getElementsByTagName('a')\r\n    const lResults = results.length\r\n    let outData = []\r\n    for (let i = 0; i < lResults; i++) {\r\n      let resultData = {\r\n        unit: results[i].getAttribute('usr_intrv'),\r\n        date: results[i].getAttribute('date_intrv'),\r\n        lan: results[i].getAttribute('start-lan'),\r\n        lon: results[i].getAttribute('start-lon'),\r\n      }\r\n      const questions = results[i].getElementsByTagName('v')\r\n      const lQuestions = questions.length\r\n      let answersPool = []\r\n      for (let i = 0; i < lQuestions; i++) {\r\n        const answers = questions[i].getElementsByTagName('o')\r\n        const lAnswers = answers.length\r\n        for (let i = 0; i < lAnswers; i++) {\r\n          const code = answers[i].getAttribute('c').padStart(3, \"0\")\r\n          answersPool.push(code)\r\n        }\r\n        resultData.answers = answersPool\r\n      }\r\n      outData.push(resultData)\r\n    }\r\n    return outData\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default xmlparser","import React, { Fragment, useState } from 'react'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport xmlparser from '../../lib/xmlparser'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst ParchaXmlAnalyzer = () => {\r\n  const [parchaData, setParchaData] = useState(null)\r\n  const [processing, setProcessing] = useState(false)\r\n  const classes = useStyles();\r\n\r\n  const handleInput = (e) => {\r\n    e.preventDefault()\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        const xmlText = reader.result\r\n        const xml = xmlparser(xmlText)\r\n        if (xml) {\r\n          setParchaData(xml)\r\n          setProcessing(false)\r\n          return\r\n        } else {\r\n          setProcessing(false)\r\n          console.log('Неправильный формат XML');\r\n          return\r\n        }\r\n      }\r\n      reader.readAsText(file);\r\n    }\r\n  }\r\n\r\n  const UnitInfo = ({ data }) => {\r\n    console.log(data);\r\n    if (data.lan !== '' || data.lon !== '') {\r\n      return data.answers.toString() + ',999'\r\n    } else {\r\n      return data.answers.toString() + ',999' + '-'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Backdrop className={classes.backdrop} open={processing} >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <input\r\n        type=\"file\"\r\n        onInput={handleInput}\r\n      />\r\n      <div className=\"parcha-results\">\r\n        {parchaData ?\r\n          parchaData.map((result, i) => (\r\n            <div>\r\n              { <UnitInfo data={result} />}\r\n            </div>\r\n          )) : <p>Подгрузите данные</p>\r\n        }\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ParchaXmlAnalyzer","import React from 'react'\r\n\r\nimport AdaptiveTabs from '../../components/AdaptiveTabs'\r\n\r\nimport ParchaXmlAnalyzer from './components/ParchaXmlAnalyzer'\r\n\r\nconst DataAnalyzer = () => {\r\n  const data = [\r\n    {\r\n      label: 'Парча',\r\n      component: <ParchaXmlAnalyzer />\r\n    }\r\n  ]\r\n  return (\r\n    <AdaptiveTabs data={data} />\r\n  )\r\n}\r\n\r\nexport default DataAnalyzer","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container'\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport DataAnalyzer from '../modules/DataAnalyzer'\r\n\r\nconst Analyze = () => {\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Анализатор данных`} />\r\n      <div style={{ paddingTop: '10px' }}>\r\n        <Container maxWidth=\"xl\">\r\n          <DataAnalyzer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Analyze","import React, { Fragment } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport SettingBar from '../components/SettingBar'\r\n// import Test from '../containers/Test'\r\n\r\n// const Tester = observer(\r\nconst TesterPage = () => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title='Тестирование инерфейса' />\r\n      <Container maxWidth=\"lg\">\r\n        {/* <Test /> */}\r\n      </Container>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default TesterPage","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questionsCount\r\n      answersCount\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        topic {\r\n          id\r\n          title\r\n        }\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n        }\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\nimport { mainUrl } from '../../../../mainconfig'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport EmojiPeopleIcon from '@material-ui/icons/EmojiPeople';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\n\r\nimport { parseIni, normalizeLogic } from '../../../PollDrive/lib/utils'\r\nimport { useQuery } from '@apollo/client'\r\n\r\nimport { GET_POLL_DATA } from \"./queries\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  popover: {\r\n    pointerEvents: 'none',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst ServiceIcons = ({ answer }) => {\r\n  const edit = (\r\n    <Tooltip key={1} title=\"Свободный ответ\">\r\n      <EditIcon />\r\n    </Tooltip>\r\n  )\r\n  const difficult = (\r\n    <Tooltip key={2} title=\"Затрудняюсь ответить\">\r\n      <EmojiPeopleIcon />\r\n    </Tooltip>\r\n  )\r\n  const unique = (\r\n    <Tooltip key={3} title=\"Уникальный ответ\">\r\n      <FlashOnIcon />\r\n    </Tooltip>\r\n  )\r\n  let r = []\r\n  if (answer.difficult) {\r\n    r.push(difficult)\r\n  }\r\n  if (answer.freeAnswer) {\r\n    r.push(edit)\r\n  }\r\n  if (answer.unique) {\r\n    r.push(unique)\r\n  }\r\n  return r\r\n}\r\n\r\nconst AnswerCard = ({ answer, index }) => {\r\n  return (\r\n    <div className={answer.disabled ? \"answer-card invisible\" : \"answer-card\"}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Box m={1}>\r\n          <span className=\"answer-number\">{index + 1}.</span>\r\n          <span className=\"devider\"> </span>\r\n          <span className=\"answer-code\">{answer.code}</span>\r\n          <span className=\"devider\"> - </span>\r\n          <span className=\"answer-title\">{answer.title}</span>\r\n\r\n        </Box>\r\n        <Box m={1}>\r\n          <span>\r\n            <ServiceIcons answer={answer} />\r\n          </span>\r\n        </Box>\r\n      </Grid>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst QuestionTopic = ({ topic }) => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const handlePopoverOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handlePopoverClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const open = Boolean(anchorEl);\r\n\r\n  return (\r\n    <Fragment>\r\n      <InfoOutlinedIcon\r\n        className=\"info-icon\"\r\n        onMouseEnter={handlePopoverOpen}\r\n        onMouseLeave={handlePopoverClose}\r\n      />\r\n      <Popover\r\n        className={classes.popover}\r\n        classes={{\r\n          paper: classes.paper,\r\n        }}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left',\r\n        }}\r\n        onClose={handlePopoverClose}\r\n        disableRestoreFocus\r\n      >\r\n        <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n          Тема: {topic.title}\r\n        </Typography>\r\n      </Popover>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nconst QuestionCard = ({ question, index }) => {\r\n  return (\r\n    <Card className=\"question-card\">\r\n      <CardContent>\r\n        <div className=\"question-header\">\r\n          <Tooltip title=\"Макс. кол-во ответов\">\r\n            <span className=\"question-limit\">{question.limit}</span>\r\n          </Tooltip>\r\n          <span className=\"question-number\">{index + 1}.</span>\r\n          <span className=\"question-title\" color=\"textSecondary\">\r\n            {question.title}\r\n            <QuestionTopic topic={question.topic} />\r\n          </span>\r\n        </div>\r\n        {question.answers.map((answer, index) => (\r\n          <AnswerCard key={index} answer={answer} index={index} />\r\n        ))}\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst CommonSetting = ({ id }) => {\r\n  const [ready, setReady] = useState(false)\r\n  const [questions, setQuestions] = useState()\r\n  const {\r\n    loading,\r\n    error,\r\n    data: pollData\r\n  } = useQuery(GET_POLL_DATA, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      handleConfigFileAndUpdateCache(pollData.poll)\r\n    }\r\n  })\r\n\r\n\r\n  const handleConfigFileAndUpdateCache = (poll) => {\r\n    const filePath = poll.logic.path\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const normalizedLogic = normalizeLogic(parseIni(text))\r\n        const updatedQuestions = modulateQuestionsWithLogic(normalizedLogic)\r\n        setQuestions(updatedQuestions.sort((a, b) => (a.order > b.order) ? 1 : -1))\r\n        setReady(true)\r\n      })\r\n  }\r\n\r\n  const modulateQuestionsWithLogic = (logic) => {\r\n    const modQuestions = pollData.poll.questions.map(question => {\r\n      const newAnswers = question.answers.map(answer => {\r\n        let suffix = {}\r\n        if (logic.invisible) {\r\n          if (logic.invisible.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              disabled: true\r\n            }\r\n          }\r\n        }\r\n        if (logic.freeAnswers) {\r\n          if (logic.freeAnswers.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              freeAnswer: true\r\n\r\n            }\r\n          }\r\n        }\r\n        if (logic.unique) {\r\n          if (logic.unique.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              unique: true\r\n            }\r\n          }\r\n        }\r\n        if (logic.difficult) {\r\n          if (logic.difficult.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              difficult: true\r\n            }\r\n          }\r\n        }\r\n        const newAnswer = {\r\n          ...answer,\r\n          ...suffix\r\n        }\r\n        return newAnswer\r\n      })\r\n      const newQuestion = {\r\n        ...question,\r\n        answers: newAnswers,\r\n        ffffuck: true\r\n      }\r\n      return newQuestion\r\n    })\r\n    return modQuestions\r\n  }\r\n\r\n  if (loading || !questions || !ready) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container className=\"common-settings\">\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          <strong>Тема: </strong>{pollData.poll.title}\r\n        </Typography>\r\n        <Grid\r\n          className=\"poll-info\"\r\n          container\r\n          direction=\"row\"\r\n          justify=\"space-between\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Box m={1}>\r\n            <div> Вопросов: {pollData.poll.questionsCount}</div>\r\n          </Box>\r\n          <Box m={1}>\r\n            <div> Ответов: {pollData.poll.answersCount}</div>\r\n          </Box>\r\n        </Grid>\r\n        {questions.map((question, index) => (\r\n          <QuestionCard question={question} key={question.id} index={index} />\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default CommonSetting","import { gql } from '@apollo/client'\r\n\r\nexport const logicQuery = gql`\r\n  query logicQuery($id: ID!) {\r\n    pollLogic(id: $id) {\r\n      id\r\n      path\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const saveConfigChanges = gql`\r\nmutation saveConfigChanges($path: String!, $text: String!) {\r\n  saveConfig(path: $path, text: $text)\r\n}\r\n`","import React, { Fragment, useState, useRef } from 'react'\r\nimport { mainUrl } from '../../../../mainconfig'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Box, Typography } from '@material-ui/core';\r\n\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { logicQuery } from \"./queries\"\r\nimport { saveConfigChanges } from \"./mutations\"\r\nimport { GET_POLL_DATA } from '../../containers/Common/queries'\r\n\r\nconst ConfigEditor = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  const [updated, setUpdated] = useState(false)\r\n  const [config, setConfig] = useState(null)\r\n  const [filePath, setFilePath] = useState(null)\r\n  const textRef = useRef()\r\n  const { loading, error, data } = useQuery(logicQuery, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      handleConfigFile(data.pollLogic.path)\r\n    },\r\n  })\r\n\r\n  const [saveConfig, { loading: configSaveLoading }] = useMutation(saveConfigChanges, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    onCompleted: () => {\r\n      setNoti({\r\n        type: 'success',\r\n        text: 'Конфиг сохранен успешно!'\r\n      })\r\n    },\r\n    refetchQueries: () => [{\r\n      query: GET_POLL_DATA,\r\n      variables: {\r\n        id\r\n      }\r\n    }]\r\n  })\r\n\r\n  const handleConfigFile = (filePath) => {\r\n    setFilePath(filePath)\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        setConfig(text)\r\n      })\r\n  }\r\n\r\n  const handleSave = (e) => {\r\n    saveConfig({\r\n      variables: {\r\n        path: filePath,\r\n        text: textRef.current.value\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleConfigChange = (e) => {\r\n    if (config === e.currentTarget.value) {\r\n      setUpdated(false)\r\n      return\r\n    }\r\n    setUpdated(true)\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (configSaveLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  if (loading || !config) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n\r\n      <Grid item container>\r\n        <Grid item container justify=\"space-between\">\r\n          <Box p={1}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Отображение и настройка конфигурационного файла\r\n            </Typography>\r\n          </Box>\r\n          <Box>\r\n            <Tooltip title=\"Сохранить\">\r\n              <IconButton onClick={handleSave} disabled={!updated}>\r\n                <SaveIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Box>\r\n          <textarea\r\n            ref={textRef}\r\n            defaultValue={config}\r\n            onChange={handleConfigChange}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ConfigEditor","import { gql } from '@apollo/client'\r\n\r\nexport const DELETE_POLL = gql`\r\n  mutation deletePoll($id: ID!) {\r\n    deletePoll(id: $id) {\r\n      title\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_ACTIVE_POLLS } from '../../../PollHome/queries'\r\nimport { DELETE_POLL } from './mutations'\r\n\r\nconst DeletePoll = ({ id, code }) => {\r\n  const history = useHistory();\r\n  const [open, setOpen] = useState(false)\r\n  const [incorrect, setIncorrect] = useState(true)\r\n  const [delPoll, { poll }] = useMutation(DELETE_POLL, {\r\n    onCompleted: () => {\r\n      history.push(\"/\")\r\n    }\r\n  })\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handlePollDel = (id) => {\r\n    delPoll({\r\n      variables: {\r\n        id\r\n      },\r\n      refetchQueries: [{ query: GET_ALL_ACTIVE_POLLS }]\r\n    })\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const text = e.currentTarget.value.toUpperCase()\r\n    e.currentTarget.value = text\r\n    if (text.toUpperCase() === code) {\r\n      setIncorrect(false)\r\n    } else {\r\n      setIncorrect(true)\r\n    }\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    handlePollDel(id)\r\n  }\r\n\r\n  const deleteQuery = () => {\r\n    setOpen(true);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Удаление</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Это действие не может быть отменено.\r\n              Оно приведет к безвозвратному удалению ВСЕХ данных опроса.\r\n            </Typography>\r\n            <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n              Пожалуйста, введите КОД опроса.\r\n            </Typography>\r\n          </DialogContentText>\r\n          <TextField\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Код опроса\"\r\n            type=\"text\"\r\n            fullWidth\r\n            onChange={handleChange}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={handleDelete} color=\"primary\" disabled={incorrect}>\r\n            Удалить\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n        удаление опроса\r\n        </Typography>\r\n      <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n        После удаления ОПРОСА пути назад уже не будет. Пожалуйста, будьте внимательны.\r\n          </Typography>\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={deleteQuery}>\r\n        Удалить опрос\r\n          </Button>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default DeletePoll","import { gql } from '@apollo/client'\r\n\r\nexport const GET_ALL_CITIES_AND_ACTIVE = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      cities {\r\n        id\r\n        title\r\n        population\r\n        category {\r\n          title\r\n        }\r\n      }\r\n    }\r\n    cities {\r\n      id\r\n      title\r\n      category {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const DELETE_CITY_FROM_ACTIVE = gql`\r\n  mutation ($id: ID!, $cities: [String]) {\r\n    deleteCityFromActive(id: $id, cities: $cities) {\r\n      id\r\n      cities {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const SET_ACTIVE_CITIES = gql`\r\n  mutation ($id: ID!, $cities: [String]) {\r\n    setPollCity(id: $id, cities: $cities) {\r\n      id\r\n      cities {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog'\r\n\r\nimport { gql, useApolloClient, useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_CITIES_AND_ACTIVE } from './queries'\r\nimport { SET_ACTIVE_CITIES, DELETE_CITY_FROM_ACTIVE } from './mutations'\r\n\r\nconst CitiesEditor = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  // const client = useApolloClient();\r\n  // const { currentUser } = client.readQuery({\r\n  //   query: gql`\r\n  //   query {\r\n  //     currentUser {\r\n  //       id\r\n  //       username\r\n  //     }\r\n  //   }\r\n  //   `,\r\n  // })\r\n  const [clear, setClear] = useState(0)\r\n  const [delId, setDelId] = useState(false)\r\n  const [allCities, setAllCitites] = useState()\r\n  const [availableCities, setAvailableCities] = useState()\r\n  const [selected, setSelected] = useState([])\r\n  const {\r\n    data: citiesData,\r\n    loading: citiesLoading,\r\n    error: cititesError\r\n  } = useQuery(GET_ALL_CITIES_AND_ACTIVE, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      const pollCities = citiesData.poll.cities\r\n      setAllCitites(citiesData.cities)\r\n      setAvailableCities(citiesData.cities.filter(\r\n        city => {\r\n          for (let i = 0; i < pollCities.length; i++) {\r\n            if (city.id === pollCities[i].id) {\r\n              return false\r\n            }\r\n          }\r\n          return true\r\n        }\r\n      ))\r\n    }\r\n  })\r\n  const [\r\n    setCityActive,\r\n    { loading: cityActivationLoading }\r\n  ] = useMutation(SET_ACTIVE_CITIES, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    update: (cache, { data: { setPollCity } }) => {\r\n      const cities = setPollCity.cities.map(city => city.id)\r\n      setAvailableCities(availableCities.filter(city => {\r\n        return !cities.includes(city.id)\r\n      }))\r\n    }\r\n  })\r\n  const [\r\n    deleteCity,\r\n    { loading: deleteCityLoading }\r\n  ] = useMutation(DELETE_CITY_FROM_ACTIVE, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Удалить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    update: (cache, { data }) => {\r\n      const pollCities = data.deleteCityFromActive.cities\r\n      const aCitites = allCities.filter(city => {\r\n        for (let i = 0; i < pollCities.length; i++) {\r\n          if (city.id === pollCities[i].id) return false\r\n        }\r\n        return true\r\n      })\r\n      setAvailableCities(aCitites)\r\n    }\r\n  })\r\n\r\n  if (citiesLoading || !citiesData || !availableCities) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  const Loading = () => {\r\n    if (cityActivationLoading || deleteCityLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  if (cititesError) {\r\n    console.log(JSON.stringify(cititesError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const handleCityDelete = (id) => {\r\n    setDelId(id)\r\n  }\r\n\r\n  const handleDelConfirm = () => {\r\n    deleteCityCompletely([delId])\r\n    setDelId(false)\r\n  }\r\n\r\n  const handleAdd = () => {\r\n    const selectedCities = selected.map(obj => {\r\n      return obj.id\r\n    })\r\n    setCityActive({\r\n      variables: {\r\n        id,\r\n        cities: selectedCities\r\n      },\r\n    })\r\n    setClear(clear + 1)\r\n  }\r\n\r\n  const handleChange = (_, value) => {\r\n    setSelected(value)\r\n  }\r\n\r\n  const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\n  const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\n  const deleteCityCompletely = (cities) => {\r\n    deleteCity({\r\n      variables: {\r\n        id,\r\n        cities: cities\r\n      }\r\n    })\r\n  }\r\n\r\n  const CityCard = ({ city, deleteCity }) => {\r\n    const handleDelete = () => {\r\n      deleteCity(city.id)\r\n    }\r\n    return (\r\n      <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n        <Paper className=\"city-card\">\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {city.title}\r\n          </Typography>\r\n          <Typography variant=\"subtitle2\" gutterBottom>\r\n            {city.category.title}\r\n          </Typography>\r\n          <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n            Население: {city.population}\r\n          </Typography>\r\n          <Grid container item justify=\"space-between\" className=\"card-service-buttons\">\r\n            <IconButton className=\"card-button\" aria-label=\"delete\" onClick={handleDelete}>\r\n              <DeleteIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <ConfirmDialog\r\n        open={delId}\r\n        confirm={handleDelConfirm}\r\n        close={() => setDelId(false)}\r\n        buttons={{\r\n          close: \"Отмена\",\r\n          confirm: \"Удалить\"\r\n        }}\r\n        data={\r\n          {\r\n            title: 'Удалить населенный пункт?',\r\n            text: 'Внимание! Результаты опросов учитывают н.п. в которых они проводились, удаление приведет к потере части статистики и некорректности ее отображения.'\r\n          }\r\n        }\r\n      />\r\n      <div className=\"cities-service-zone\">\r\n        <Typography className=\"header\">Города в которых проводится опрос</Typography>\r\n        <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n          <Grid item xs={12} sm={8} md={6} lg={5}>\r\n            <Autocomplete\r\n              multiple\r\n              key={clear}\r\n              limitTags={3}\r\n              options={availableCities}\r\n              disableCloseOnSelect\r\n              clearOnEscape\r\n              onChange={handleChange}\r\n              getOptionLabel={(option) => option.title}\r\n              renderOption={(option, { selected }) => (\r\n                <React.Fragment>\r\n                  <Checkbox\r\n                    icon={icon}\r\n                    checkedIcon={checkedIcon}\r\n                    style={{ marginRight: 8 }}\r\n                    checked={selected}\r\n                  />\r\n                  {option.title}\r\n                </React.Fragment>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"outlined\" label=\"Добавьте город\" />\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4} md={6} lg={5}>\r\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={handleAdd} disabled={!selected.length}>\r\n              Добавить\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <Grid container spacing={3} xs={12} >\r\n        {citiesData.poll.cities.map((city, index) => (\r\n          <CityCard key={index} city={city} deleteCity={handleCityDelete} />\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default CitiesEditor","import React, { useState } from 'react'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nconst QuestionCard = ({ question, handleLimitInput }) => {\r\n  const [val, setVal] = useState(question.limit)\r\n\r\n  const handleKeyUp = (e) => {\r\n    if (e.keyCode === 13) e.currentTarget.blur()\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const currentValue = e.currentTarget.value\r\n    console.log(e);\r\n    if (currentValue < 1) {\r\n      setVal(1)\r\n    } else if (currentValue > 99) {\r\n      setVal(99)\r\n    } else {\r\n      setVal(currentValue)\r\n    }\r\n  }\r\n\r\n  const handleBlur = (e) => {\r\n    handleLimitInput({\r\n      id: question.id,\r\n      limit: val\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n      <Paper className=\"question-item\" elevation={2}>\r\n        <Grid item xs={12} sm container>\r\n          <Grid item xs container direction=\"column\" spacing={2} alignItems=\"flex-start\">\r\n            <Grid item xs>\r\n              <Tooltip title=\"Очередность отображения\" aria-label=\"add\">\r\n                <Typography variant=\"body2\" color=\"primary\">\r\n                  {question.order}\r\n                </Typography>\r\n              </Tooltip>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs container direction=\"column\" spacing={3} alignItems=\"flex-end\" >\r\n            <Grid item xs alignItems=\"center\" style={{ cursor: 'pointer' }}>\r\n              <Tooltip title=\"Меню. В разработке\" aria-label=\"add\">\r\n                <MoreVertIcon />\r\n              </Tooltip>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Tooltip title=\"Лимит ответов\" aria-label=\"add\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"question-limit-input\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                onKeyUp={handleKeyUp}\r\n                value={val}\r\n              />\r\n            </Tooltip>\r\n          </Grid>\r\n        </Grid>\r\n        <Typography className=\"question-title\">\r\n          {question.title.length > 160 ?\r\n            question.title.substring(0, 100) + ' ... ' + question.title.substring(question.title.length - 45) :\r\n            question.title\r\n          }\r\n        </Typography>\r\n\r\n      </Paper>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default QuestionCard","import { gql } from '@apollo/client'\r\n\r\nexport const pollQuery = gql`\r\n  query pollQuery($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const saveNewLimit = gql`\r\nmutation ($id: ID!, $limit: Int!) {\r\n  newLimit(id: $id, limit: $limit) {\r\n    id\r\n    limit\r\n  }\r\n}\r\n`\r\nexport const saveNewOrder = gql`\r\nmutation ($questions: [ReorderedArray]) {\r\n  newOrder(neworder: $questions) {\r\n    id\r\n    order\r\n  }\r\n}\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\r\nimport arrayMove from \"array-move\";\r\n\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport QuestionCard from '../../components/QuestionCard'\r\nimport { pollQuery } from \"./queries\"\r\nimport { saveNewLimit, saveNewOrder } from \"./mutations\"\r\n\r\nconst ReoderEditor = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  const [questions, setQuestions] = useState(null)\r\n  const [prevOrder, setPrevOrder] = useState(null)\r\n  const { loading: pollLoading, error: pollError, data } = useQuery(pollQuery, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      const questions = data.poll.questions\r\n      console.log(questions);\r\n      setQuestions(questions.slice().sort((a, b) => (a.order > b.order) ? 1 : -1))\r\n    }\r\n  })\r\n  const [saveLimit, { loading: limitSaveLoading }] = useMutation(saveNewLimit, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить лимит не удалось. Смотрите консоль.'\r\n      })\r\n    }\r\n  })\r\n  const [saveOrder, { loading: saveOrderLoading }] = useMutation(saveNewOrder, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить порядок не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    update: (cache, { data }) => {\r\n      const questions = data.newOrder\r\n      for (let i = 0; i < questions.length; i++) {\r\n        const id = questions[i].id\r\n        const dd = cache.data.data\r\n        for (let key in dd) {\r\n          if (dd[key].id === id) console.log(dd[key]);\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  if (pollLoading || !questions) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (pollError) {\r\n    console.log(JSON.stringify(pollError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (limitSaveLoading || saveOrderLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  const handleLimitInput = (inputData) => {\r\n    const id = inputData.id\r\n    const limit = +inputData.limit\r\n    setQuestions(questions.map(question => question.id === id ? { ...question, limit: limit } : question))\r\n    saveLimit({\r\n      variables: {\r\n        id,\r\n        limit\r\n      }\r\n    })\r\n  }\r\n\r\n  const onSortEnd = ({ oldIndex, newIndex }) => {\r\n    setPrevOrder({ ...questions })\r\n    console.log(oldIndex, newIndex);\r\n    if (oldIndex !== newIndex) {\r\n      const newArray = arrayMove(questions, oldIndex, newIndex)\r\n      let deltaArray = []\r\n      const newOrder = newArray.reduce((acum, val, index) => {\r\n        if (val.order === index + 1) {\r\n          acum.push(val)\r\n        } else {\r\n          deltaArray.push({\r\n            id: val.id,\r\n            order: index + 1\r\n          })\r\n          acum.push({ ...val, order: index + 1 })\r\n        }\r\n        return acum\r\n      }, [])\r\n      setQuestions(newOrder)\r\n      saveOrder({\r\n        variables: {\r\n          questions: deltaArray\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n  const SortableItem = SortableElement(({ question }) =>\r\n    <QuestionCard question={question} handleLimitInput={handleLimitInput} />\r\n  );\r\n\r\n  const SortableList = SortableContainer(({ questions }) => {\r\n    return (\r\n      <Grid container item xs={12} spacing={2}>\r\n        {questions.map((question, index) => (\r\n          <SortableItem key={`item-${question.id}`} index={index} question={question} />\r\n        ))}\r\n      </Grid>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <SortableList\r\n        questions={questions}\r\n        onSortEnd={onSortEnd}\r\n        axis=\"xy\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ReoderEditor","import React, { Fragment } from 'react'\r\n\r\nimport AdaptiveTabs from '../../components/AdaptiveTabs'\r\n\r\nimport CommonSetting from './containers/Common'\r\nimport ConfigEditor from './containers/ConfigEditor'\r\nimport DeletePoll from './containers/DeletePoll';\r\nimport CititesEditor from './containers/CitiesEditor';\r\nimport ReoderEditor from './containers/ReoderEditor';\r\n\r\nconst PollSettings = ({ id, code }) => {\r\n  const data = [\r\n    {\r\n      label: 'Общие',\r\n      component: <CommonSetting id={id} />\r\n    },\r\n    {\r\n      label: 'Порядок отображения',\r\n      component: <ReoderEditor id={id} />\r\n    },\r\n    {\r\n      label: 'Конфиг',\r\n      component: <ConfigEditor id={id} />\r\n    },\r\n    {\r\n      label: 'Города',\r\n      component: <CititesEditor id={id} />\r\n    },\r\n    {\r\n      label: 'Удаление',\r\n      component: <DeletePoll id={id} code={code} />\r\n    }\r\n  ]\r\n  return (\r\n    <Fragment>\r\n      <AdaptiveTabs data={data} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollSettings","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollSettings from '../modules/PollSettings'\r\n\r\nconst Settings = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Настройки опроса ` + code} />\r\n      <div>\r\n        <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n          <PollSettings id={id} code={code} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Settings","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`vertical-tabpanel-${index}`}\r\n      aria-labelledby={`vertical-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    'aria-controls': `vertical-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    display: 'flex',\r\n  },\r\n  tabs: {\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n  },\r\n}));\r\n\r\nconst PollFiles = ({ id }) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Tabs\r\n        orientation=\"vertical\"\r\n        variant=\"scrollable\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        className={classes.tabs}\r\n      >\r\n        <Tab label=\"Файлы\" {...a11yProps(0)} />\r\n      </Tabs>\r\n      <TabPanel value={value} index={0}>\r\n        Файлы опроса - {id}\r\n        <p>В РАЗРАБОТКЕ</p>\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PollFiles","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollFiles from '../modules/PollFiles'\r\n\r\nconst Attachment = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Файлы ` + code} />\r\n      <div style={{ paddingTop: '10px' }}>\r\n        <Container maxWidth=\"xl\">\r\n          <PollFiles id={id} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Attachment","import React, { Fragment } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst PollWiki = () => {\r\n  return (\r\n    <Fragment>\r\n      <Grid container item>\r\n        WIKI\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollWiki","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollWiki from '../modules/PollWiki'\r\n\r\nconst Wiki = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Wiki ` + code} />\r\n      <Container maxWidth=\"lg\">\r\n        <PollWiki />\r\n      </Container>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Wiki","import { gql } from '@apollo/client'\r\n\r\nexport const GET_CITITES_WITH_CATEGORIES = gql`\r\nquery {\r\n  cities{\r\n    id\r\n    title\r\n    population\r\n    category {\r\n      id\r\n      title\r\n    }\r\n  }\r\n  cityCategories{\r\n    id\r\n    title\r\n  }\r\n}\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const CITY_SAVE_MUTATION = gql`\r\nmutation ($title: String!, $population: Int!, $category: String!) {\r\n  newCity(title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category {\r\n      id\r\n      title\r\n    }\r\n    population\r\n  }\r\n}\r\n`\r\nexport const CITY_EDIT_SAVE = gql`\r\nmutation ($id: String!, $title: String!, $population: Int!, $category: String!) {\r\n  cityEdit(id: $id, title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category {\r\n      id\r\n      title\r\n    }\r\n    population\r\n  }\r\n}\r\n`\r\nexport const DELETE_CITY = gql`\r\nmutation ($id: String!) {\r\n  deleteCity(id: $id) {\r\n    id\r\n    title\r\n    category {\r\n      id\r\n      title\r\n    }\r\n    population\r\n  }\r\n}\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog'\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_CITITES_WITH_CATEGORIES } from './queries'\r\nimport { CITY_SAVE_MUTATION, CITY_EDIT_SAVE, DELETE_CITY } from './mutations'\r\n\r\nconst Cities = () => {\r\n  const [noti, setNoti] = useState(false)\r\n\r\n  const [delId, setDelId] = useState(false)\r\n  const [cityAdd, setCityAdd] = useState(false)\r\n  const {\r\n    data: citiesData,\r\n    loading: citiesLoading,\r\n    error: citiesError\r\n  } = useQuery(GET_CITITES_WITH_CATEGORIES)\r\n\r\n  const [saveCity, { loading: saveCityLoading }] = useMutation(CITY_SAVE_MUTATION, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить новый город не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data: { newCity } }) => cache.writeQuery({\r\n      query: GET_CITITES_WITH_CATEGORIES,\r\n      data: {\r\n        cities: [\r\n          ...citiesData.cities,\r\n          newCity\r\n        ]\r\n      }\r\n    })\r\n  })\r\n\r\n  const [saveCityEdit, { loading: saveCityEditLoading }] = useMutation(CITY_EDIT_SAVE, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Обновить информацию не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data: { cityEdit } }) => cache.writeQuery({\r\n      query: GET_CITITES_WITH_CATEGORIES,\r\n      data: {\r\n        cities: citiesData.cities.map(city => city.id === cityEdit.id ? cityEdit : city)\r\n      }\r\n    })\r\n  })\r\n\r\n  const [\r\n    deleteCity,\r\n    { loading: deleteCityLoading }\r\n  ] = useMutation(DELETE_CITY, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Удалить город не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data: { deleteCity } }) => cache.writeQuery({\r\n      query: GET_CITITES_WITH_CATEGORIES,\r\n      data: {\r\n        cities: citiesData.cities.filter(city => city.id === deleteCity.id ? false : true)\r\n      }\r\n    })\r\n  })\r\n\r\n  const CityCard = ({ city, save, deleteCity }) => {\r\n    const [editting, setEditting] = useState(false)\r\n\r\n    const handleEdit = () => {\r\n      setEditting(true)\r\n    }\r\n\r\n    const handleSave = (data) => {\r\n      save({\r\n        ...data,\r\n        id: city.id\r\n      })\r\n    }\r\n\r\n    const handleCloseEdit = () => {\r\n      setEditting(false)\r\n    }\r\n\r\n    const handleDelete = () => {\r\n      deleteCity(city.id)\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        {!editting ?\r\n          <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n            <Paper className=\"city-card\">\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                {city.title}\r\n              </Typography>\r\n              <Typography variant=\"subtitle2\" gutterBottom>\r\n                {city.category.title}\r\n              </Typography>\r\n              <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n                Население: {city.population}\r\n              </Typography>\r\n              <Grid container item justify=\"space-between\" className=\"card-service-buttons\">\r\n                <IconButton className=\"card-button\" aria-label=\"delete\" onClick={handleDelete}>\r\n                  <DeleteIcon fontSize=\"small\" />\r\n                </IconButton>\r\n                <IconButton className=\"card-button\" aria-label=\"delete\" onClick={handleEdit}>\r\n                  <EditIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n          : <CityAdd city={city} save={handleSave} close={handleCloseEdit} />\r\n        }\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  const CityAdd = ({ save, close, city }) => {\r\n    const [edit, setEdit] = useState(false)\r\n    const [title, setTitle] = useState(city ? city.title : '')\r\n    const [population, setPopulation] = useState(city ? city.population : '')\r\n    const [category, setCategory] = useState(city ? city.category.id : '')\r\n\r\n    const handleSubmit = (e) => {\r\n      e.preventDefault()\r\n      const newCity = {\r\n        title,\r\n        population: +population,\r\n        category\r\n      }\r\n      console.log(newCity);\r\n      save(newCity)\r\n    }\r\n\r\n    const titleHandle = (e) => {\r\n      setEdit(true)\r\n      setTitle(e.currentTarget.value)\r\n    }\r\n    const popHandle = (e) => {\r\n      setEdit(true)\r\n      setPopulation(e.currentTarget.value)\r\n    }\r\n    const catHandle = (e) => {\r\n      setEdit(true)\r\n      setCategory(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n      <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n        <Paper className=\"add-city-card\">\r\n          <IconButton className=\"add-dialog-close\" aria-label=\"delete\" size=\"small\" onClick={close}>\r\n            <CloseIcon fontSize=\"inherit\" />\r\n          </IconButton>\r\n          <form onSubmit={handleSubmit}>\r\n            <TextField\r\n              className=\"add-city-title\"\r\n              required\r\n              defaultValue={city ? city.title : ''}\r\n              helperText=\"Название н.п.\"\r\n              onChange={titleHandle}\r\n            />\r\n            <TextField\r\n              className=\"add-city-population\"\r\n              type=\"number\"\r\n              required\r\n              defaultValue={city ? city.population : ''}\r\n              onChange={popHandle}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              helperText=\"Численность, чел.\"\r\n            />\r\n            <TextField\r\n              select\r\n              required\r\n              onChange={catHandle}\r\n              defaultValue={city ? city.category.id : ''}\r\n              SelectProps={{\r\n                native: true,\r\n              }}\r\n              helperText=\"Категория н.п.\"\r\n            >\r\n              <option key={0} disabled selected value=\"\"></option>\r\n              {citiesData.cityCategories.map((option) => (\r\n                <option key={option.id} value={option.id}>\r\n                  {option.title}\r\n                </option>\r\n              ))}\r\n            </TextField>\r\n            <Button\r\n              className=\"city-dialog-save\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              startIcon={<SaveIcon />}\r\n              type=\"submit\"\r\n              disabled={!edit}\r\n            >\r\n              Save\r\n          </Button>\r\n          </form>\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const handleAdd = () => {\r\n    setCityAdd(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setCityAdd(false)\r\n  }\r\n\r\n  async function handleSaveNew(newData) {\r\n    await saveCity({\r\n      variables: { ...newData }\r\n    })\r\n    setCityAdd(false)\r\n  }\r\n\r\n  async function handleSaveEdit(cityData) {\r\n    await saveCityEdit({\r\n      variables: { ...cityData }\r\n    })\r\n  }\r\n\r\n  async function deleteCityCompletely(id) {\r\n    await deleteCity({\r\n      variables: { id }\r\n    })\r\n  }\r\n\r\n  const handleCityDelete = (id) => {\r\n    setDelId(id)\r\n  }\r\n\r\n  const handleDelConfirm = () => {\r\n    deleteCityCompletely(delId)\r\n    setDelId(false)\r\n  }\r\n\r\n  const handleDelDialogClose = () => {\r\n    setDelId(false)\r\n  }\r\n\r\n  if (citiesLoading) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (citiesError) {\r\n    console.log(JSON.stringify(citiesError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (saveCityLoading || saveCityEditLoading || deleteCityLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n\r\n      <div className=\"cities-service-zone\">\r\n        <Typography className=\"header\">Города проведения опросов</Typography>\r\n        <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={handleAdd}>\r\n          Добавить\r\n        </Button>\r\n      </div>\r\n      <ConfirmDialog\r\n        open={delId}\r\n        confirm={handleDelConfirm}\r\n        close={handleDelDialogClose}\r\n        buttons={{\r\n          close: \"Отмена\",\r\n          confirm: \"Удалить\"\r\n        }}\r\n        data={\r\n          {\r\n            title: 'Удалить населенный пункт?',\r\n            text: 'Внимание! Результаты опросов учитывают н.п. в которых они проводились, удаление приведет к потере части статистики и некорректности ее отображения.'\r\n          }\r\n        }\r\n      />\r\n      <Grid container spacing={3} xs={12}>\r\n        {cityAdd &&\r\n          <CityAdd save={handleSaveNew} close={handleClose} />\r\n        }\r\n        {citiesData.cities.map((city, index) => (\r\n          <CityCard city={city} save={handleSaveEdit} deleteCity={handleCityDelete} />\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Cities","import React, { Fragment } from 'react'\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Sample = () => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"sample-service-zone\">\r\n        <Typography className=\"header\">Конструктор выборки</Typography>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Sample","import React from 'react'\r\n\r\nimport AdaptiveTabs from '../../components/AdaptiveTabs'\r\n\r\nimport Cities from './containers/Cities'\r\nimport Sample from './containers/Sample'\r\n\r\nconst PollAppSettings = () => {\r\n  const data = [\r\n    {\r\n      label: 'Города',\r\n      component: <Cities />\r\n    },\r\n    {\r\n      label: 'Выборка',\r\n      component: <Sample />\r\n    },\r\n    {\r\n      label: 'Пол',\r\n      component: 'ПОЛ'\r\n    },\r\n    {\r\n      label: 'Возраст',\r\n      component: 'Возраст'\r\n    },\r\n    {\r\n      label: 'ТНП',\r\n      component: 'ТНП'\r\n    }\r\n  ]\r\n  return (\r\n    <AdaptiveTabs data={data} />\r\n  )\r\n}\r\n\r\nexport default PollAppSettings","import React, { Fragment } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollAppSettings from '../modules/PollAppSettings'\r\n\r\nconst PollAppSettingsPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Настройки подсистемы`} />\r\n      <div>\r\n        <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n          <PollAppSettings />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollAppSettingsPage","import React, { Fragment, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nconst UserAddDialog = ({ open, close, saveNewUser, selects }) => {\r\n  const [userData, setUserData] = useState()\r\n\r\n  const save = (e) => {\r\n    e.preventDefault()\r\n    saveNewUser(userData)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={close} aria-labelledby=\"form-dialog-title\">\r\n        <form onSubmit={save}>\r\n          <DialogTitle>Добавление пользователя</DialogTitle>\r\n          <DialogContent>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пользователь\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      username: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: Иванов И.И.\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Логин\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      login: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: IvanovII\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      password: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Не менее восьми символов\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"Повторите пароль\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Статус</InputLabel>\r\n                  <Select\r\n                    required\r\n                    native\r\n                    label=\"Статус\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        status: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userStatus.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите социальный статус</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Права</InputLabel>\r\n                  <Select\r\n                    native\r\n                    label=\"Права\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        rights: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userRights.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите права поьзователя</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <p></p>\r\n          <DialogActions>\r\n            <Button variant=\"contained\" onClick={close}>\r\n              Отмена\r\n          </Button>\r\n            <Button variant=\"contained\" type=\"submit\" color=\"primary\">\r\n              Добавить\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default UserAddDialog","import React, { Fragment, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nconst UserUpdateDialog = ({ data, selects, open, close, updateUser }) => {\r\n  const [userData, setUserData] = useState(false)\r\n\r\n  const save = (e) => {\r\n    e.preventDefault()\r\n    updateUser({\r\n      id: data.id,\r\n      data: userData\r\n    })\r\n    setUserData(false)\r\n    close()\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={close} aria-labelledby=\"form-dialog-title\">\r\n        <form onSubmit={save}>\r\n          <DialogTitle>Обновить данные</DialogTitle>\r\n          <DialogContent>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пользователь\"\r\n                  variant=\"outlined\"\r\n                  defaultValue={data.username}\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      username: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: Иванов И.И.\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Логин\"\r\n                  variant=\"outlined\"\r\n                  defaultValue={data.login}\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      login: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: IvanovII\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Статус</InputLabel>\r\n                  <Select\r\n                    required\r\n                    native\r\n                    defaultValue={data.status ? data.status.id : ''}\r\n                    label=\"Статус\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        status: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userStatus.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите социальный статус</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Права</InputLabel>\r\n                  <Select\r\n                    native\r\n                    defaultValue={data.rights ? data.rights.id : ''}\r\n                    label=\"Права\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        rights: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userRights.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите права поьзователя</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <p></p>\r\n          <DialogActions>\r\n            <Button variant=\"contained\" onClick={close}>\r\n              Отмена\r\n          </Button>\r\n            <Button variant=\"contained\" type=\"submit\" color=\"primary\">\r\n              Обновить\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default UserUpdateDialog","import React, { Fragment, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst PassResetDialog = ({ data, open, close, passReset }) => {\r\n  const [userData, setUserData] = useState(false)\r\n\r\n  const save = (e) => {\r\n    e.preventDefault()\r\n    passReset({\r\n      id: data.id,\r\n      password: userData.password\r\n    })\r\n    setUserData(false)\r\n    close()\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={close} aria-labelledby=\"form-dialog-title\">\r\n        <form onSubmit={save}>\r\n          <DialogTitle>Установка пароля</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              Установите новый пароль пользователя - {data.username}\r\n            </DialogContentText>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      password: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Не менее восьми символов\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"Повторите пароль\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <p></p>\r\n          <DialogActions>\r\n            <Button variant=\"contained\" onClick={close}>\r\n              Отмена\r\n          </Button>\r\n            <Button variant=\"contained\" type=\"submit\" color=\"primary\">\r\n              Сохранить\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PassResetDialog","import React, { Fragment, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Button from '@material-ui/core/Button';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog';\r\nimport UserAddDialog from '../UserAddDialog'\r\nimport UserUpdateDialog from '../UserUpdateDialog'\r\nimport PassResetDialog from '../PassResetDialog'\r\n\r\n// const users = [\r\n//   {\r\n//     id: '1111',\r\n//     username: 'Петров И.В.',\r\n//     login: 'PtrovIV',\r\n//     status: 'военнослужащий',\r\n//     rights: 'Пользователь'\r\n//   },\r\n//   {\r\n//     id: '22222',\r\n//     username: 'Иванов С.В.',\r\n//     login: 'IvanovSV',\r\n//     status: 'военнослужащий',\r\n//     rights: 'Пользователь'\r\n//   },\r\n//   {\r\n//     id: '33333',\r\n//     username: 'Сидорова С.В.',\r\n//     login: 'SidorovaSV',\r\n//     status: 'гражданский служащий',\r\n//     rights: 'Админ'\r\n//   },\r\n// ]\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'username', numeric: false, disablePadding: true, label: 'Пользователь', sort: true },\r\n  { id: 'login', numeric: false, disablePadding: false, label: 'Логин', sort: true },\r\n  { id: 'status', numeric: false, disablePadding: false, label: 'Статус', sort: true },\r\n  { id: 'rights', numeric: false, disablePadding: false, label: 'Права', sort: true },\r\n  { id: '', numeric: true, disablePadding: true, label: 'Action', sort: false }\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n          >{headCell.sort ? (\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n              hideSortIcon={headCell.sort ? false : true}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n\r\n          ) : (<span>{headCell.label}</span>)}\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n      }\r\n      : {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n      },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, deleteDelete, setUserAddOpen } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} выбрано\r\n        </Typography>\r\n      ) : (\r\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n            Пользователи\r\n          </Typography>\r\n        )\r\n      }\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Удалить\">\r\n          <IconButton aria-label=\"delete\" onClick={deleteDelete}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n          <Tooltip title=\"Добавить пользователя\">\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => setUserAddOpen(true)}>\r\n              Добавить\r\n            </Button>\r\n          </Tooltip>\r\n        )\r\n      }\r\n    </Toolbar >\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nconst UsersTable = ({ users, addNewUser, deleteUsers, updateUser, resetPassword, selects }) => {\r\n  const classes = useStyles();\r\n\r\n  const [deleteDialog, setDeleteDialog] = useState(false)\r\n  const [userAddOpen, setUserAddOpen] = useState(false)\r\n  const [userUpdate, setUserUpdate] = useState(false)\r\n  const [passReset, setPassReset] = useState(false)\r\n\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState('calories');\r\n  const [selected, setSelected] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((n) => n.id);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (_, id) => {\r\n    const selectedIndex = selected.indexOf(id);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleRowEdit = (_, row) => {\r\n    setUserUpdate(row)\r\n  }\r\n\r\n  const handlePassReset = (_, row) => {\r\n    setPassReset(row)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const handleDelConfirm = () => {\r\n    deleteUsers(selected)\r\n    setDeleteDialog(false)\r\n    setSelected([])\r\n  }\r\n\r\n  const saveNewUser = (data) => {\r\n    // TODO: \"Нужна заставка ожидания\"\r\n    addNewUser(data)\r\n    setUserAddOpen(false)\r\n  }\r\n\r\n  const hanleUserUpdate = ({ id, data }) => {\r\n    updateUser({\r\n      id,\r\n      data\r\n    })\r\n  }\r\n\r\n  const handlePasswordReset = ({ id, password }) => {\r\n    resetPassword({\r\n      id, password\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <UserAddDialog open={userAddOpen} selects={selects} close={() => setUserAddOpen(false)} saveNewUser={saveNewUser} />\r\n      <UserUpdateDialog data={userUpdate} selects={selects} open={userUpdate} close={() => setUserUpdate(false)} updateUser={hanleUserUpdate} />\r\n      <PassResetDialog data={passReset} open={passReset} close={() => setPassReset(false)} passReset={handlePasswordReset} />\r\n      <ConfirmDialog\r\n        open={deleteDialog}\r\n        confirm={handleDelConfirm}\r\n        close={() => setDeleteDialog(false)}\r\n        buttons={{\r\n          close: \"Отмена\",\r\n          confirm: \"Удалить\"\r\n        }}\r\n        data={\r\n          {\r\n            title: 'Удалить пользователей(я)?',\r\n            text: 'Внимание! Это операция не может быть отменена. Часть данных приложения привязаны к учетной записи, будьте внимательны.'\r\n          }\r\n        }\r\n      />\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar numSelected={selected.length} deleteDelete={setDeleteDialog} setUserAddOpen={setUserAddOpen} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={users.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(users, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.id);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          onClick={(event) => handleClick(event, row.id)}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell align=\"center\" component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row.username}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.login}</TableCell>\r\n                      <TableCell align=\"center\">{row.status ? row.status.title : '-'}</TableCell>\r\n                      <TableCell align=\"center\">{row.rights ? row.rights.title : '-'}</TableCell>\r\n                      <TableCell align=\"center\" padding=\"none\">\r\n                        <Tooltip title=\"Обновить\">\r\n                          <IconButton\r\n                            onClick={(event) => handleRowEdit(event, row)}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Сбросить пароль\">\r\n                          <IconButton\r\n                            onClick={(event) => handlePassReset(event, row)}\r\n                          >\r\n                            <LockOpenIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={users.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          labelRowsPerPage=\"Строк:\"\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default UsersTable","import { gql } from '@apollo/client'\r\n\r\nexport const GET_ALL_USERS = gql`\r\n  query {\r\n    users {\r\n      id\r\n      username\r\n      login\r\n      status {\r\n        id\r\n        title\r\n      }\r\n      rights {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_AUTH_SELECTS = gql`\r\n  query {\r\n    userRights {\r\n      id\r\n      title\r\n    }\r\n    userStatus {\r\n      id\r\n      title\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const ADD_NEW_USER = gql`\r\n  mutation($user: UserDataCreate!) {\r\n    addNewUser(user: $user) {\r\n      id\r\n      username\r\n      login\r\n      status {\r\n        id\r\n        title\r\n      }\r\n      rights {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const UPDATE_USER = gql`\r\n  mutation($id: String, $data: UserDataUpdate) {\r\n    updateUser(id: $id, data: $data) {\r\n      id\r\n      username\r\n      login\r\n      status {\r\n        id\r\n        title\r\n      }\r\n      rights {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const DELETE_USERS = gql`\r\n  mutation($users: [String]) {\r\n    deleteUsers(users: $users) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const RESET_PASSWORD = gql`\r\n  mutation($id: String, $password: String) {\r\n    resetPassword(id: $id, password: $password)\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport UsersTable from './components/UsersTable'\r\n\r\nimport LoadingState from '../../components/LoadingState'\r\nimport ErrorState from '../../components/ErrorState'\r\nimport SystemNoti from '../../components/SystemNoti'\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_USERS, GET_AUTH_SELECTS } from './queries'\r\nimport { ADD_NEW_USER, UPDATE_USER, DELETE_USERS, RESET_PASSWORD } from './mutations'\r\n\r\nconst Users = () => {\r\n  const [noti, setNoti] = useState(false)\r\n  const {\r\n    loading: dataLoading,\r\n    error: dataError,\r\n    data\r\n  } = useQuery(GET_ALL_USERS)\r\n  const {\r\n    loading: selectsLoading,\r\n    error: selectsError,\r\n    data: selects\r\n  } = useQuery(GET_AUTH_SELECTS)\r\n\r\n  const [deleteUsers, { loading: deleteLoading }] = useMutation(DELETE_USERS,\r\n    {\r\n      onError: (e) => {\r\n        setNoti({\r\n          type: 'error',\r\n          text: 'Удалить не удалось. Смотрите консоль.'\r\n        })\r\n        console.log(e);\r\n      },\r\n      update: (cache, { data: { deleteUsers } }) => cache.writeQuery({\r\n        query: GET_ALL_USERS,\r\n        data: {\r\n          users: data.users.filter(user => {\r\n            for (let i = 0; i < deleteUsers.length; i++) {\r\n              if (deleteUsers[i].id === user.id) return false\r\n            }\r\n            return true\r\n          })\r\n        }\r\n      })\r\n    }\r\n  )\r\n  const [addUser, { loading: addLoading }] = useMutation(ADD_NEW_USER,\r\n    {\r\n      onError: (e) => {\r\n        setNoti({\r\n          type: 'error',\r\n          text: 'Добавить не удалось. Смотрите консоль.'\r\n        })\r\n        console.log(e);\r\n      },\r\n      update: (cache, { data: { addNewUser } }) => cache.writeQuery({\r\n        query: GET_ALL_USERS,\r\n        data: {\r\n          users: [\r\n            ...data.users,\r\n            addNewUser\r\n          ]\r\n        }\r\n      })\r\n    }\r\n  )\r\n\r\n  const [updateUser, { loading: updateLoading }] = useMutation(UPDATE_USER,\r\n    {\r\n      onError: (e) => {\r\n        setNoti({\r\n          type: 'error',\r\n          text: 'Обновить не удалось. Смотрите консоль.'\r\n        })\r\n        console.log(e);\r\n      },\r\n      update: (cache, { data: { updateUser } }) => cache.writeQuery({\r\n        query: GET_ALL_USERS,\r\n        data: {\r\n          users: data.users.map(user => user.id === updateUser.id ? updateUser : user)\r\n        }\r\n      })\r\n    }\r\n  )\r\n  const [resetPassword] = useMutation(RESET_PASSWORD)\r\n\r\n  if (dataLoading || selectsLoading) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (dataError || selectsError) {\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const addNewUser = (data) => {\r\n    addUser({\r\n      variables: {\r\n        user: data\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleUsersDelete = (data) => {\r\n    deleteUsers({\r\n      variables: {\r\n        users: data\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleUserUpdate = ({ id, data }) => {\r\n    updateUser({\r\n      variables: {\r\n        id,\r\n        data\r\n      }\r\n    })\r\n  }\r\n\r\n  const resetPass = ({ id, password }) => {\r\n    resetPassword({\r\n      variables: {\r\n        id,\r\n        password\r\n      }\r\n    })\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (deleteLoading) return <LoadingStatus />\r\n    if (addLoading) return <LoadingStatus />\r\n    if (updateLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n\r\n      <UsersTable\r\n        users={data.users}\r\n        selects={selects}\r\n        addNewUser={addNewUser}\r\n        deleteUsers={handleUsersDelete}\r\n        updateUser={handleUserUpdate}\r\n        resetPassword={resetPass}\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Users","import React, { Fragment } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport Users from '../modules/Users'\r\n\r\nconst UsersPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Пользователи системы`} />\r\n      <div style={{ paddingTop: '10px' }}>\r\n        <Container maxWidth=\"lg\">\r\n          <Users />\r\n        </Container>\r\n      </div>\r\n    </Fragment >\r\n  )\r\n}\r\n\r\nexport default UsersPage","import React, { Fragment } from 'react';\r\nimport ErrorState from '../components/ErrorState'\r\n\r\n// import { ReactComponent as ErrorIllustration } from \"../../illustrations/error.svg\";\r\n\r\nconst NotFoundPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <ErrorState\r\n        title=\"404 Страница не найдена\"\r\n        description=\"Вы заблудились. Проверьте адрес\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default NotFoundPage;","import React from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\n\r\nimport {\r\n  HomePage,\r\n  PollArchive,\r\n  DrivePage,\r\n  ResultsPage,\r\n  AnalyzePage,\r\n  SettingsPage,\r\n  TesterPage,\r\n  AttachmentPage,\r\n  WikiPage,\r\n  PollAppSettingsPage,\r\n  UsersPage,\r\n  NotFoundPage,\r\n} from '../../pages'\r\n\r\nconst Router = () => {\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path={\"/\"} exact component={HomePage} />\r\n        <Route path={\"/poll-archive\"} exact component={PollArchive} />\r\n        <Route path={\"/settings/users\"} exact component={UsersPage} />\r\n        <Route path={\"/results/:id/:code\"} component={ResultsPage} />\r\n        <Route path={\"/poll-settings/:id/:code\"} component={SettingsPage} />\r\n        <Route path={\"/drive/:id/:code\"} component={DrivePage} />\r\n        <Route path={\"/analyze\"} component={AnalyzePage} />\r\n        <Route path={\"/attachment/:id/:code\"} component={AttachmentPage} />\r\n        <Route path={\"/poll-wiki/:id/:code\"} component={WikiPage} />\r\n        <Route path={\"/poll-app-settings\"} component={PollAppSettingsPage} />\r\n        <Route path={\"/tester\"} component={TesterPage} />\r\n        <Route component={NotFoundPage} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default Router","import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      {'РИАЦi51' + ' '}\r\n      {new Date().getFullYear()}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  forget: {\r\n    cursor: 'pointer'\r\n  }\r\n}));\r\n\r\nconst SignIn = ({ onLogin, userError, passwordError }) => {\r\n  const [login, setlogin] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const classes = useStyles();\r\n\r\n  const handleName = (e) => {\r\n    setlogin(e.target.value)\r\n  }\r\n\r\n  const handlePassword = (e) => {\r\n    setPassword(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (login || password)\r\n      onLogin({\r\n        login,\r\n        password\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Войдите в систему\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            error={!!userError}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"login\"\r\n            label=\"Логин\"\r\n            name=\"login\"\r\n            autoComplete=\"login\"\r\n            autoFocus\r\n            onChange={handleName}\r\n            helperText={userError}\r\n\r\n          />\r\n          <TextField\r\n            error={passwordError}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Пароль\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            onChange={handlePassword}\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n            label=\"Запомнить меня\"\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={handleSubmit}\r\n          >\r\n            Войти\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <Box >\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\nexport default SignIn","import { gql } from '@apollo/client';\r\n\r\nexport const SIGNIN_MUTATION = gql`\r\n  mutation signin(\r\n    $login: String!,\r\n    $password: String!\r\n  ) {\r\n    signin(\r\n      login: $login,\r\n      password: $password\r\n    ) {\r\n      user {\r\n        id\r\n        login\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SIGNUP_MUTATION = gql`\r\n  mutation signup(\r\n    $login: String!,\r\n    $password: String!\r\n  ) {\r\n    signup(\r\n      login: $login,\r\n      password: $password\r\n    ) {\r\n      user {\r\n        id\r\n        login\r\n      }\r\n    }\r\n  }\r\n\r\n`","import React, { Fragment, useState } from 'react';\r\n\r\nimport './App.scss';\r\nimport Router from '../Router'\r\n\r\nimport SignInForm from '../../components/SignInForm'\r\n\r\nimport ErrorState from '../../components/ErrorState'\r\nimport LoadingSate from '../../components/LoadingState'\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\n\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { CURRENT_USER_QUERY } from './queries';\r\nimport { SIGNIN_MUTATION } from './mutations';\r\n\r\n\r\nconst App = () => {\r\n  const { loading, error, data } = useQuery(CURRENT_USER_QUERY);\r\n  const [passwordError, setPasswordError] = useState(null)\r\n  const [userError, setUserError] = useState(null)\r\n\r\n  const [signin, { loading: signinLoading }] = useMutation(\r\n    SIGNIN_MUTATION,\r\n    {\r\n      onError: (e) => {\r\n        setUserError('Неправильный логин или пароль')\r\n        setPasswordError(true)\r\n      },\r\n      update: (cache, { data: { signin } }) => cache.writeQuery({\r\n        query: CURRENT_USER_QUERY,\r\n        data: { currentUser: signin.user },\r\n      }),\r\n    }\r\n  )\r\n\r\n  if (loading) return <LoadingSate />\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-пошло не так\"\r\n        description=\"Приложение не хочет стартовать, смотрите консоль!\"\r\n      />\r\n    )\r\n  };\r\n\r\n  const handleLogin = (data) => {\r\n    signin({ variables: data })\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (signinLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n\r\n  if (!!data.currentUser) {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"App\">\r\n          <Loading />\r\n          <Router />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n  return <div>\r\n    <Loading />\r\n    <SignInForm onLogin={handleLogin} userError={userError} passwordError={passwordError} />\r\n  </div>\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport { mainUrl } from './mainconfig'\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { cache } from './cache'\r\n\r\nimport App from './containers/App/App';\r\n\r\n// const cache = new InMemoryCache()\r\n\r\nconst client = new ApolloClient({\r\n  uri: mainUrl + '/graphql',\r\n  cache,\r\n  credentials: 'include',\r\n  connectToDevTools: true\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}