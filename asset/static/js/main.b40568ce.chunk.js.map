{"version":3,"sources":["mainconfig.js","serviceWorker.js","cache.js","containers/UserProfile/mutations.js","containers/App/queries.js","containers/UserProfile/index.js","components/ServiceMenu/ServiceMenu.js","components/HomeBar/HomeBar.js","modules/PollHome/components/PollAvatar/PollAvatar.js","modules/PollHome/lib/constants.js","modules/PollHome/components/PollCard/PollCard.js","modules/PollHome/components/ListOfPolls/ListOfPolls.js","modules/PollHome/components/XmlInput/index.js","components/AddFab/index.js","modules/PollHome/lib/utils.js","components/LoadingState/LoadingState.js","components/LoadingStatus/LoadingStatus.js","components/SystemNoti/SystemNoti.js","components/ErrorState/ErrorState.js","modules/PollHome/components/TestBtn/TestBtn.js","modules/PollHome/queries.js","modules/PollHome/mutations.js","modules/PollHome/PollHome.js","pages/HomePage.js","components/SettingBar/index.js","modules/PollDrive/components/FreeAnswer/index.js","modules/PollDrive/components/Answer/index.js","modules/PollDrive/components/MultipleAnswers/index.js","modules/PollDrive/components/Question/index.js","modules/PollDrive/components/FinishDialog/index.js","modules/PollDrive/lib/keycodes.js","modules/PollDrive/lib/defineSelectedAnswer.js","modules/PollDrive/lib/questionFormation.js","modules/PollDrive/lib/beep.js","modules/PollDrive/components/DriveLogic/DriveLogic.js","components/DialogWithSelect/index.js","modules/PollDrive/queries.js","modules/PollDrive/mutaions.js","modules/PollDrive/lib/utils.js","modules/PollDrive/PollDrive.js","pages/DrivePage.js","components/AdaptiveTabs/AdaptiveTabs.js","modules/PollResults/containers/Generation/queries.js","modules/PollResults/containers/Generation/index.js","components/ConfirmDialog/ConfirmDialog.js","modules/PollResults/components/RespondentCard/index.js","modules/PollResults/containers/OverallResults/queries.js","modules/PollResults/containers/OverallResults/mutations.js","modules/PollResults/containers/OverallResults/OverallResults.js","modules/PollResults/components/BarChart/BarChart.js","modules/PollResults/components/LinearTable/LinearTable.js","modules/PollResults/containers/LinearDistribution/queries.js","modules/PollResults/containers/LinearDistribution/LinearDistribution.js","modules/PollResults/containers/BatchInput/queries.js","modules/PollResults/containers/BatchInput/BatchInput.js","modules/PollResults/PollResults.js","pages/ResultsPage.js","modules/DataAnalyzer/lib/xmlparser.js","modules/DataAnalyzer/components/ParchaXmlAnalyzer/index.js","modules/DataAnalyzer/components/WarShow/index.js","modules/DataAnalyzer/lib/txtparser.js","modules/DataAnalyzer/components/WordAnalyzer/index.js","modules/DataAnalyzer/index.js","pages/AnalyzePage.js","pages/TesterPage.js","modules/PollSettings/containers/Common/queries.js","modules/PollSettings/containers/Common/Common.js","modules/PollSettings/containers/ConfigEditor/queries.js","modules/PollSettings/containers/ConfigEditor/mutations.js","modules/PollSettings/containers/ConfigEditor/ConfigEditor.js","modules/PollSettings/containers/DeletePoll/mutations.js","modules/PollSettings/containers/DeletePoll/DeletePoll.js","modules/PollSettings/containers/CitiesEditor/queries.js","modules/PollSettings/containers/CitiesEditor/mutations.js","modules/PollSettings/containers/CitiesEditor/CitiesEditor.js","modules/PollSettings/components/QuestionCard/index.js","modules/PollSettings/containers/ReoderEditor/queries.js","modules/PollSettings/containers/ReoderEditor/mutations.js","modules/PollSettings/containers/ReoderEditor/ReoderEditor.js","modules/PollSettings/PollSettings.js","pages/SettingsPage.js","modules/PollFiles/index.js","pages/AttachmentPage.js","modules/PollWiki/index.js","pages/WikiPage.js","modules/PollAppSettings/containers/Cities/queries.js","modules/PollAppSettings/containers/Cities/mutations.js","modules/PollAppSettings/containers/Cities/Cities.js","modules/PollAppSettings/containers/Sample/Sample.js","modules/PollAppSettings/PollAppSettings.js","pages/PollAppSettingsPage.js","modules/Users/components/UserAddDialog/UserAddDialog.js","modules/Users/components/UserUpdateDialog/UserUpdateDialog.js","modules/Users/components/PassResetDialog/PassResetDialog.js","modules/Users/components/UsersTable/UsersTable.js","modules/Users/queries.js","modules/Users/mutations.js","modules/Users/Users.js","pages/UsersPage.js","pages/NotFoundPage.js","containers/Router/index.js","components/SignInForm/index.js","containers/App/mutations.js","containers/App/App.js","index.js"],"names":["mainUrl","Boolean","window","location","hostname","match","cache","InMemoryCache","typePolicies","Poll","fields","question","read","LOGOUT_MUTATION","gql","CURRENT_USER_QUERY","UserProfile","close","currentUser","useApolloClient","readQuery","query","useState","anchorEl","setAnchorEl","isMenuOpen","useMutation","update","writeQuery","data","logout","handleMenuClose","renderMenu","Menu","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","MenuItem","onClick","IconButton","edge","aria-label","aria-controls","aria-haspopup","e","currentTarget","color","Badge","badgeContent","Tooltip","title","username","useStyles","makeStyles","list","width","fullList","ServiceMenu","classes","Drawer","anchor","className","clsx","role","onKeyDown","List","Typography","variant","style","fontSize","to","ListItem","button","key","ListItemIcon","ListItemText","primary","Divider","theme","grow","flexGrow","menuButton","marginRight","spacing","display","breakpoints","up","inputRoot","sectionDesktop","sectionMobile","link","textDecoration","HomeBar","React","appAnchorEl","setAppAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","menuOpen","setMenuOpen","isMobileMenuOpen","isAppMenuOpen","handleAppsMenuOpen","event","handleMobileMenuClose","handleAppMenuClose","renderAppsMenu","renderMobileMenu","AppBar","position","Toolbar","noWrap","StyledBadge","withStyles","badge","backgroundColor","boxShadow","palette","background","paper","top","left","height","borderRadius","animation","border","content","transform","opacity","root","avatar","ActiveAvatar","active","overlap","Avatar","liter","pollWays","maxWidth","margin","header","padding","flex","PollCard","Results","code","Drive","Attachment","Settings","Wiki","Card","CardHeader","PollAvatar","action","subheader","startDate","endDate","CardContent","Grid","container","item","xs","sm","gutterBottom","way","sample","CardActions","disableSpacing","cities","length","justify","ListOfPolls","polls","map","poll","i","backdrop","zIndex","drawer","small","bottom","right","LoadingState","props","imageWidth","imageHeight","size","type","Box","textAlign","image","clone","mb","description","defaultProps","CircularProgress","LoadingStatus","Backdrop","SystemNoti","Alert","elevation","Snackbar","autoHideDuration","duration","severity","text","popover","pointerEvents","ErrorState","handlePopoverOpen","handlePopoverClose","PopOver","Popover","disableRestoreFocus","onMouseEnter","onMouseLeave","speedDial","actions","icon","name","SpeedDials","direction","setOpen","hidden","handleClose","SpeedDial","ariaLabel","SpeedDialIcon","onOpen","SpeedDialAction","tooltipTitle","tooltipOpen","GET_ALL_ACTIVE_POLLS","ADD_NEW_POLL","PollHome","noti","setNoti","useQuery","pollsLoading","loading","pollsError","error","pollsData","onError","console","log","addPoll","addLoading","Loading","Container","HomePage","arrow","SettingBar","FreeAnswer","answer","focusHandler","blurHandler","textInput","useRef","useEffect","focus","current","freeAnswerText","value","showFreeAnswer","ref","data-code","data-keycode","keyCode","placeholder","onKeyUp","val","replaceAll","blur","onFocus","onBlur","Answer","clickHandler","settings","answerRef","answerCls","answerTitle","selected","push","disabled","join","showIndex","codesShow","freeAnswer","excludeM","marginTop","errorText","Tags","limit","multipleHandler","answers","setAnswers","codes","setCodes","state","setError","defVal","filter","codesOfAnswers","Autocomplete","multiple","options","onChange","reason","getOptionLabel","option","getOptionDisabled","renderOption","renderTags","getTagProps","index","Chip","label","renderInput","params","TextField","helperText","Question","count","mega","FinishDialog","finishAll","confirm","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","serviceBtns","resetBtn","confirmBtns","castCodes","97","98","99","100","101","102","103","104","105","answersCodes","keycodes","cast","undefined","defineSelectedAnswer","includes","checkAnswerSelected","do","trueCode","checkServiceBtn","checkResetBtn","checkConfirmBtn","questionFormation","result","logic","setResults","questions","keyCodesPool","codesPool","visibleAnswers","invisible","obj","exclude","criticalExclude","uniqueIn","selectedIn","uniqueSelected","newAnswers","suffix","pool","unique","freeAnswers","answerCode","qSuffix","megaMltp","reduce","acum","prevState","next","mAnswers","beep","config","audioCtx","AudioContext","webkitAudioContext","Object","assign","volume","frequency","oscillator","createOscillator","gainNode","createGain","connect","destination","gain","start","setTimeout","stop","PollDrive","logics","setCurrentQuestion","saveAndGoBack","saveWorksheet","questionsLimit","setQuestion","userSettings","setUserSettings","setDirection","setCount","results","finish","setFinish","finishDialog","setFinishDialog","inlineMessage","setInlineMessage","keyUpHandler","target","nodeName","nextStep","mainLogic","confirmResults","resetAnswers","finishRespondent","goToNext","goToPrevious","document","addEventListener","removeEventListener","newQuestion","checkRespondentFinish","newResults","resPool","eCode","savedCodes","excludePool","selectedAnswer","el","answerId","nonCriticalExclude","newResultState","InlineInformer","alignItems","md","FormControlLabel","control","Checkbox","defaultChecked","labelPlacement","Hidden","only","mdUp","dataset","selectedCode","selectedKeyCode","keycode","resultsPool","clearPool","DialogWithSelect","save","setState","Select","fullWidth","native","selectedIndex","innerHTML","handleChange","GET_POLL_DATA","SAVE_NEW_RESULT","parseIni","area","regex","section","param","comment","lines","split","forEach","line","test","parseParams","property","concatLogic","temp","trimData","replace","srange","output","exec","range","concat","rangeToArray","end","padStart","normalizeLogic","normalizedLogic","difficult","critical","invisiblePool","client","show","message","history","useHistory","setPoll","poolOfCities","setPoolOfCities","openCityDialog","setOpenCityDialog","setPollLogic","currentCity","setCurrentCity","currentQuestion","variables","onCompleted","_","__","handleConfigFile","path","filePath","fetch","then","r","normLogic","saveResult","saveLoading","newOrderQuestion","slice","sort","a","b","order","visibleQuestions","lAnswers","JSON","stringify","prepareResultData","city","DriveLogic","user","res","DrivePage","useParams","TabPanel","children","p","other","allProps","tabs","minWidth","borderRight","divider","overflow","Vertical","Tabs","orientation","scrollButtons","Tab","Horizontal","AdaptiveTabs","setValue","newValue","xsDown","smUp","component","Generation","setQuestions","setLogic","questionsCount","answersCount","modQuestions","InputLabelProps","shrink","worksheetsCount","ConfirmDialog","RespondentCard","edit","select","Paper","processed","checked","inputProps","created","lastModified","GET_FILTER_SELECTS","GET_POLL_RESULTS","DELETE_RESULTS","OverallResults","ddate","setDdate","Date","delOpen","setDelOpen","activeResults","setActiveResults","intervievers","status","sex","age","filters","setFilters","activeFilters","setActiveFilters","selectPool","setSelectPool","lastSelectedIndex","setLastSelectedIndex","delConfirm","pollResults","pollResultsLoading","pollResultsError","filtersResults","category","iViever","filtersResultsError","deleteResult","loadOnDelete","rrr","showDetails","datails","handleEdit","handleSelect","nativeEvent","shiftKey","rr","ctrlKey","n","handleResultsExport","lResults","allResults","details","downloadIt","element","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","checkedIcon","deletedPool","deleteResults","del","modify","existingRefs","readField","respRef","startIcon","lg","date","InputProps","startAdornment","InputAdornment","cursor","limitTags","disableCloseOnSelect","clearOnEscape","noOptionsText","Fragment","groupBy","values","m","BarChart","labels","set","chartRef","myChartRef","getContext","Chart","datasets","showLines","hover","animationDuration","responsiveAnimationDuration","legend","fontColor","scales","yAxes","ticks","beginAtZero","LinearTable","curr","colspan","toFixed","GET_POLL_WITH_RESULTS","LinearDistribution","BatchInput","dataPool","setDataPool","processing","setProcessing","displayData","setDisplayData","pollData","resultPoolLength","newQuestionsPool","newAnswersPool","pollDataLoading","pollDataError","onInput","preventDefault","files","reader","FileReader","onloadend","oprArray","arr","aLength","splitedCodesArrays","tempAr","tempLength","normTemp","j","atomData","trim","readAsText","PollResults","xmlparser","xmlString","xml","parser","DOMParser","parsererrorNS","parseFromString","getElementsByTagName","namespaceURI","doc","getElementsByTagNameNS","testXml","outData","resultData","unit","getAttribute","lan","lon","lQuestions","answersPool","ParchaXmlAnalyzer","parchaData","setParchaData","UnitInfo","toString","xmlText","WarShow","person","placesOfWork","places","workD","workDays","d","substring","processLists","war","pens","resulNeedData","doesNotMatch","warMatchPool","pensData","empty","need","warPersonName","warPersonBorn","warPersonSurname","toLowerCase","comp","pensNeedData","resultNotNeedData","warPersonNum","warPersonRank","warPersonDismissal","persD","compareLists","finalResult","personData","splited","glueNormData","getDateFromString","dString","dd","month","year","placesRaw","dates","work","dataReg","k","WordAnalyzer","setPensData","warData","setWarData","errorMessage","setMessage","ready","setReady","processedData","setProcessedData","finalData","setFinalData","persons","warior","regEx","full","pensParser","pData","itrestPerson","dateReg","dateOfDismissal","parse","dateMatch","maxNeedDate","parseInt","workDate","workArray","dateInWork","PollSettings","Analyze","paddingTop","DataAnalyzer","TesterPage","ServiceIcons","AnswerCard","QuestionTopic","topic","QuestionCard","CommonSetting","handleConfigFileAndUpdateCache","updatedQuestions","modulateQuestionsWithLogic","ffffuck","logicQuery","saveConfigChanges","ConfigEditor","updated","setUpdated","setConfig","setFilePath","textRef","pollLogic","refetchQueries","saveConfig","configSaveLoading","defaultValue","DELETE_POLL","DeletePoll","incorrect","setIncorrect","delPoll","toUpperCase","handlePollDel","GET_ALL_CITIES_AND_ACTIVE","DELETE_CITY_FROM_ACTIVE","SET_ACTIVE_CITIES","CitiesEditor","clear","setClear","delId","setDelId","allCities","setAllCitites","availableCities","setAvailableCities","setSelected","pollCities","citiesData","citiesLoading","cititesError","setPollCity","setCityActive","cityActivationLoading","deleteCityFromActive","aCitites","deleteCity","deleteCityLoading","handleCityDelete","deleteCityCompletely","CityCard","xl","population","selectedCities","handleLimitInput","setVal","currentValue","pollQuery","saveNewLimit","saveNewOrder","ReoderEditor","setPrevOrder","pollLoading","pollError","saveLimit","limitSaveLoading","newOrder","saveOrder","saveOrderLoading","inputData","SortableItem","SortableElement","SortableList","SortableContainer","onSortEnd","oldIndex","newIndex","newArray","arrayMove","deltaArray","axis","Common","PollFiles","PollWiki","GET_CITITES_WITH_CATEGORIES","CITY_SAVE_MUTATION","CITY_EDIT_SAVE","DELETE_CITY","Cities","cityAdd","setCityAdd","citiesError","newCity","saveCity","saveCityLoading","cityEdit","saveCityEdit","saveCityEditLoading","editting","setEditting","CityAdd","setEdit","setTitle","setPopulation","setCategory","onSubmit","required","SelectProps","cityCategories","newData","handleSaveEdit","cityData","Sample","PollAppSettings","PollAppSettingsPage","UserAddDialog","saveNewUser","selects","userData","setUserData","login","password","FormControl","InputLabel","htmlFor","userStatus","FormHelperText","rights","userRights","UserUpdateDialog","updateUser","PassResetDialog","passReset","descendingComparator","orderBy","headCells","numeric","disablePadding","EnhancedTableHead","onSelectAllClick","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","indeterminate","headCell","align","TableSortLabel","hideSortIcon","visuallyHidden","useToolbarStyles","paddingLeft","paddingRight","highlight","secondary","main","lighten","light","dark","EnhancedTableToolbar","deleteDelete","setUserAddOpen","marginBottom","table","clip","UsersTable","users","addNewUser","deleteUsers","resetPassword","deleteDialog","setDeleteDialog","userAddOpen","userUpdate","setUserUpdate","setPassReset","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","TableContainer","Table","newSelecteds","TableBody","array","comparator","stabilizedThis","stableSort","getComparator","row","isItemSelected","indexOf","labelId","aria-checked","tabIndex","newSelected","handleClick","scope","handleRowEdit","handlePassReset","TablePagination","rowsPerPageOptions","labelRowsPerPage","onChangePage","newPage","onChangeRowsPerPage","GET_ALL_USERS","GET_AUTH_SELECTS","ADD_NEW_USER","UPDATE_USER","DELETE_USERS","RESET_PASSWORD","Users","dataLoading","dataError","selectsLoading","selectsError","deleteLoading","addUser","updateLoading","UsersPage","NotFoundPage","Router","exact","ResultsPage","SettingsPage","AnalyzePage","AttachmentPage","WikiPage","Copyright","getFullYear","flexDirection","form","submit","forget","SignIn","onLogin","userError","passwordError","setlogin","setPassword","CssBaseline","noValidate","autoComplete","SIGNIN_MUTATION","App","setPasswordError","setUserError","signin","signinLoading","SignInForm","ApolloClient","uri","credentials","connectToDevTools","ReactDOM","render","StrictMode","ApolloProvider","getElementById","navigator","serviceWorker","registration","unregister","catch"],"mappings":"qLACaA,EAAU,4B,mCCWHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,IChBOC,EAAQ,I,OAAIC,GAAc,CACrCC,aAAc,CACZC,KAAM,CACJC,OAAQ,CACNC,SAAU,CACRC,KADQ,SACHD,GACH,OAAOA,S,gWCNZ,IAAME,EAAkBC,YAAH,K,2ICArB,IAAMC,EAAqBD,YAAH,K,2JCa/B,IAuEeE,EAvEK,SAAC,GAAc,EAAZC,MAAa,IAE1BC,EADOC,cACgBC,UAAU,CACvCC,MAAOP,YAAF,OADCI,YAFyB,EAYDI,mBAAS,MAZR,mBAY1BC,EAZ0B,KAYhBC,EAZgB,KAa3BC,EAAaxB,QAAQsB,GAbM,EAchBG,sBACfb,EACA,CACEc,OAAQ,SAACrB,GAAD,OAAWA,EAAMsB,WAAW,CAClCP,MAAON,EACPc,KAAM,CAAEX,YAAa,WALpBY,EAd0B,oBAwB3BC,EAAkB,WACtBP,EAAY,OASRQ,EACJ,kBAACC,EAAA,EAAD,CACEV,SAAUA,EACVW,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CC,GAfW,eAgBXC,aAAW,EACXC,gBAAiB,CAAEJ,SAAU,MAAOC,WAAY,SAChDI,KAAMf,EACNgB,QAASV,GAGT,kBAACW,EAAA,EAAD,CAAUC,QAlBY,WACxBb,IACAC,MAgBE,mCAGJ,OACE,kBAAC,WAAD,KACE,kBAACa,EAAA,EAAD,CACEC,KAAK,MACLC,aAAW,0BACXC,gBA9BS,eA+BTC,gBAAc,OACdL,QAxBwB,SAACM,GAC7BzB,EAAYyB,EAAEC,gBAwBVC,MAAM,WAEN,kBAACC,EAAA,EAAD,CAAOC,aAAc,EAAGF,MAAM,aAC5B,kBAACG,EAAA,EAAD,CACEC,MAAOrC,EAAYsC,UAEnB,kBAAC,IAAD,SAIJxB,I,4IC/DFyB,GAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,KAETC,SAAU,CACRD,MAAO,UAII,SAASE,GAAT,GAAuC,IAAhBtB,EAAe,EAAfA,KAAMvB,EAAS,EAATA,MACpC8C,EAAUN,KAgDhB,OACE,kBAACO,EAAA,EAAD,CAAQC,OAAQ,OAAQzB,KAAMA,EAAMC,QAASxB,EAAOiD,UAAU,iBA/C9D,yBACEA,UAAWC,YAAKJ,EAAQJ,MACxBS,KAAK,eACLzB,QAAS1B,EACToD,UAAWpD,GAEX,kBAACqD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,WAAWC,MAAO,CAAEC,SAAU,SAAlD,2GAGA,kBAAC,IAAD,CAASC,GAAG,WACV,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAK,GACpB,kBAACC,EAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,EAAA,EAAD,CAAcC,QAAQ,mEAS1B,kBAACL,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAK,GACpB,kBAACC,EAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,EAAA,EAAD,CAAcC,QAAQ,uGAExB,kBAAC,IAAD,CAASN,GAAG,qBACV,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAK,GACpB,kBAACC,EAAA,EAAD,KAAc,kBAAC,IAAD,OACd,kBAACC,EAAA,EAAD,CAAcC,QAAQ,6DAG1B,kBAACV,EAAA,EAAD,CAAYC,QAAQ,WAAWC,MAAO,CAAEC,SAAU,SAAlD,kCAGA,kBAACQ,EAAA,EAAD,MACA,kBAAC,IAAD,CAASP,GAAG,kBACV,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAK,GACpB,kBAACC,EAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,EAAA,EAAD,CAAcC,QAAQ,kFCjDlC,IAAMxB,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BjC,MAAM,aACJkC,QAAS,QACRN,EAAMO,YAAYC,GAAG,MAAQ,CAC5BF,QAAS,UAGbG,UAAW,CACTzC,MAAO,WAET0C,eAAe,aACbJ,QAAS,QACRN,EAAMO,YAAYC,GAAG,MAAQ,CAC5BF,QAAS,SAGbK,cAAc,aACZL,QAAS,QACRN,EAAMO,YAAYC,GAAG,MAAQ,CAC5BF,QAAS,SAGbM,KAAM,CACJ5C,MAAO,QACP6C,eAAgB,YAmJLC,GA/IC,SAAC,GAAe,IAAb1C,EAAY,EAAZA,MACXQ,EAAUN,KADa,EAESyC,IAAM5E,SAAS,MAFxB,mBAEtB6E,EAFsB,KAETC,EAFS,OAGuBF,IAAM5E,SAAS,MAHtC,mBAGtB+E,EAHsB,KAGFC,EAHE,OAIGJ,IAAM5E,UAAS,GAJlB,mBAItBiF,EAJsB,KAIZC,EAJY,KAMvBC,EAAmBxG,QAAQoG,GAC3BK,EAAgBzG,QAAQkG,GAExBQ,EAAqB,SAACC,GAC1BR,EAAeQ,EAAM1D,gBAGjB2D,EAAwB,WAC5BP,EAAsB,OAIlBQ,EAAqB,WACzBV,EAAe,MACfS,KAiBIE,EACJ,kBAAC9E,EAAA,EAAD,CACEV,SAAU4E,EACVjE,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CC,GANe,oBAOfC,aAAW,EACXC,gBAAiB,CAAEJ,SAAU,MAAOC,WAAY,SAChDI,KAAMkE,EACNjE,QAASqE,GAET,kBAACpE,EAAA,EAAD,CAAUC,QAASmE,GAAnB,oCACA,kBAACpE,EAAA,EAAD,CAAUC,QAASmE,GAAnB,qCAKEE,EACJ,kBAAC/E,EAAA,EAAD,CACEV,SAAU8E,EACVnE,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CC,GALiB,8BAMjBC,aAAW,EACXC,gBAAiB,CAAEJ,SAAU,MAAOC,WAAY,SAChDI,KAAMiE,EACNhE,QAASoE,GAET,kBAACnE,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAYO,MAAM,WAChB,kBAACC,EAAA,EAAD,CAAOC,aAAc,EAAGF,MAAM,aAC5B,kBAAC,IAAD,QAGJ,kGAEF,kBAACT,EAAA,EAAD,CAAUC,QAASgE,GACjB,kBAAC/D,EAAA,EAAD,CACEE,aAAW,YACXC,gBAAc,oBACdC,gBAAc,OACdG,MAAM,WACN,kBAAC,IAAD,OAEF,4FAEF,kBAACT,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,wCAKN,OACE,yBAAKwB,UAAWH,EAAQqB,MACtB,kBAAC6B,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACvE,EAAA,EAAD,CACEC,KAAK,QACLqB,UAAWH,EAAQuB,WACnBnC,MAAM,UACNR,QArEc,SAACM,GACvBuD,GAAY,IAqEJ1D,aAAW,eAEX,kBAAC,IAAD,OAEF,kBAACyB,EAAA,EAAD,CAAYL,UAAWH,EAAQR,MAAOiB,QAAQ,KAAK4C,QAAM,GACtD7D,GAEH,yBAAKW,UAAWH,EAAQqB,OACxB,yBAAKlB,UAAWH,EAAQ8B,gBACtB,kBAACjD,EAAA,EAAD,CAAYO,MAAM,WAChB,kBAACC,EAAA,EAAD,CAAOC,aAAc,EAAGF,MAAM,aAC5B,kBAAC,IAAD,QAGJ,kBAACP,EAAA,EAAD,CACEE,aAAW,OACXC,gBA9EO,oBA+EPC,gBAAc,OACdL,QAASgE,EACTxD,MAAM,WACN,kBAACC,EAAA,EAAD,CAAOC,aAAc,EAAGF,MAAM,aAC5B,kBAAC,IAAD,QAGJ,kBAAC,EAAD,OAEF,yBAAKe,UAAWH,EAAQ+B,eACtB,kBAAClD,EAAA,EAAD,CACEE,aAAW,YACXC,gBA1ES,8BA2ETC,gBAAc,OACdL,QAzGiB,SAACiE,GAC5BN,EAAsBM,EAAM1D,gBAyGlBC,MAAM,WAEN,kBAAC,IAAD,UAKR,kBAACW,GAAD,CAAatB,KAAM+D,EAAUtF,MAzGR,SAACgC,GACxBuD,GAAY,MAyGTQ,EACAD,I,4KC3LDM,GAAcC,cAAW,SAACnC,GAAD,MAAY,CACzCoC,MAAO,CACLC,gBAAiB,UACjBrE,MAAO,UACPsE,UAAU,aAAD,OAAetC,EAAMuC,QAAQC,WAAWC,OACjD,WAAY,CACVV,SAAU,WACVW,IAAK,OACLC,KAAM,OACNlE,MAAO,OACPmE,OAAQ,OACRC,aAAc,MACdC,UAAW,oCACXC,OAAQ,yBACRC,QAAS,OAGb,oBAAqB,CACnB,KAAM,CACJC,UAAW,YACXC,QAAS,GAEX,OAAQ,CACND,UAAW,aACXC,QAAS,OAxBKf,CA2BhBlE,KAEEK,GAAYC,YAAY,CAC5B4E,KAAM,CACJ7C,QAAS,QAEX8C,OAAQ,CACNf,gBAAiB,SAAA3F,GAAI,OAAIA,EAAKsB,UAiCnBqF,GA7BM,SAAC,GAAc,IAAZ3G,EAAW,EAAXA,KAChBkC,EAAUN,GAAU5B,GAC1B,OAAIA,EAAK4G,OAEL,yBAAKvE,UAAWH,EAAQuE,MACtB,kBAACjB,GAAD,CACEqB,QAAQ,SACRxG,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdoC,QAAQ,OAER,kBAACmE,GAAA,EAAD,CAAQzE,UAAWH,EAAQwE,QACzB,0BAAMrE,UAAU,oBAAoBrC,EAAK+G,UAOjD,yBAAK1E,UAAWH,EAAQuE,MACtB,kBAACK,GAAA,EAAD,CAAQzE,UAAWH,EAAQwE,QACxB1G,EAAK+G,SClEDC,GAAW,CACtB,mGACA,iFACA,+DACA,OCmBIpF,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCmD,KAAM,CACJQ,SAAU,OACVC,OAAQ,UAEVC,OAAQ,CACNC,QAAS,oBAEXd,QAAS,CACPe,KAAM,EACND,QAAS,wBAgHEE,GA5GE,SAAC,GAAc,IAAZtH,EAAW,EAAXA,KACZkC,EAAUN,KACV2F,EAAU,WACd,OACE,kBAAC9F,EAAA,EAAD,CAASC,MAAM,gEACb,kBAAC,IAAD,CAASoB,GAAE,mBAAc9C,EAAKQ,GAAnB,YAAyBR,EAAKwH,OACvC,kBAACzG,EAAA,EAAD,KACE,kBAAC,KAAD,UAMJ0G,EAAQ,WACZ,OACE,kBAAChG,EAAA,EAAD,CAASC,MAAM,+FACb,kBAAC,IAAD,CAASoB,GAAE,iBAAY9C,EAAKQ,GAAjB,YAAuBR,EAAKwH,OACrC,kBAACzG,EAAA,EAAD,KACE,kBAAC,KAAD,UAMJ2G,EAAa,WACjB,OACE,kBAACjG,EAAA,EAAD,CAASC,MAAM,kCACb,kBAAC,IAAD,CAASoB,GAAE,sBAAiB9C,EAAKQ,GAAtB,YAA4BR,EAAKwH,OAC1C,kBAACzG,EAAA,EAAD,KACE,kBAAC,KAAD,UAMJ4G,EAAW,WACf,OACE,kBAAClG,EAAA,EAAD,CAASC,MAAM,+FACb,kBAAC,IAAD,CAASoB,GAAE,yBAAoB9C,EAAKQ,GAAzB,YAA+BR,EAAKwH,OAC7C,kBAACzG,EAAA,EAAD,KACE,kBAAC,IAAD,UAMJ6G,EAAO,WACX,OACE,kBAACnG,EAAA,EAAD,CAASC,MAAM,8CACb,kBAAC,IAAD,CAASoB,GAAE,qBAAgB9C,EAAKQ,GAArB,YAA2BR,EAAKwH,OACzC,kBAACzG,EAAA,EAAD,KACE,kBAAC,KAAD,UAOV,OACE,kBAAC,WAAD,KACE,kBAAC8G,GAAA,EAAD,CAAMxF,UAAWH,EAAQuE,MACvB,kBAACqB,GAAA,EAAD,CAAYzF,UAAWH,EAAQiF,OAC7BT,OACE,kBAACqB,GAAD,CAAY/H,KAAMA,IAEpBgI,OACE,kBAACL,EAAD,MAEFjG,MAAO1B,EAAKwH,KAAO,KAAOxH,EAAK0B,MAC/BuG,UAAWjI,EAAKkI,UAAY,MAAQlI,EAAKmI,UAE3C,kBAACC,GAAA,EAAD,CAAa/F,UAAWH,EAAQoE,SAC9B,kBAAC+B,GAAA,EAAD,CAAMC,WAAS,EAAC3E,QAAS,GACvB,kBAAC0E,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC/F,EAAA,EAAD,CAAYC,QAAQ,SAASiB,QAAQ,QAAQ8E,cAAY,GAAzD,gGACqB1B,GAAShH,EAAK2I,OAGrC,kBAACN,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC/F,EAAA,EAAD,CAAYC,QAAQ,SAASiB,QAAQ,QAAQ8E,cAAY,GAAzD,6EACiB1I,EAAK4I,WAK5B,kBAACC,GAAA,EAAD,CAAaC,gBAAc,GACzB,kBAACT,GAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,GAAI,IACvB,kBAACjB,EAAD,MACCvH,EAAK+I,OAAOC,OACX,kBAACvB,EAAD,MACA,kBAAChG,EAAA,EAAD,CAASC,MAAM,4OACb,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,WAAWiB,QAAQ,QAAQ8E,cAAY,EAACrG,UAAU,wBAAtE,iGAON,kBAACgG,GAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,GAAI,GAAIS,QAAQ,YACnC,kBAACvB,EAAD,MACA,kBAACE,EAAD,WChIGsB,GANK,SAAC,GACnB,OADgC,EAAXlJ,KACTmJ,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACpB,kBAAC,GAAD,CAAUrG,IAAKqG,EAAGtJ,KAAMqJ,Q,qICMVxH,aAAW,SAACyB,GAAD,MAAY,CACvCiG,SAAU,CACRC,OAAQlG,EAAMkG,OAAOC,OAAS,EAC9BnI,MAAO,Y,cCTOO,aAAW,SAACyB,GAAD,MAAY,CACvCoG,MAAO,CACLrE,SAAU,QACVsE,OAAQ,OACRC,MAAO,YCEX,I,UCPMC,GAAe,SAACC,GACpB,IAAIC,EACAC,EACArH,EAEJ,OAAQmH,EAAMG,MACZ,IAAK,QACHF,EAAa,GACbC,EAAc,GACdrH,EAAU,KACV,MAEF,IAAK,SACHoH,EAAa,GACbC,EAAc,GACdrH,EAAU,KACV,MAEF,IAAK,QACHoH,EAAa,IACbC,EAAc,IACdrH,EAAU,KACV,MAEF,QACEoH,EAAa,GACbC,EAAc,GACdrH,EAAU,KAId,MAAmB,SAAfmH,EAAMI,KAEN,kBAACC,GAAA,EAAD,CACEvH,MAAO,CAAE2D,UAAW,yBACpBlB,SAAS,WACTW,IAAI,MACJC,KAAK,MACLmE,UAAU,UAETN,EAAMO,OACL,kBAACF,GAAA,EAAD,CACEG,OAAK,EACLC,GAAIT,EAAMpI,OAASoI,EAAMU,YAAc,EAAI,EAC3CzI,MAAK,UAAKgI,EAAL,KACL7D,OAAM,UAAK8D,EAAL,MAELF,EAAMO,OAIVP,EAAMpI,OACL,kBAACyI,GAAA,EAAD,CAAKI,IAAKT,EAAMU,aAAeV,EAAM9G,OAAS,EAAI,GAChD,kBAACN,EAAA,EAAD,CAAYC,QAASA,GAAUmH,EAAMpI,QAIxCoI,EAAMU,aACL,kBAACL,GAAA,EAAD,CAAKI,GAAIT,EAAM9G,QAAU,GACvB,kBAACN,EAAA,EAAD,CAAYC,QAAQ,SAASmH,EAAMU,cAItCV,EAAM9G,QAAU8G,EAAM9G,QAKV,SAAf8G,EAAMI,KAEN,kBAACC,GAAA,EAAD,CAAK/C,QAAS0C,EAAM1C,QAASgD,UAAU,UACpCN,EAAMO,OACL,kBAACF,GAAA,EAAD,CACEG,OAAK,EACLC,GAAIT,EAAMpI,OAASoI,EAAMU,YAAc,EAAI,EAC3CzI,MAAK,UAAKgI,EAAL,KACL7D,OAAM,UAAK8D,EAAL,MAELF,EAAMO,OAIVP,EAAMpI,OACL,kBAACyI,GAAA,EAAD,CAAKI,IAAKT,EAAMU,aAAeV,EAAM9G,OAAS,EAAI,GAChD,kBAACN,EAAA,EAAD,CAAYC,QAASA,GAAUmH,EAAMpI,QAIxCoI,EAAMU,aACL,kBAACL,GAAA,EAAD,CAAKI,GAAIT,EAAM9G,QAAU,GACvB,kBAACN,EAAA,EAAD,CAAYC,QAAQ,SAASmH,EAAMU,cAItCV,EAAM9G,QAAU8G,EAAM9G,QAItB,MAGT6G,GAAaY,aAAe,CAC1BJ,MAAO,kBAACK,GAAA,EAAD,MACPhJ,MAAO,mDACP8I,YAAa,sHACbN,KAAM,OACND,KAAM,SACN7C,QAAS,GAIIyC,UC7GTjI,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCiG,SAAU,CACRC,OAAQlG,EAAMkG,OAAOC,OAAS,EAC9BnI,MAAO,YAaIqJ,GATO,WACpB,IAAMzI,EAAUN,KAChB,OACE,kBAACgJ,GAAA,EAAD,CAAUvI,UAAWH,EAAQqH,SAAU5I,MAAM,GAC3C,kBAAC+J,GAAA,EAAD,CAAkBpJ,MAAM,c,oBCbxBuJ,GAAa,SAACf,GAElB,IAAMgB,EAAQ,SAAChB,GACb,OAAO,kBAAC,KAAD,eAAUiB,UAAW,EAAGpI,QAAQ,UAAamH,KAGtD,OACE,kBAACkB,GAAA,EAAD,CAAUrK,KAAMmJ,EAAMnJ,KAAMsK,iBAAkBnB,EAAMoB,SAAUtK,QAASkJ,EAAM1K,OAC3E,kBAAC0L,EAAD,CAAOK,SAAUrB,EAAMI,KAAMtJ,QAASkJ,EAAM1K,OACzC0K,EAAMsB,QAOfP,GAAWJ,aAAe,CACxBP,KAAM,QACNgB,SAAU,KAGGL,U,+BClBTjJ,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvC+H,QAAS,CACPC,cAAe,QAEjBvF,MAAO,CACLqB,QAAS9D,EAAMK,QAAQ,QAKrB4H,GAAa,SAACzB,GAAW,IAwCzBC,EACAC,EACArH,EA1CwB,EACI0B,IAAM5E,SAAS,MADnB,mBACrBC,EADqB,KACXC,EADW,KAEtBuC,EAAUN,KAEV4J,EAAoB,SAACzG,GACzBpF,EAAYoF,EAAM1D,gBAGdoK,EAAqB,WACzB9L,EAAY,OAGRgB,EAAOvC,QAAQsB,GAEfgM,EAAU,SAAC,GAAc,IAAZ/K,EAAW,EAAXA,KACjB,OACE,kBAACgL,GAAA,EAAD,CACEnL,GAAG,qBACH6B,UAAWH,EAAQmJ,QACnBnJ,QAAS,CACP6D,MAAO7D,EAAQ6D,OAEjBpF,KAAMA,EACNjB,SAAUA,EACVW,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdG,gBAAiB,CACfJ,SAAU,MACVC,WAAY,QAEdK,QAAS6K,EACTG,qBAAmB,GAEnB,kBAAClJ,EAAA,EAAD,QASN,OAAQoH,EAAMG,MACZ,IAAK,QACHF,EAAa,GACbC,EAAc,GACdrH,EAAU,KACV,MAEF,IAAK,SACHoH,EAAa,GACbC,EAAc,GACdrH,EAAU,KACV,MAEF,IAAK,QACHoH,EAAa,IACbC,EAAc,IACdrH,EAAU,KACV,MAEF,QACEoH,EAAa,GACbC,EAAc,GACdrH,EAAU,KAId,MAAmB,SAAfmH,EAAMI,KAEN,kBAAC,WAAD,KACE,kBAACwB,EAAD,CAAS/K,KAAMA,IACf,kBAACwJ,GAAA,EAAD,CACEvH,MAAO,CAAE2D,UAAW,yBACpBlB,SAAS,WACTW,IAAI,MACJC,KAAK,MACLmE,UAAU,UAETN,EAAMO,OACL,kBAACF,GAAA,EAAD,CACEG,OAAK,EACLC,GAAIT,EAAMpI,OAASoI,EAAMU,YAAc,EAAI,EAC3CzI,MAAK,UAAKgI,EAAL,KACL7D,OAAM,UAAK8D,EAAL,MAELF,EAAMO,OAIVP,EAAMpI,OACL,kBAACyI,GAAA,EAAD,CAAKI,IAAKT,EAAMU,aAAeV,EAAM9G,OAAS,EAAI,GAChD,kBAACN,EAAA,EAAD,CAAYC,QAASA,GAAUmH,EAAMpI,QAIxCoI,EAAMU,aACL,kBAACL,GAAA,EAAD,CAAKI,GAAIT,EAAM9G,QAAU,GACvB,kBAACN,EAAA,EAAD,CAAYC,QAAQ,SAASmH,EAAMU,cAGvC,kBAAC,KAAD,CACEqB,aAAcL,EACdM,aAAcL,IAGf3B,EAAM9G,QAAU8G,EAAM9G,SAMZ,SAAf8G,EAAMI,KAEN,kBAAC,WAAD,KACE,kBAACwB,EAAD,CAAS/K,KAAMA,IACf,kBAACwJ,GAAA,EAAD,CAAK/C,QAAS0C,EAAM1C,QAASgD,UAAU,UACpCN,EAAMO,OACL,kBAACF,GAAA,EAAD,CACEG,OAAK,EACLC,GAAIT,EAAMpI,OAASoI,EAAMU,YAAc,EAAI,EAC3CzI,MAAK,UAAKgI,EAAL,KACL7D,OAAM,UAAK8D,EAAL,MAELF,EAAMO,OAIVP,EAAMpI,OACL,kBAACyI,GAAA,EAAD,CAAKI,IAAKT,EAAMU,aAAeV,EAAM9G,OAAS,EAAI,GAChD,kBAACN,EAAA,EAAD,CAAYC,QAASA,GAAUmH,EAAMpI,QAIxCoI,EAAMU,aACL,kBAACL,GAAA,EAAD,CAAKI,GAAIT,EAAM9G,QAAU,GACvB,kBAACN,EAAA,EAAD,CAAYC,QAAQ,SAASmH,EAAMU,cAGvC,kBAAC,KAAD,CACEqB,aAAcL,EACdM,aAAcL,IAGf3B,EAAM9G,QAAU8G,EAAM9G,SAKxB,MAGTuI,GAAWd,aAAe,CACxB/I,MAAO,uCACP8I,YAAa,iGACbN,KAAM,OACND,KAAM,SACN7C,QAAS,GAIImE,U,uICxKT3J,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCmD,KAAM,CACJpB,SAAU,QACVsE,OAAQ,OACRC,MAAO,QAETmC,UAAW,CACT1G,SAAU,WACVsE,OAAQrG,EAAMK,QAAQ,GACtBiG,MAAOtG,EAAMK,QAAQ,QAInBqI,GAAU,CACd,CAAEC,KAAM,kBAAC,KAAD,MAAkBC,KAAM,QAChC,CAAED,KAAM,kBAAC,KAAD,MAAcC,KAAM,QAC5B,CAAED,KAAM,kBAAC,KAAD,MAAeC,KAAM,SAC7B,CAAED,KAAM,kBAAC,KAAD,MAAeC,KAAM,SAC7B,CAAED,KAAM,kBAAC,KAAD,MAAkBC,KAAM,SAGnB,SAASC,KACtB,IAAMjK,EAAUN,KADmB,EAEDyC,IAAM5E,SAAS,MAFd,mBAE5B2M,EAF4B,aAGX/H,IAAM5E,UAAS,IAHJ,mBAG5BkB,EAH4B,KAGtB0L,EAHsB,OAIPhI,IAAM5E,UAAS,GAJR,mBAI5B6M,EAJ4B,KAM7BC,GAN6B,KAMf,WAClBF,GAAQ,KAOV,OACE,yBAAKhK,UAAWH,EAAQuE,MACtB,kBAACmE,GAAA,EAAD,CAAUjK,KAAMA,IAEhB,kBAAC6L,GAAA,EAAD,CACEC,UAAU,oBACVpK,UAAWH,EAAQ6J,UACnBO,OAAQA,EACRL,KAAM,kBAACS,GAAA,EAAD,MACN9L,QAAS2L,EACTI,OAda,WACjBN,GAAQ,IAcJ1L,KAAMA,EACNyL,UAAWA,GAEVJ,GAAQ5C,KAAI,SAACpB,GAAD,OACX,kBAAC4E,GAAA,EAAD,CACE3J,IAAK+E,EAAOkE,KACZD,KAAMjE,EAAOiE,KACbY,aAAc7E,EAAOkE,KACrBY,aAAW,EACXhM,QAASyL,S,yXCjEd,IAAMQ,GAAuB9N,YAAH,M,oiBCA1B,IAAM+N,GAAe/N,YAAH,MC8EVgO,GA7DE,WAAO,IAAD,EACGxN,oBAAS,GADZ,mBACdyN,EADc,KACRC,EADQ,OAOjBC,aAASL,IAHFM,EAJU,EAInBC,QACOC,EALY,EAKnBC,MACMC,EANa,EAMnBzN,KANmB,EAWhBH,sBAAYmN,GAAc,CAC7BU,QAAS,SAACtM,GACR+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,2MAERuC,QAAQC,IAAIxM,IAEdtB,OAAQ,SAACrB,EAAD,GAAsB,IAAZuB,EAAW,EAAXA,KACRmJ,EAAU1K,EAAMc,UAAU,CAAEC,MAAOuN,KAAnC5D,MACR1K,EAAMsB,WAAW,CAAEP,MAAOuN,GAAsB/M,KAAM,CAAEmJ,MAAM,GAAD,oBAAMA,GAAN,CAAanJ,EAAK6N,gBArB9D,mBAUVC,GAVU,UAUnBR,SAeF,GAAID,EAAc,OAChB,kBAAC,GAAD,MAGF,GAAIE,EAAY,OACd,kBAAC,GAAD,CACE7L,MAAM,iGACN8I,YAAY,wTAIhB,IAAMuD,EAAU,WACd,OAAID,EACK,kBAAC,GAAD,MACF,MAGT,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CACEnN,KAAMuM,EACN9B,KAAM8B,EAAOA,EAAK9B,KAAO,GACzBlB,KAAMgD,EAAOA,EAAKhD,KAAO,GACzB9K,MAAO,kBAAM+N,GAAQ,MAEvB,kBAACY,EAAD,MAEA,kBAACC,GAAA,EAAD,CAAW/G,SAAS,MAClB,kBAAC,GAAD,CAAajH,KAAMyN,KAErB,kBAAC,GAAD,QC3DSQ,GAVE,WAEf,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAASvM,MAAO,yCAChB,kBAAC,GAAD,Q,qBCEAE,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,GAC3BQ,eAAgB,QAElBzC,MAAM,aACJkC,QAAS,QACRN,EAAMO,YAAYC,GAAG,MAAQ,CAC5BF,QAAS,UAGbG,UAAW,CACTzC,MAAO,WAET0C,eAAgB,CACdJ,QAAS,QAEXK,cAAc,aACZL,QAAS,QACRN,EAAMO,YAAYC,GAAG,MAAQ,CAC5BF,QAAS,SAGbsK,MAAO,CACL5M,MAAO,QACP6C,eAAgB,YAqELgK,GAjEI,SAAC,GAAe,IAAbzM,EAAY,EAAZA,MACdQ,EAAUN,KADgB,EAEMyC,IAAM5E,SAAS,MAFrB,mBAEzB6E,EAFyB,KAEZC,EAFY,KAG1BM,EAAgBzG,QAAQkG,GAKxBW,EAAqB,WACzBV,EAAe,OAKXW,EACJ,kBAAC9E,EAAA,EAAD,CACEV,SAAU4E,EACVjE,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CC,GANe,oBAOfC,aAAW,EACXC,gBAAiB,CAAEJ,SAAU,MAAOC,WAAY,SAChDI,KAAMkE,EACNjE,QAASqE,GAET,kBAACpE,EAAA,EAAD,CAAUC,QAASmE,GAAnB,oCACA,kBAACpE,EAAA,EAAD,CAAUC,QAASmE,GAAnB,qCAIJ,OACE,yBAAK5C,UAAWH,EAAQqB,MACtB,kBAAC6B,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAASxC,GAAG,KACV,kBAAC/B,EAAA,EAAD,CACEC,KAAK,QACLqB,UAAWH,EAAQuB,WACnBnC,MAAM,UACNL,aAAW,eAEX,kBAAC,KAAD,CAAeoB,UAAWH,EAAQgM,UAGtC,kBAACxL,EAAA,EAAD,CAAYL,UAAWH,EAAQR,MAAOiB,QAAQ,KAAK4C,QAAM,GACtD7D,GAEH,yBAAKW,UAAWH,EAAQqB,OACxB,yBAAKlB,UAAWH,EAAQ8B,gBACtB,kBAACjD,EAAA,EAAD,CACEC,KAAK,MACLC,aAAW,OACXC,gBAvCO,oBAwCPC,gBAAc,OACdL,QAhDe,SAACiE,GAC1BR,EAAeQ,EAAM1D,gBAgDXC,MAAM,WACN,kBAAC,IAAD,UAKP4D,I,8BCrDQkJ,GAjDI,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACpCC,EAAYC,iBAAO,MACzBC,qBAAU,WACJL,EAAOM,OACTH,EAAUI,QAAQD,QAEU,KAA1BN,EAAOQ,iBACTL,EAAUI,QAAQE,MAAQT,EAAOQ,kBAElC,IAoBH,OAAIR,EAAOU,eAEP,8BACE,2BACE1M,UAAU,cACV6H,KAAK,OACL8E,IAAKR,EACLS,YAAWZ,EAAO7G,KAClB0H,eAAcb,EAAOc,QACrBC,YAAY,mIACZC,QA5Ba,SAACjO,GAEpB,IACI+N,EAAU/N,EAAE+N,QAChB,GAAgB,KAAZA,EAAgB,CAClB,IAAMG,EAAMd,EAAUI,QAAQE,MAAMS,WAHvB,MAG0C,KAGvD,OAFAf,EAAUI,QAAQE,MAAQQ,OAC1BlO,EAAEC,cAAcmO,OAEX,GAAgB,KAAZL,EACT,MAAgC,KAA5BX,EAAUI,QAAQE,WACpBN,EAAUI,QAAQE,MAAQ,SAG5B1N,EAAEC,cAAcmO,QAeZC,QAASnB,EACToB,OAAQnB,KAKT,M,oBCIMoB,GA/CA,SAAC,GAAmE,IAAjEtB,EAAgE,EAAhEA,OAAQuB,EAAwD,EAAxDA,aAActB,EAA0C,EAA1CA,aAAcC,EAA4B,EAA5BA,YAAasB,EAAe,EAAfA,SAC3DC,EAAYrB,iBAAO,MAErBsB,EAAY,CAAC,eACbC,EAAc,CAAC,gBACf3B,EAAO4B,UACTF,EAAUG,KAAK,YAEb7B,EAAO8B,UACTH,EAAYE,KAAK,YAOnB,OACE,kBAAC,WAAD,KACE,yBAAKpP,QAAS,SAACM,GALjBwO,EAAaE,EAAUlB,UAMnBvM,UAAW0N,EAAUK,KAAK,KAC1BpB,IAAKc,EACLb,YAAWZ,EAAOc,SAClB,yBAAK9M,UAAW,gBACd,0BAAMA,UAAW,cAAegM,EAAOgC,WACvC,mCACCR,EAASS,WACR,0BAAMjO,UAAW,eAAiBgM,EAAO7G,MAE3C,qCACA,0BAAMnF,UAAW2N,EAAYI,KAAK,MAAO/B,EAAO3M,OAChD,0BAAMW,UAAU,oBAAoBgM,EAAOkC,WAAa,kBAAC,KAAD,CAAU1N,SAAS,UAAa,MACxF,0BAAMR,UAAU,0BAA0BgM,EAAOmC,WAEnD,6BACGnC,EAAOU,gBACN,kBAAC,GAAD,CACEV,OAAQA,EACRM,MAAON,EAAOM,MACdL,aAAcA,EACdC,YAAaA,Q,oBCtCrB3M,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCmD,KAAM,CACJ1E,MAAO,IACP,YAAa,CACX0O,UAAWnN,EAAMK,QAAQ,KAG7B+M,UAAW,CACTpP,MAAO,WAII,SAASqP,GAAT,GAA2D,IAA3C3Q,EAA0C,EAA1CA,KAAM4Q,EAAoC,EAApCA,MAAOf,EAA6B,EAA7BA,SAAUgB,EAAmB,EAAnBA,gBAC9C3O,EAAUN,KADuD,EAEzCnC,mBAAS,IAFgC,mBAEhEqR,EAFgE,KAEvDC,EAFuD,OAG7CtR,mBAAS,IAHoC,mBAGhEuR,EAHgE,KAGzDC,EAHyD,OAI7CxR,mBAAS,CACjCyR,OAAO,EACP9F,KAAM,KAN+D,mBAIhEoC,EAJgE,KAIzD2D,EAJyD,KASvEzC,qBAAU,WACR,IAAM0C,EAASpR,EAAKqR,QAAO,SAAA/B,GACzB,GAAIA,EAAIW,SAAU,OAAOX,KAErBgC,EAAiBtR,EAAKoJ,KAAI,SAAAkG,GAAG,OAAIA,EAAI9H,QAC3CyJ,EAASK,GACTP,EAAWK,KACV,IA8BH,OACE,yBAAK/O,UAAWH,EAAQuE,MACtB,kBAAC8K,GAAA,EAAD,CACEC,SAAUZ,EAAQ,EAClBpQ,GAAG,gBACHiR,QAASzR,EACT0R,SAlCqB,SAACtQ,EAAG0N,EAAO6C,GACpC,OAAQA,GACN,IAAK,gBACH,GAAI7C,EAAM9F,OAAS4H,EAEjB,YADAO,EAAS,CAAED,OAAO,EAAM9F,KAAM,qLAGhC2F,EAAWjC,GACXqC,EAAS,6BAAK3D,GAAN,IAAa0D,OAAO,KAC5B,MACF,IAAK,gBACHH,EAAWjC,GACXqC,EAAS,6BAAK3D,GAAN,IAAa0D,OAAO,KAC5B,MACF,IAAK,QACHH,EAAW,IACXI,EAAS,6BAAK3D,GAAN,IAAa0D,OAAO,OAmB5BpC,MAAOgC,EACPc,eAAgB,SAACC,GAAD,OAAYA,EAAOnQ,OACnCoQ,kBAAmB,SAACD,GAAD,OAAYA,EAAO1B,UACtC4B,aAAc,SAACF,GACb,OAAIhC,EAASS,UACJ,8BAAM,0BAAM1N,MAAO,CAAEC,SAAU,SAAWgP,EAAOrK,MAAjD,MAAiEqK,EAAOnQ,OAE1EmQ,EAAOnQ,OAEhBgO,OArBc,SAACtO,GACnB+P,EAAS,6BAAK3D,GAAN,IAAa0D,OAAO,KAC5BL,EAAgBC,EAASE,IAoBrBgB,WAAY,SAAClD,EAAOmD,GAAR,OACVnD,EAAM1F,KAAI,SAACyI,EAAQK,GAAT,OACR,kBAACC,GAAA,EAAD,iBACMF,EAAY,CAAEC,UADpB,CAEEvP,QAAQ,WACRM,IAAKiP,EACLE,MAAOvC,EAASS,UACd,8BAAM,0BAAM1N,MAAO,CAAEC,SAAU,SAAWgP,EAAOrK,MAAjD,MAAiEqK,EAAOnQ,OACxE,8BAAOmQ,EAAOnQ,cAKtB2Q,YAAa,SAACC,GAAD,OACX,kBAACC,GAAA,EAAD,iBACMD,EADN,CAEE9E,MAAOA,EAAM0D,MACbvO,QAAQ,WACRyP,MAAM,wFACNI,WAAYhF,EAAM0D,MAAQ1D,EAAMpC,KAAO,UChGnD,IAoCeqH,GApCE,SAAC,GAA6F,IAA3FC,EAA0F,EAA1FA,MAAO5T,EAAmF,EAAnFA,SAAU8Q,EAAyE,EAAzEA,aAActB,EAA2D,EAA3DA,aAAcC,EAA6C,EAA7CA,YAAasC,EAAgC,EAAhCA,gBAAiBhB,EAAe,EAAfA,SAa7F,OACE,kBAAC,WAAD,KACE,0BAAMxN,UAAU,uBACd,wBAAIA,UAAU,uBACZ,0BAAMA,UAAW,mBAAoBqQ,EAAQ,GAC7C,qCACC5T,EAAS4C,OACZ,6BACG5C,EAAS6T,KAQH,kBAAChC,GAAD,CAAM3Q,KAAMlB,EAASgS,QAASF,MAAO9R,EAAS8R,MAAOf,SAAUA,EAAUgB,gBAAiBA,IAP/F/R,EAASgS,QAAQ1H,KAAI,SAACiF,EAAQ/E,GAAT,OACnB,kBAAC,GAAD,CAAQrG,IAAKqG,EAAG+E,OAAQA,EACtBuB,aAAcA,EACdtB,aAAcA,EACdC,YAAaA,EACbsB,SAAUA,W,UCQX+C,GA/BM,SAAC,GAA+C,IAA7CjS,EAA4C,EAA5CA,KAAM4L,EAAsC,EAAtCA,YAAasG,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QACpD,OACE,6BACE,kBAACC,GAAA,EAAD,CACEpS,KAAMA,EACNC,QAAS2L,EACTyG,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAACC,GAAA,EAAD,CAAa1S,GAAG,sBAAsB,qIACtC,kBAAC2S,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAmB5S,GAAG,4BAAtB,8SAIF,kBAAC6S,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQxS,QAASyL,EAAajL,MAAM,WAApC,wCAGA,kBAACgS,GAAA,EAAD,CAAQxS,QAAS+R,EAAWvR,MAAM,WAAlC,0DAGA,kBAACgS,GAAA,EAAD,CAAQxS,QAASgS,EAASxR,MAAM,UAAUiS,WAAS,GAAnD,8DC9BGC,GAAc,CACzB,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAG7BC,GAAW,CACtB,IAGWC,GAAc,CACzB,GACA,GACA,IAGWC,GAAY,CACvBC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,IAGMC,GAAe,CAC1B,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,KAGWC,GAAW,CACtpF,GACZ,YAA2BqF,IAAvBb,GAAUxE,GAA+BwE,GAAUxE,GAChDA,EAoBT,IA2BesF,GA3Bc,SAACtF,GAC5B,OAlBF,SAA6BA,GAC3B,OAAOkF,GAAaK,SAASvF,GAiBzBwF,CAAoBxF,GACf,CACLyF,GAAI,EACJC,SAAUN,GAAKpF,IARrB,SAAyBA,GACvB,OAAOqE,GAAYkB,SAASvF,GAUxB2F,CAAgB3F,GACX,CACLyF,GAAI,GAtBV,SAAuBzF,GACrB,OAAOsE,GAASiB,SAASvF,GAwBrB4F,CAAc5F,GACT,CACLyF,GAAI,GAtBV,SAAyBzF,GACvB,OAAOuE,GAAYgB,SAASvF,GAwBxB6F,CAAgB7F,GACX,CACLyF,GAAI,GAGD,CACLA,GAAI,ICkKOK,GA/MW,SAAC5L,EAAMqJ,EAAOwC,EAAQC,EAAOC,GACrD,IAAMtW,EAAWuK,EAAKgM,UAAU3C,GAC5B4C,EAAe,GACfC,EAAY,GAGVC,EAAiBL,EAAMM,UAAY3W,EAASgS,QAAQO,QAAO,SAAAqE,GAAG,OAAKP,EAAMM,UAAUf,SAASgB,EAAIlO,SAClG1I,EAASgS,QAIP6E,IAAUR,EAAMS,iBAAkBT,EAAMS,gBAC1CC,GAAW,EACXC,GAAa,EACbC,GAAiB,EACfC,EAAaR,EAAepM,KAAI,SAACiF,EAAQ/E,GAE7C,IAAI2M,EAAS,CACX1F,YAAY,EACZxB,gBAAgB,EAChBF,eAAgB,GAChBF,OAAO,EACPsB,UAAU,EACVE,UAAU,EACVwF,QAAS,GACTnF,SAAU,IAIZ,GAFA+E,EAAUrF,KAAK7B,EAAO7G,MAElBmO,EAAS,CAEX,IAAK,IAAInO,KAAQmO,EACXnO,IAAS6G,EAAO7G,OAClByO,EAAM,6BACDA,GADC,IAEJN,QAAQ,GAAD,oBAAMM,EAAON,SAAb,aAAyBA,EAAQnO,QAGxCmO,EAAQnO,GAAMkN,SAASrG,EAAO7G,QAChCyO,EAAM,6BACDA,GADC,IAEJN,QAAQ,GAAD,oBAAMM,EAAON,SAAb,CAAsBnO,OAKnCyO,EAAON,QAAQvM,KAAI,SAAA5B,GACb0N,EAAOgB,KAAKxB,SAASlN,KACvByO,EAAM,6BACDA,GADC,IAEJ9F,UAAU,EACVK,SAAS,qGAAD,OAAuBhJ,SA0CvC,GApCIgO,EAAexM,OAASsL,GAAStL,OACnCsM,EAAahM,GAAK,CAACA,EAAGA,EAAI,IAE1BgM,EAAahM,GAAKgL,GAAShL,GAAG,GAC9B2M,EAAM,6BACDA,GADC,IAEJ5F,UAAWiE,GAAShL,GAAG,GACvB6F,QAASmF,GAAShL,GAAG,MAIrB4L,EAAOgB,KAAKxB,SAASrG,EAAO7G,QAC9BsO,GAAa,EACbG,EAAM,6BACDA,GADC,IAEJhG,UAAU,KAIVkF,EAAMgB,OAAOzB,SAASrG,EAAO7G,QAC/BqO,GAAW,EACXI,EAAM,6BACDA,GADC,IAEJE,QAAQ,KAGRhB,EAAMgB,OAAOzB,SAASrG,EAAO7G,MAAQ0N,EAAOgB,KAAKxB,SAASrG,EAAO7G,QAAOuO,GAAiB,GAGzFZ,EAAMiB,YAAY1B,SAASrG,EAAO7G,QACpCyO,EAAM,6BACDA,GADC,IAEJ1F,YAAY,EACZ5B,OAAO,KAGPuG,EAAOpW,EAAS0B,IAElB,IADA,IAAIR,EAAOkV,EAAOpW,EAAS0B,IAAIR,KACtBsJ,EAAI,EAAGA,EAAItJ,EAAKgJ,OAAQM,IAC3B+E,EAAO7G,OAASxH,EAAKsJ,GAAG+M,YAAyC,KAA3BrW,EAAKsJ,GAAGuF,iBAChDoH,EAAM,6BACDA,GADC,IAEJ1F,YAAY,EACZxB,gBAAgB,EAChBF,eAAgB7O,EAAKsJ,GAAGuF,eACxBF,OAAO,KAMf,OADa,6BAAQN,GAAW4H,MAK9BK,EAAU,CACZ3D,MAAM,EACN4D,UAAU,EACV/E,UAAU,GA4BZ,GAzBI1S,EAAS8R,MAAQ,IACnB0F,EAAO,6BACFA,GADE,IAEL9E,UAAU,KAMZ8E,EADEd,EAAexM,OAASsL,GAAStL,OAC5B,6BACFsN,GADE,IAEL3D,MAAM,EACN4D,SAAUzX,EAAS8R,QAGd,6BACF0F,GADE,IAELhB,iBAIqBU,EAAWQ,QAAO,SAACC,EAAMpI,GAChD,OAAOoI,EAAOpI,EAAO8B,WACpB,KAEsB6F,EAAWhN,OASlC,OARAoM,GAAW,SAAAsB,GAAS,oCACfA,GADe,kBAEjB5X,EAAS0B,GAAK,CACbR,KAAM,GACNuV,YACA7C,cAGG,CACLiE,MAAM,QAIkBnC,IAAxBU,EAAOpW,EAAS0B,KAClB4U,GAAW,SAAAsB,GAAS,oCACfA,GADe,kBAEjB5X,EAAS0B,GAAK,CACbR,KAAM,GACNuV,YACA7C,cAMN,IAAMkE,EAAWZ,EAAW5M,KAAI,SAACiF,EAAQ6D,GACvC,OAAI4D,GACED,EACEE,EACK1H,EAAO8H,OAAS9H,EAAO4B,SAAW5B,EAAlC,6BAAgDA,GAAhD,IAAwD8B,UAAU,IAElE9B,EAAO8H,OAAP,6BAAqB9H,GAArB,IAA6B8B,UAAU,IAAS9B,EAItDA,KACNjF,KAAI,SAAAiF,GACL,GAAIsH,EACF,IAAK,IAAInO,KAAQmO,EACf,GAAIT,EAAOgB,KAAKxB,SAASlN,GACvB,OAAImO,EAAQnO,GAAMkN,SAASrG,EAAO7G,MACzB,6BAAK6G,GAAZ,IAAoB8B,UAAU,IAEzB9B,EAKb,OAAOA,KAST,MAAO,CACLsI,MAAM,EACN3W,KARQ,0CACLlB,GACAwX,GAFK,IAGRxF,QAAS8F,MCjLEC,GAxBF,SAACC,GACZ,IAAIC,EAAW,IAAK1Y,OAAO2Y,cAAgB3Y,OAAO4Y,oBAClDH,EAASI,OAAOC,OAAO,CACrBC,OAAQ,IACRC,UAAW,KACXnM,SAAU,IACVhB,KAAM,QACL4M,GAEH,IAAIQ,EAAaP,EAASQ,mBACtBC,EAAWT,EAASU,aACxBH,EAAWI,QAAQF,GACnBA,EAASE,QAAQX,EAASY,aAC1BH,EAASI,KAAK9I,MAAQgI,EAAOM,OAC7BE,EAAWD,UAAUvI,MAAQgI,EAAOO,UACpCC,EAAWpN,KAAO4M,EAAO5M,KACzBoN,EAAWO,QACXC,YACE,WACER,EAAWS,SAEbjB,EAAO5L,WCwrBI8M,GAprBG,SAAC,GAAwE,IAAtE3O,EAAqE,EAArEA,KAAM4O,EAA+D,EAA/DA,OAAQC,EAAuD,EAAvDA,mBAAoBC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,cAC9DC,EAAiBhP,EAAKgM,UAAUrM,OADkD,EAExDvJ,mBAAS,MAF+C,mBAEjFX,EAFiF,KAEvEwZ,EAFuE,OAGhD7Y,mBAAS,CAC/C6Q,WAAW,IAJ2E,mBAGjFiI,EAHiF,KAGnEC,EAHmE,OAMtD/Y,mBAAS,GAN6C,mBAMjF2M,EANiF,KAMtEqM,EANsE,OAOxEhZ,mBAASwY,GAAlB9C,EAPiF,sBAQ9D1V,mBAAS,GARqD,mBAQjFiT,EARiF,KAQ1EgG,EAR0E,OAS1DjZ,mBAC5B,CACEyW,KAAM,KAX8E,mBASjFyC,EATiF,KASxEvD,EATwE,OAc5D3V,oBAAS,GAdmD,mBAcjFmZ,EAdiF,KAczEC,EAdyE,OAehDpZ,oBAAS,GAfuC,mBAejFqZ,EAfiF,KAenEC,EAfmE,OAgB9CtZ,mBAAS,IAhBqC,mBAgBjFuZ,EAhBiF,KAgBlEC,EAhBkE,KAiBlFC,EAAe,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQhK,EAAc,EAAdA,QAC9B,GAAwB,SAApBgK,EAAOC,SAAqB,CAC9B,IAAMC,EAAW5E,GAAqBtF,GACtC,OAAQkK,EAASzE,IACf,KA1BgB,EA4Bd,YADA0E,EAAUD,EAASxE,UAGrB,KA5BiB,EA8Bf,YADA0E,IAGF,KAjCc,EAmCZ,YADAC,IAGF,KAnCK,EAsCL,QACE,UAKFD,EAAiB,WACrB,GAAIX,EACFa,QACK,CACL,GAAId,EAAQ7Z,EAAS0B,IAAIR,KAAKgJ,OAE5B,YADA0Q,IAGF7C,OAIE6C,EAAW,WACfjB,EAAa,GAEXC,EADEhG,EAAQ2F,EAAiB,EAClB3F,EAAQ,EAER,IAIPiH,EAAe,WACnBlB,EAAa,GAEXC,EADY,IAAVhG,EACO2F,EAAiB,EAEjB3F,EAAQ,IAIrBhE,qBAAU,WAER,OADAkL,SAASC,iBAlFI,QAkFuBX,GAC7B,WACLU,SAASE,oBApFE,QAoF4BZ,OAM3CxK,qBAAU,WAER,IAAMqL,EAAc9E,GAAkB5L,EAAMqJ,EAAOiG,EAASxD,EAAOC,GAC9D2E,IACDA,EAAYpD,KAEZ+B,EADEtM,EACOsG,EAAQ,EAERA,EAAQ,IAIrB4F,EAAYyB,EAAY/Z,MACxBkY,EAAmB6B,EAAY/Z,UAC9B,CAAC0S,IAEJ,IAiBMsH,EAAwB,SAACC,GAC7B,IAAIvH,EAAQ,EACZ,IAAK,IAAIzP,KAAOgX,EACF,SAARhX,GACFyP,IAIJ,GAAIA,EAAQrJ,EAAKgM,UAAUrM,OACzB,OAAO,EAET,IAAK,IAAI/F,KAAOgX,EACd,GAAY,SAARhX,EAAgB,CAClB,IAAMiS,EAAS+E,EAAWhX,GAC1B,IAAKiS,EAAOlV,KAAKgJ,OAAQ,CAEvB,IAAImM,EAAMS,gBAsBR,OAFAqD,EAAiB,oDAAD,OAAa/D,EAAOxC,MAAQ,EAA5B,gDAChBmG,GAAU,IACH,EAtBmB,IAAD,aACzB,IAAMqB,EAAUD,EAAW/D,KACrBX,EAAYL,EAAOK,UACnBK,EAAkBT,EAAMS,gBAS9B,GARUL,EAAUlE,QAAO,SAAC7J,EAAM0K,GAChC,IAAK,IAAIiI,KAASvE,EAChB,GAAIsE,EAAQxF,SAASyF,IACfvE,EAAgBuE,GAAOzF,SAASlN,GAAO,OAAO,EAGtD,OAAO,KAEHwB,OAGJ,OAFAiQ,EAAiB,oDAAD,OAAa/D,EAAOxC,MAAQ,EAA5B,gDAChBmG,GAAU,GACJ,CAAN,GAAO,GAfgB,sCA6BjC,OAFAI,EAAiB,IACjBJ,GAAU,IACH,GAGHY,EAAmB,WACvBV,GAAgB,IAIZS,EAAe,WACnB,IAAMY,EAAazB,EAAQ7Z,EAAS0B,IAAIR,KAAKwW,QAAO,SAACC,EAAMnH,GAAP,6BAAmBmH,GAAnB,CAAyBnH,EAAI+G,eAAa,IAE1F4D,EAAa,GACjB,IAAK,IAAIhX,KAAO0V,EACV1V,IAAQnE,EAAS0B,GACnByZ,EAAWnb,EAAS0B,IAApB,6BACKyZ,EAAWnb,EAAS0B,KADzB,IAEER,KAAM,KAINia,EADU,SAARhX,EACQ,6BACLgX,GADK,kBAEPhX,EAAM0V,EAAQ1V,KAGP,6BACLgX,GADK,IAER/D,KAAMyC,EAAQzC,KAAK7E,QAAO,SAAA7J,GACxB,OAAO4S,EAAW1F,SAASlN,QAMrC4N,EAAW6E,GACX3B,GAAY,SAAA5B,GAAS,oCAChBA,GADgB,IAEnB5F,QAAS4F,EAAU5F,QAAQ1H,KACzB,SAAAiF,GAAM,OAAI,6BAAYA,GAAZ,IAAoB4B,UAAU,EAAOlB,gBAAgB,EAAOoB,UAAU,OAChF/G,KACA,SAAAiF,GACE,IAAIgM,EAAc,GAElB,IAAK,IAAI7S,KAAQ2N,EAAMS,gBACjBpO,IAAS6G,EAAO7G,OAClB6S,EAAW,uBACNA,GADM,aAENlF,EAAMS,gBAAgBpO,MAGzB2N,EAAMS,gBAAgBpO,GAAMkN,SAASrG,EAAO7G,QAC9C6S,EAAW,uBACNA,GADM,CAET7S,KAIN,IAAK,IAAI8B,EAAI,EAAGA,EAAI+Q,EAAYrR,OAAQM,IACtC,GAAI2Q,EAAW/D,KAAKxB,SAAS2F,EAAY/Q,IACvC,OAAO,6BACF+E,GADL,IAEE8B,UAAU,EACVK,SAAS,qGAAD,OAAuB6J,EAAY/Q,MAIjD,OAAO,6BACF+E,GADL,IAEE8B,UAAU,EACVK,SAAU,aAKlBqI,GAAU,IAKNS,EAAY,SAAC9R,GACjB,IAAMqN,GAAYrN,EACZ8N,EAAexW,EAASwW,aACxBgF,EAAiBxb,EAASgS,QAAQO,QAAO,SAAAqE,GAAG,OAAIA,EAAIvG,UAAY0F,KAAU,GAEhF,GAAiB,KAAbA,EAKG,GAAiB,KAAbA,EAOX,GAAIS,EAAaZ,SAASG,GAAW,CAEnC,GAAI8D,EAAQzC,KAAKxB,SAAS4F,EAAe9S,MAAO,CAC9C,IAAIyS,EAAa,GACjB,IAAK,IAAIhX,KAAO0V,EAEZsB,EADEhX,IAAQnE,EAAS0B,GACT,6BACLyZ,GADK,kBAEPnb,EAAS0B,GAFF,6BAGHmY,EAAQ7Z,EAAS0B,KAHd,IAINR,KAAM2Y,EAAQ7Z,EAAS0B,IAAIR,KAAKqR,QAAO,SAAAkJ,GAAE,OAAIA,EAAGlE,aAAeiE,EAAe9S,YAItE,SAARvE,EACQ,6BACLgX,GADK,kBAEPhX,EAAM0V,EAAQ1V,KAGP,6BACLgX,GADK,IAER/D,KAAMyC,EAAQzC,KAAK7E,QAAO,SAAAkJ,GAAE,OAAIA,IAAOD,EAAe9S,UAsD9D,OAjDA4N,EAAW6E,GACX3B,GAAY,SAAA5B,GAAS,oCAChBA,GADgB,IAEnB5F,QAAS4F,EAAU5F,QAAQ1H,KACzB,SAAAiF,GAAM,OAAIA,EAAO7G,OAAS8S,EAAe9S,KAA/B,6BAA2C6G,GAA3C,IAAmD4B,UAAU,EAAOlB,gBAAgB,IAAUV,KACxGjF,KACA,SAAAiF,GAAM,OAAI4L,EAAWnb,EAAS0B,IAAIR,KAAKgJ,OAASqF,EAAtC,6BAAqDA,GAArD,IAA6D8B,UAAU,OACjF/G,KACA,SAAAiF,GACE,IAAIgM,EAAc,GAElB,IAAK,IAAI7S,KAAQ2N,EAAMS,gBACjBpO,IAAS6G,EAAO7G,OAClB6S,EAAW,uBACNA,GADM,aAENlF,EAAMS,gBAAgBpO,MAGzB2N,EAAMS,gBAAgBpO,GAAMkN,SAASrG,EAAO7G,QAC9C6S,EAAW,uBACNA,GADM,CAET7S,KAIN,IAAK,IAAI8B,EAAI,EAAGA,EAAI+Q,EAAYrR,OAAQM,IACtC,GAAI2Q,EAAW/D,KAAKxB,SAAS2F,EAAY/Q,IACvC,OAAO,6BACF+E,GADL,IAEE8B,UAAU,EACVK,SAAS,qGAAD,OAAuB6J,EAAY/Q,MAIjD,OAAO,6BACF+E,GADL,IAEE8B,UAAU,EACVK,SAAU,QAGdpH,KAAI,SAAAiF,GAEJ,OAAI4L,EAAWnb,EAAS0B,IAAIR,KAAKgJ,QACxBqF,EAAO8H,OAAP,6BAAqB9H,GAArB,IAA6B8B,UAAU,IAEzC9B,eAGX2L,EAAsBC,GAIxB,GAAI9E,EAAMgB,OAAOzB,SAAS4F,EAAe9S,OACnCmR,EAAQ7Z,EAAS0B,IAAIR,KAAKgJ,OAE5B,YADA6N,KAKJ,GAAIyD,EAAenK,UAAYwI,EAAQ7Z,EAAS0B,IAAIR,KAAKgJ,QAAUlK,EAAS8R,MAE1E,YADAiG,KAIF,GAAIyD,EAAe/J,WAOjB,YANA+H,GAAY,SAAA5B,GAAS,oCAChBA,GADgB,IAEnB5F,QAAS4F,EAAU5F,QAAQ1H,KACzB,SAAAiF,GAAM,OAAIA,EAAOc,UAAYmL,EAAenL,QAAlC,6BAAiDd,GAAjD,IAAyD4B,UAAU,EAAMlB,gBAAgB,IAASV,UAKlH,IAAM6G,EAAS,CACbmB,WAAYiE,EAAe9S,KAC3BgT,SAAUF,EAAe9Z,GACzB+P,YAAY,EACZ1B,eAAgB,IAGlB,IAAK,IAAIrH,KAAQ2N,EAAMS,gBAErB,GAAI+C,EAAQzC,KAAKxB,SAASlN,IACpB2N,EAAMS,gBAAgBpO,GAAMkN,SAAS4F,EAAe9S,MAEtD,YADAqP,KAMN,IAAK,IAAIrP,KAAQ2N,EAAMsF,mBAEjB9B,EAAQzC,KAAKxB,SAASlN,IACpB2N,EAAMsF,mBAAmBjT,GAAMkN,SAAS4F,EAAe9S,OACzDmG,QAAQC,IAAI,2IAKlB,IAAI8M,EAAiBxD,OAAOC,OAAO,GAAIwB,GA6BvC,GA5BA+B,EAAe5b,EAAS0B,IAAIR,KAAKkQ,KAAKgF,GACtCwF,EAAexE,KAAKhG,KAAKoK,EAAe9S,MACxC4N,EAAWsF,GACXpC,GAAY,SAAA5B,GAAS,oCAChBA,GADgB,IAEnB5F,QAAS4F,EAAU5F,QAAQ1H,KACzB,SAAAiF,GAAM,OAAIA,EAAOc,UAAY0F,EAAnB,6BAAmCxG,GAAnC,IAA2C4B,UAAU,IAAS5B,KACxEjF,KACA,SAAAiF,GAAM,OAAI8G,EAAMgB,OAAOzB,SAASrG,EAAO7G,MAAQ6G,EAAOc,UAAY0F,EAAxD,6BAAwExG,GAAxE,IAAgF8B,UAAU,IAAS9B,KAC7GjF,KACA,SAAAiF,GAAM,OAAIiM,EAAe3E,QAAQjB,SAASrG,EAAO7G,MAAvC,6BACL6G,GADK,IAER8B,UAAU,EACVK,SAAS,qGAAD,OAAuB8J,EAAe9S,QAC5C6G,UAIJ8G,EAAMgB,OAAOzB,SAAS4F,EAAe9S,OACvC8Q,GAAY,SAAA5B,GAAS,oCAChBA,GADgB,IAEnB5F,QAAS4F,EAAU5F,QAAQ1H,KACzB,SAAAiF,GAAM,OAAIA,EAAOc,UAAY0F,EAAWxG,EAA9B,6BAA4CA,GAA5C,IAAoD8B,UAAU,YAM1E6J,EAAsBU,GACxB,OAGA,GAAI/B,EAAQ7Z,EAAS0B,IAAIR,KAAKgJ,QAAUlK,EAAS8R,MAK/C,YAHAkH,YAAW,WACT4B,MAzaO,UA+ab7C,UA9KAiB,YAAW,WACT6B,MAjQW,QA2Pb7B,YAAW,WACT4B,MA5PW,IAqoBXiB,GAAiB,WACrB,OACE,kBAACjY,EAAA,EAAD,CAAYC,QAAQ,WAAWiB,QAAQ,QAAQ8E,cAAY,GACxDsQ,IAKP,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAcrY,KAAMmY,EAAcvM,YAjCjB,WAEnBwM,GAAgB,IA+B+ClG,UAjB1C,WAErBgG,GAAU,GACVE,GAAgB,GAChBZ,EAAcQ,IAa4E7F,QA5BtE,WAEpBsF,EAAcO,GACdvD,EAAW,CACTc,KAAM,KAERwC,EAAS,GACTG,GAAU,GACVE,GAAgB,MAqBd,kBAAC1Q,GAAA,EAAD,CAAMC,WAAS,EAAC8D,UAAU,MAAMnD,QAAQ,gBAAgB2R,WAAW,UACjE,kBAACvS,GAAA,EAAD,CAAMC,WAAS,EAACE,GAAI,EAAGqS,GAAI,EAAG5R,QAAQ,cACpC,kBAAC6R,GAAA,EAAD,CACEhM,MAAM,MACNiM,QAAS,kBAACC,GAAA,EAAD,CAAU1Z,MAAM,UAAUoQ,SAliB3B,SAACtQ,GACjBoX,GAAgB,SAAA9B,GAAS,oCACpBA,GADoB,IAEvBpG,WAAYoG,EAAUpG,gBA+hBwC2K,eAAgB1C,EAAajI,YACrF8B,MAAM,sEACN8I,eAAe,SAGnB,kBAACC,GAAA,EAAD,CAAQC,KAAM,CAAC,KAAM,OACnB,kBAAC/S,GAAA,EAAD,CAAMC,WAAS,EAACuS,GAAI,EAAG5R,QAAQ,UAC7B,kBAAC0R,GAAD,QAGJ,kBAACtS,GAAA,EAAD,CAAMC,WAAS,EAACE,GAAI,EAAGqS,GAAI,EAAG5R,QAAQ,YACpC,8DAAU,8BAAM,gCAASoP,MAE3B,kBAAC8C,GAAA,EAAD,CAAQE,MAAI,GACV,kBAAChT,GAAA,EAAD,CAAMC,WAAS,EAACE,GAAI,GAAIS,QAAQ,UAC9B,kBAAC0R,GAAD,SAKL7b,GACC,kBAAC,GAAD,CACE4T,MAAOA,EACP5T,SAAUA,EACV+Q,SAAU0I,EACV3I,aArkBa,SAACuJ,GACpB,IAAM3R,EAAO2R,EAAOmC,QAAQ9T,KACtB8S,EAAiBxb,EAASgS,QAAQO,QAAO,SAAAqE,GAAG,OAAIA,EAAIvG,WAAa3H,KAAM,GAEzE8S,EAAe/J,YAAc+J,EAAerK,UAGhDqJ,EAAU9R,IA+jBJ+G,YA3PY,SAACnN,GACnB,IAAM0N,EAAQ1N,EAAEC,cAAcyN,MACxByM,EAAena,EAAEC,cAAcia,QAAQ9T,KACvCgU,EAAkBpa,EAAEC,cAAcia,QAAQG,QAC1CnB,EAAiBxb,EAASgS,QAAQO,QAAO,SAAAqE,GAAG,OAAIA,EAAIvG,WAAaqM,KAAiB,GACxF,GAAc,KAAV1M,EAAc,CAEhB,IAAImL,EAAa,GACjB,IAAK,IAAIhX,KAAO0V,EAEZsB,EADEhX,IAAQnE,EAAS0B,GACT,6BACLyZ,GADK,kBAEPnb,EAAS0B,GAFF,6BAGHmY,EAAQ7Z,EAAS0B,KAHd,IAINR,KAAM2Y,EAAQ7Z,EAAS0B,IAAIR,KAAKqR,QAAO,SAAAkJ,GAAE,OAAIA,EAAGlE,aAAekF,SAIvD,SAARtY,EACQ,6BACLgX,GADK,kBAEPhX,EAAM0V,EAAQ1V,KAGP,6BACLgX,GADK,IAER/D,KAAMyC,EAAQzC,KAAK7E,QAAO,SAAAkJ,GAAE,OAAIA,IAAOgB,OAsD/C,OAjDAnG,EAAW6E,GACX3B,GAAY,SAAA5B,GAAS,oCAChBA,GADgB,IAEnB5F,QAAS4F,EAAU5F,QAAQ1H,KACzB,SAAAiF,GAAM,OAAIA,EAAO7G,OAAS+T,EAAhB,6BAAoClN,GAApC,IAA4C4B,UAAU,EAAOlB,gBAAgB,IAAUV,KACjGjF,KACA,SAAAiF,GAAM,OAAI4L,EAAWnb,EAAS0B,IAAIR,KAAKgJ,OAASqF,EAAtC,6BAAqDA,GAArD,IAA6D8B,UAAU,OACjF/G,KACA,SAAAiF,GACE,IAAIgM,EAAc,GAElB,IAAK,IAAI7S,KAAQ2N,EAAMS,gBACjBpO,IAAS6G,EAAO7G,OAClB6S,EAAW,uBACNA,GADM,aAENlF,EAAMS,gBAAgBpO,MAGzB2N,EAAMS,gBAAgBpO,GAAMkN,SAASrG,EAAO7G,QAC9C6S,EAAW,uBACNA,GADM,CAET7S,KAIN,IAAK,IAAI8B,EAAI,EAAGA,EAAI+Q,EAAYrR,OAAQM,IACtC,GAAI2Q,EAAW/D,KAAKxB,SAAS2F,EAAY/Q,IACvC,OAAO,6BACF+E,GADL,IAEE8B,UAAU,EACVK,SAAS,qGAAD,OAAuB6J,EAAY/Q,MAIjD,OAAO,6BACF+E,GADL,IAEE8B,UAAU,EACVK,SAAU,QAGdpH,KAAI,SAAAiF,GAEJ,OAAI4L,EAAWnb,EAAS0B,IAAIR,KAAKgJ,QACxBqF,EAAO8H,OAAP,6BAAqB9H,GAArB,IAA6B8B,UAAU,IAEzC9B,eAGX2L,EAAsBC,GAIxB,IAAM/E,EAAS,CACbmB,WAAYkF,EACZf,SAAUF,EAAe9Z,GACzB+P,YAAY,EACZ1B,eAAgBC,GAKd4L,EAAiB,GACjB/B,EAAQzC,KAAKxB,SAAS6G,IACxBb,EAAiBxD,OAAOC,OAAO,GAAIwB,IACpB7Z,EAAS0B,IAAxB,6BACKka,EAAe5b,EAAS0B,KAD7B,IAEER,KAAM2Y,EAAQ7Z,EAAS0B,IAAIR,KAAKoJ,KAC9B,SAAAiF,GAAM,OAAIA,EAAOgI,aAAekF,EAAtB,6BAA0ClN,GAA1C,IAAkDQ,eAAgBC,IAAUT,SAI1FqM,EAAiBxD,OAAOC,OAAO,GAAIwB,IACpB7Z,EAAS0B,IAAIR,KAAKkQ,KAAKgF,GACtCwF,EAAexE,KAAKhG,KAAKqL,IAE3BnG,EAAWsF,GAGPvF,EAAMgB,OAAOzB,SAAS6G,IACxBjD,GAAY,SAAA5B,GAAS,oCAChBA,GADgB,IAEnB5F,QAAS4F,EAAU5F,QAAQ1H,KACzB,SAAAiF,GAAM,OAAIA,EAAOc,WAAaqM,EAAkBnN,EAAtC,6BAAoDA,GAApD,IAA4D8B,UAAU,YAItFmI,GAAY,SAAA5B,GAAS,oCAChBA,GADgB,IAEnB5F,QAAS4F,EAAU5F,QAAQ1H,KACzB,SAAAiF,GAAM,OAAIA,EAAOc,UAAYoM,EAAnB,6BAAuClN,GAAvC,IAA+C4B,UAAU,IAAS5B,KAC5EjF,KACA,SAAAiF,GAAM,OAAI8G,EAAMgB,OAAOzB,SAASrG,EAAO7G,MAAQ6G,EAAOc,UAAYoM,EAAxD,6BAA4ElN,GAA5E,IAAoF8B,UAAU,IAAS9B,KACjHjF,KACA,SAAAiF,GAAM,OAAIiM,EAAe3E,QAAQjB,SAASrG,EAAO7G,MAAvC,6BACL6G,GADK,IAER8B,UAAU,EACVK,SAAS,qGAAD,OAAuB8J,EAAe9S,QAC5C6G,UAKJ2L,EAAsBU,IAGpB/B,EAAQ7Z,EAAS0B,IAAIR,KAAKgJ,QAAUlK,EAAS8R,MAAQ,GACvDkH,YAAW,WACT4B,MA9jBS,MAgrBT7I,gBA1GgB,SAAC/B,EAAOkC,GAC9B,GAAIlC,EAAM9F,OAAQ,CAChB,IAAMuM,EAAYzG,EAAM1F,KAAI,SAAAkG,GAAG,OAAIA,EAAI9H,QACjCkU,EAAc5M,EAAM1F,KAAI,SAAAkG,GAC5B,MAAO,CACL+G,WAAY/G,EAAI9H,KAChB+I,YAAY,EACZ1B,eAAgB,OAGd8M,EAAYhD,EAAQzC,KAAK7E,QAAO,SAAA/B,GAAG,OAAK0B,EAAM0D,SAASpF,MAmB7D,OAlBA8F,GAAW,SAAAsB,GAAS,0CACfA,GADe,uBAEjB5X,EAAS0B,GAFQ,6BAGbkW,EAAU5X,EAAS0B,KAHN,IAIhBR,KAAK,aACA0b,MALW,4CASbC,GATa,aAUbpG,KAVa,YAahBzG,EAAM9F,QACR8O,YAAW,WACT4B,MAhmBS,MAqmBftE,GAAW,SAAAsB,GAAS,0CACfA,GADe,uBAEjB5X,EAAS0B,GAFQ,6BAGbkW,EAAU5X,EAAS0B,KAHN,IAIhBR,KAAM,MAJU,qBAMZ0W,EAAUR,KAAK7E,QAAO,SAAAqE,GAAG,OAAK1E,EAAM0D,SAASgB,OANjC,UA8ElB,kBAACpC,GAAA,EAAD,CAAQxS,QAAS6Y,EAAchX,QAAQ,YAAYN,UAAU,kBAA7D,kCACA,kBAACiR,GAAA,EAAD,CAAQxS,QAAS4Y,EAAU/W,QAAQ,YAAYN,UAAU,kBAAzD,wCACCuW,GACC,kBAACtF,GAAA,EAAD,CAAQxS,QAAS2Y,EAAkB9W,QAAQ,YAAYN,UAAU,kBAAjE,oC,UC7oBOuZ,GAjDU,SAAC,GAAwD,IAAtDjb,EAAqD,EAArDA,KAAM4L,EAA+C,EAA/CA,YAAasP,EAAkC,EAAlCA,KAAM1U,EAA4B,EAA5BA,OAAQiE,EAAoB,EAApBA,KAAMqG,EAAc,EAAdA,QAAc,EACrDhS,mBAAS,IAD4C,mBACxEyR,EADwE,KACjE4K,EADiE,KAgB/E,OACE,6BACE,kBAAC/I,GAAA,EAAD,CAAQpS,KAAMA,EAAMqS,kBAAgB,qBAClC,kBAACE,GAAA,EAAD,CAAa1S,GAAG,qBAAqB2G,GACrC,kBAACgM,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACGhI,GAEH,kBAAC2Q,GAAA,EAAD,CACEC,WAAS,EACTC,QAAM,EACNnN,MAAOoC,EAAM1Q,GACbkR,SAAU,SAAAtQ,GAAC,OA1BA,SAACA,GAAO,IAAD,EACgBA,EAAE+X,OAApC1H,EADkB,EAClBA,QAASyK,EADS,EACTA,cACX1b,EAFoB,EACMsO,MAE1BpN,EAAQ+P,EAAQyK,GAAeC,UACrCL,EAAS,CACPtb,KACAkB,UAoBqB0a,CAAahb,KAE5B,4BAAQH,aAAW,OAAOkP,UAAQ,EAACF,UAAQ,EAACnB,MAAM,KACjD2C,EAAQrI,KAAI,SAACyI,EAAQvI,GAAT,OACX,4BAAQrG,IAAK4O,EAAOrR,GAAIsO,MAAO+C,EAAOrR,IAAKqR,EAAOnQ,YAIxD,kBAAC2R,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQxS,QAASyL,EAAajL,MAAM,WAApC,wCAGA,kBAACgS,GAAA,EAAD,CAAQxS,QA5BG,WACjB+a,EAAK3K,IA2B8Bf,UAAW/R,QAAQ8S,GAAQ5P,MAAM,WAA9D,8D,+YC/CH,IAAM+a,GAAgBpd,YAAH,M,4RCAnB,IAAMqd,GAAkBrd,YAAH,MCFfsd,GAAW,SAACC,GACvB,IAEIC,EAAQ,CACVC,QAAS,6BACTC,MAAO,+BACPC,QAAS,YAEP9F,EAAS,GACT+F,EARaL,EAQMM,MAAM,WACzBJ,EAAU,KAoBd,OAnBAG,EAAME,SAAQ,SAAUC,GACtB,IAAIP,EAAMG,QAAQK,KAAKD,GAEhB,GAAIP,EAAME,MAAMM,KAAKD,GAAO,CACjC,IAAIxe,EAAQwe,EAAKxe,MAAMie,EAAME,OACzBD,EACF5F,EAAO4F,GAASle,EAAM,IAAM0e,GAAY1e,EAAM,IAE9CsY,EAAOtY,EAAM,IAAM0e,GAAY1e,EAAM,SAElC,GAAIie,EAAMC,QAAQO,KAAKD,GAAO,CACnC,IAAIxe,EAAQwe,EAAKxe,MAAMie,EAAMC,SAC7B5F,EAAOtY,EAAM,IAAM,GACnBke,EAAUle,EAAM,QACQ,GAAfwe,EAAKhU,QAAe0T,IAC7BA,EAAU,SAOhB,SAAqB5F,GACnB,IAAI2F,EAAQ,gBACRvH,EAAS,GACTiI,EAAW,KACf,IAAK,IAAIla,KAAO6T,EACdqG,EAAWla,EAAIzE,MAAM,eAAe,GACpC0W,EAAOiI,GAAY,GAErB,IAAK,IAAIla,KAAO6T,EAAQ,CACtBqG,EAAWla,EAAIzE,MAAM,eAAe,GACpC,IAAIyX,EAAShT,EAAIzE,MAAMie,GACR,OAAXxG,EACFf,EAAOiI,GAAUlH,GAAUa,EAAO7T,GAElCiS,EAAOiI,GAAU,GAAKrG,EAAO7T,GAGjC,OAAOiS,EApBAkI,CAAYtG,IAuBrB,SAASoG,GAAYld,GAEnB,IAQIqd,EARAC,EAAWtd,EAAKud,QAAQ,OAAQ,IAChCd,EAAQ,CAGVe,OAAQ,4BAGNC,EAAS,GAEb,GAEE,IADAJ,EAAOZ,EAAMe,OAAOE,KAAKJ,WAGP9I,IAAZ6I,EAAK,IACPI,EAAOvN,KAAKmN,EAAK,SAGH7I,IAAZ6I,EAAK,IAAkB,CACzB,IAAIM,EAAQN,EAAK,GACjBI,EAASA,EAAOG,OAAOC,GAAaF,WAGjCN,GACT,OAAOI,EAGT,SAASI,GAAa7d,GAoBpB,OAlBcA,EAAKud,QADP,+BACsB,WAChC,IAAIF,EAAO,GACPxF,EAAK,wCACLiG,EAAG,wCAEHjG,EAAQiG,IACVjG,EAAK,wCACLiG,EAAG,yCAGL,IADA,IAAI9U,EAAU8U,EAAMjG,EAAS,EACtB7O,GACL6O,GAAgB,GAChBwF,EAAKnN,KAAK2H,EAAMkG,SAAS,EAAG,MAC5BlG,IACA7O,IAEF,OAAOqU,KAEKP,MAAM,KAGf,IAAMkB,GAAiB,SAAC7I,GAC7B,IAAI8I,EAAkB,GACtB,IAAK,IAAIhb,KAAOkS,GAAQ,WACtB,OAAQlS,GACN,IAAK,YACHgb,EAAe,6BACVA,GADU,IAEbC,UAAW/I,EAAMlS,GAAK,GAAG6N,UAE3B,MACF,IAAK,cACHmN,EAAe,6BACVA,GADU,IAEb7H,YAAajB,EAAMlS,GAAK,GAAG6N,UAE7B,MACF,IAAK,UACH,IAAM6E,EAAUR,EAAMlS,GAClB2S,EAAkB,GAClB6E,EAAqB,GAH3B,WAIWnR,GACwB,MAA3BqM,EAAQrM,GAAG6U,SAAS,IACtBxI,EAAQrM,GAAGwH,QAAQ1H,KAAI,SAACiF,GACtBuH,EAAgBvH,GAAUsH,EAAQrM,GAAGqM,WAGV,MAA3BA,EAAQrM,GAAG6U,SAAS,IACtBxI,EAAQrM,GAAGwH,QAAQ1H,KAAI,SAACiF,GACtBoM,EAAmBpM,GAAUsH,EAAQrM,GAAGqM,YAR9C,IAAK,IAAIrM,KAAKqM,EAAU,EAAfrM,GAYT2U,EAAe,6BACVA,GADU,IAEbrI,kBACA6E,uBAEF,MACF,IAAK,SACHwD,EAAe,6BACVA,GADU,IAEb9H,OAAQhB,EAAMlS,GAAK,GAAG6N,UAExB,MACF,IAAK,YACH,IAAM2E,EAAYN,EAAMlS,GACpBmb,EAAgB,GACpB,IAAK,IAAI9U,KAAKmM,EACZ2I,EAAa,uBACRA,GADQ,aAER3I,EAAUnM,GAAGwH,UAGpBmN,EAAe,6BACVA,GADU,IAEbxI,UAAW2I,KArDK,GA0DxB,OAAOH,G,8KC/IT,IAAMrc,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCiG,SAAU,CACRC,OAAQlG,EAAMkG,OAAOC,OAAS,EAC9BnI,MAAO,YA2MI0W,GAvMG,SAAC,GAAY,IAAVxX,EAAS,EAATA,GAAS,EACJf,oBAAS,GADL,mBACrByN,EADqB,KACfC,EADe,KAEtBkR,EAAS/e,cAFa,EAGEG,mBAAS,CACrC6e,MAAM,EACNpU,KAAM,QACNqU,QAAS,GACTrT,SAAU,MAPgB,mBASpB7L,GAToB,UASJgf,EAAO9e,UAAU,CACvCC,MAAOP,YAAF,QADCI,aAWFmf,GADU5c,KACA6c,eApBY,EAqBJhf,mBAAS,MArBL,mBAqBrB4J,EArBqB,KAqBfqV,EArBe,OAsBIjf,oBAAS,GAtBb,gCAuBYA,mBAAS,OAvBrB,mBAuBrBkf,EAvBqB,KAuBPC,EAvBO,OAwBgBnf,oBAAS,GAxBzB,mBAwBrBof,EAxBqB,KAwBLC,EAxBK,OAyBErf,mBAAS,MAzBX,mBAyBrB0V,EAzBqB,KAyBd4J,EAzBc,OA0BUtf,mBAAS,MA1BnB,mBA0BrBuf,EA1BqB,KA0BRC,EA1BQ,OA2BkBxf,mBAAS,CACrD,UAAY,IA5Bc,mBA2BrByf,EA3BqB,KA2BJhH,EA3BI,OA8BK9K,aAASiP,GAAe,CACvD8C,UAAW,CAAE3e,MACb4e,YAAa,SAACC,EAAGC,GACfC,EAAiBvf,EAAKqJ,KAAK8L,MAAMqK,MACjCZ,EAAgB5e,EAAKqJ,KAAKN,WAJbyE,GA9BW,EA8BpBF,QA9BoB,EA8BXE,OAAOxN,EA9BI,EA8BJA,KAOlBuf,EAAmB,SAACE,GACxBC,MAAMvhB,EAAUshB,GACbE,MAAK,SAACC,GAAD,OAAOA,EAAExU,UACduU,MAAK,SAAAvU,GACJ,IAAM+J,EAAQoH,GAASnR,GAEjByU,EAAY7B,GAAe7I,GACjC4J,EAAac,OA5CS,EA+CmBhgB,aAAYyc,GAAiB,CAC1E5O,QAAS,SAACtM,GACRuM,QAAQC,IAAIxM,GACZ+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,oNApDgB,mBA+CrB0U,EA/CqB,KA+CEC,EA/CF,KA+CPzS,QAUrBoB,qBAAU,WACR,GAAIyG,EAAO,CAET,IAAM6K,EAAmBhgB,EAAKqJ,KAAKgM,UAAU4K,QAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,MAAQD,EAAEC,MAAS,GAAK,KAE/F,GAAIlL,EAAMM,UAAW,CACnB,IAAM2I,EAAgBjJ,EAAMM,UACtB6K,EAAmBN,EAAiB3O,QAAO,SAACvS,GAIhD,IAHA,IAAMgS,EAAUhS,EAASgS,QACnByP,EAAWzP,EAAQ9H,OACrB0J,EAAQ,EACHpJ,EAAI,EAAGA,EAAIiX,EAAUjX,IACxB8U,EAAc1J,SAAS5D,EAAQxH,GAAG9B,OACpCkL,IAGJ,OAAIA,IAAU6N,KAKhB7B,EAAQ,CACNle,GAAIR,EAAKqJ,KAAK7I,GACd6U,UAAWiL,SAGb5B,EAAQ,CACNle,GAAIR,EAAKqJ,KAAK7I,GACd6U,UAAW2K,OAIhB,CAAC7K,IAGJ,IAAMpH,EAAU,WACd,OAAIgS,EAAoB,kBAAC,GAAD,MACjB,MAGT,IAAK1W,IAASsV,IAAiBxJ,IAAU9V,EAAa,OACpD,kBAAC,GAAD,MAGF,GAAImO,EAEF,OADAG,QAAQC,IAAI4S,KAAKC,UAAUjT,IAEzB,kBAAC,GAAD,CACE9L,MAAM,iGACN8I,YAAY,wTAKlB,IAUMkW,EAAoB,SAAC1gB,GACzB,IAAIkV,EAAS,GACb,IAAK,IAAIjS,KAAOjD,EACF,SAARiD,GACFiS,EAAOhF,KAAK,CACV1P,GAAIyC,EACJjD,KAAMA,EAAKiD,GAAKjD,KAAKoJ,KAAI,SAAAiF,GACvB,MAAO,CACLA,OAAQA,EAAOmM,SACfhT,KAAM6G,EAAOgI,WACbjL,KAAMiD,EAAOQ,qBAMvB,OAAOqG,GA+BT,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CACEvU,KAAMuM,EACN9B,KAAM8B,EAAOA,EAAK9B,KAAO,GACzBlB,KAAMgD,EAAOA,EAAKhD,KAAO,GACzB9K,MAAO,kBAAM+N,GAAQ,MAEvB,kBAACY,EAAD,MACA,yBAAKnL,MAAO,CAAE+C,gBAAiBuZ,EAAgB1N,SAAW,mBAAqB,SAC7E,kBAACxD,GAAA,EAAD,CAAW/G,SAAS,MAClB,kBAAC,GAAD,CACEtG,KAAMke,EACNpN,QAASkN,EACTxX,OAAO,iCACPiE,KAAK,gOACLyQ,KAzEO,SAAC8E,GAChB1B,EAAe0B,GACf7B,GAAkB,IAwEVvS,YArEU,WAClBuS,GAAkB,GAClBN,EAAQtO,KAAK,QAqEP,kBAAC0Q,GAAD,CACEvX,KAAMA,EACN4O,OAAQ9C,EACR+C,mBAAoBA,EACpBC,cAnDY,SAACnY,GACrB,IAAMkV,EAASwL,EAAkB1gB,GACjC8f,EAAW,CACTX,UAAW,CACT9V,KAAMA,EAAK7I,GACXmgB,KAAM3B,EAAYxe,GAClBqgB,KAAMxhB,EAAYmB,GAClB0V,KAAMlW,EAAKkW,KACXlW,KAAMkV,KAEPyK,MAAK,SAAAmB,GACNtC,EAAQtO,KAAK,SAyCPkI,cArCY,SAACpY,GACrB,IAAMkV,EAASwL,EAAkB1gB,GACjC8f,EAAW,CACTX,UAAW,CACT9V,KAAMA,EAAK7I,GACXmgB,KAAM3B,EAAYxe,GAClBqgB,KAAMxhB,EAAYmB,GAClB0V,KAAMlW,EAAKkW,KACXlW,KAAMkV,YC9KC6L,GAXG,WAAO,IAAD,EACHC,cAAbxgB,EADgB,EAChBA,GAAIgH,EADY,EACZA,KAEV,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAY9F,MAAO,kCAAW8F,EAAX,wDACnB,kBAAC,GAAD,CAAWhH,GAAIA,M,oBCFrB,SAASygB,GAASnX,GAAQ,IAChBoX,EAAwCpX,EAAxCoX,SAAUpS,EAA8BhF,EAA9BgF,MAAOoD,EAAuBpI,EAAvBoI,MAAOiP,EAAgBrX,EAAhBqX,EAAMC,EADf,aACyBtX,EADzB,kCAGvB,OACE,uCACEvH,KAAK,WACLF,UAAU,eACViK,OAAQwC,IAAUoD,EAClB1R,GAAE,mCAA8B0R,GAChCc,kBAAA,8BAAwCd,IACpCkP,GAEHtS,IAAUoD,GACT,kBAAC/H,GAAA,EAAD,CAAKgX,EAAGA,GACLD,IAOX,SAASG,GAASnP,GAChB,MAAO,CACL1R,GAAG,uBAAD,OAAyB0R,GAC3B,gBAAgB,4BAAhB,OAA6CA,IAIjD,IAAMtQ,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCge,KAAM,CACJC,SAAU,QACVC,YAAY,aAAD,OAAele,EAAMuC,QAAQ4b,SACxCC,SAAU,eAIRC,GAAW,SAAC,GAAmC,IAAjC3hB,EAAgC,EAAhCA,KAAM8O,EAA0B,EAA1BA,MAAOsN,EAAmB,EAAnBA,aACzBla,EAAUN,KAChB,OACE,kBAACggB,GAAA,EAAD,CACEC,YAAY,WACZlf,QAAQ,aACRmM,MAAOA,EACP4C,SAAU0K,EACVnb,aAAW,gBACX6gB,cAAc,OACdzf,UAAWH,EAAQof,MAElBthB,EAAKoJ,KAAI,SAACsM,EAAKxD,GAAN,OACR,kBAAC6P,GAAA,EAAD,eAAK3P,MAAOsD,EAAItD,OAAWiP,GAAS,CAAEnP,iBAMxC8P,GAAa,SAAC,GAAmC,IAAjChiB,EAAgC,EAAhCA,KAAM8O,EAA0B,EAA1BA,MAAOsN,EAAmB,EAAnBA,aACjC,OACE,kBAAChX,EAAA,EAAD,CAAQC,SAAS,SAAS/D,MAAM,WAC9B,kBAACsgB,GAAA,EAAD,CACEjf,QAAQ,aACRmM,MAAOA,EACP4C,SAAU0K,EACV0F,cAAc,OACd7gB,aAAW,wBAEVjB,EAAKoJ,KAAI,SAACsM,EAAKxD,GAAN,OACR,kBAAC6P,GAAA,EAAD,eAAK3P,MAAOsD,EAAItD,OAAWiP,GAAS,CAAEnP,kBAiCjC+P,GA1BM,SAAC,GAAc,IAAZjiB,EAAW,EAAXA,KAAW,EACPqE,IAAM5E,SAAS,GADR,mBAC1BqP,EAD0B,KACnBoT,EADmB,KAG3B9F,EAAe,SAACiD,EAAG8C,GACvBD,EAASC,IAGX,OACE,kBAAC,WAAD,KACE,yBAAK9f,UAAU,aACb,kBAAC8Y,GAAA,EAAD,CAAQiH,QAAM,GACZ,kBAAC,GAAD,CAAUpiB,KAAMA,EAAM8O,MAAOA,EAAOsN,aAAcA,KAEpD,kBAACjB,GAAA,EAAD,CAAQkH,MAAI,GACV,kBAAC,GAAD,CAAYriB,KAAMA,EAAM8O,MAAOA,EAAOsN,aAAcA,KAErDpc,EAAKoJ,KAAI,SAACsM,EAAKxD,GAAN,OACR,kBAAC+O,GAAD,CAAUnS,MAAOA,EAAOoD,MAAOA,EAAOiP,EAAGzL,EAAItO,QAAUsO,EAAItO,QAAU,GAClEsO,EAAI4M,iB,gfCnGV,IAAMjG,GAAgBpd,YAAH,MC8KXsjB,GAlKI,SAAC,GAAY,IAAV/hB,EAAS,EAATA,GAAS,EACLf,mBAAS,MADJ,mBACtB4J,EADsB,KAChBqV,EADgB,OAEKjf,mBAAS,MAFd,mBAEtB4V,EAFsB,KAEXmN,EAFW,OAGH/iB,mBAAS,MAHN,mBAGtB0V,EAHsB,KAGfsN,EAHe,OAIHhjB,mBAAS,MAJN,mBAItBiT,EAJsB,KAIfgG,EAJe,OAKHtL,aAASiP,GAAe,CAChD8C,UAAW,CAAE3e,MACb4e,YAAa,WACXV,EAAQ,CACNle,GAAIR,EAAKqJ,KAAK7I,GACdkB,MAAO1B,EAAKqJ,KAAK3H,MACjBghB,eAAgB1iB,EAAKqJ,KAAKqZ,eAC1BC,aAAc3iB,EAAKqJ,KAAKsZ,eAE1BpD,EAAiBvf,EAAKqJ,KAAK8L,MAAMqK,SAT7BlS,EALqB,EAKrBA,QAAStN,EALY,EAKZA,KAaXuf,EAAmB,SAACE,GACxBC,MAAM,wBAAD,OAAyBD,IAC3BE,MAAK,SAACC,GAAD,OAAOA,EAAExU,UACduU,MAAK,SAAAvU,GACJ,IAAM+J,EAAQoH,GAASnR,GAEjBkO,EAAY0E,GAAe7I,GACjCsN,EAASnJ,OA6Ef,GAzEA5K,qBAAU,WACR,GAAIyG,EAAO,CACT,IAAImL,EAAmB,GACvB,GAAInL,EAAMM,UAAW,CACnB,IAAM2I,EAAgBjJ,EAAMM,UAC5B6K,EAAmBtgB,EAAKqJ,KAAKgM,UAAUhE,QAAO,SAACvS,GAI7C,IAHA,IAAMgS,EAAUhS,EAASgS,QACnByP,EAAWzP,EAAQ9H,OACrB0J,EAAQ,EACHpJ,EAAI,EAAGA,EAAIiX,EAAUjX,IACxB8U,EAAc1J,SAAS5D,EAAQxH,GAAG9B,OACpCkL,IAGJ,GAAIA,IAAU6N,EACZ,OAAO,UAIXD,EAAmBtgB,EAAKqJ,KAAKgM,UAE/B,IAAMuN,EAAetC,EAAiBlX,KAAI,SAACtK,EAAUoT,GACnD,IAAM8D,EAAalX,EAASgS,QAAQ1H,KAAI,SAACiF,EAAQ6D,GAC/C,IAAI+D,EAAS,GAqCb,OApCId,EAAMM,WACJN,EAAMM,UAAUf,SAASrG,EAAO7G,QAClCyO,EAAM,6BACDA,GADC,IAEJ9F,UAAU,KAIZgF,EAAMiB,aACJjB,EAAMiB,YAAY1B,SAASrG,EAAO7G,QACpCyO,EAAM,6BACDA,GADC,IAEJ1F,YAAY,KAId4E,EAAMgB,QACJhB,EAAMgB,OAAOzB,SAASrG,EAAO7G,QAC/ByO,EAAM,6BACDA,GADC,IAEJE,QAAQ,KAIVhB,EAAM+I,WACJ/I,EAAM+I,UAAUxJ,SAASrG,EAAO7G,QAClCyO,EAAM,6BACDA,GADC,IAEJiI,WAAW,KAIF,6BACV7P,GACA4H,MAQP,OAJiB,6BACZnX,GADY,IAEfgS,QAASkF,OAIbwM,EAAaI,MAEd,CAACzN,IAGA7H,IAAY6H,IAAUE,EAAW,OACnC,kBAAC,WAAD,KACE,kBAAC3K,GAAA,EAAD,MACA,qMA2BJ,OACE,kBAAC,WAAD,KACE,kBAACrC,GAAA,EAAD,CAAMC,WAAS,GACb,kBAAC6B,GAAA,EAAD,KACE,4BAAKd,EAAK3H,QAEZ,kBAAC2G,GAAA,EAAD,CAAMG,GAAI,GAAID,MAAI,EAACD,WAAS,EAACW,QAAQ,cACnC,kBAACkB,GAAA,EAAD,KACE,kBAACoI,GAAA,EAAD,CACE/R,GAAG,kBACH4R,MAAM,SACNlI,KAAK,SACL4E,MAAO4D,EACPhB,SApCW,SAACtQ,GACtB,IAAMkO,EAAMlO,EAAEC,cAAcyN,MACxBQ,EAAM,GAGVoJ,EAASpJ,IAgCCuT,gBAAiB,CACfC,QAAQ,GAEVngB,QAAQ,cAGZ,kBAACwH,GAAA,EAAD,CAAKgX,EAAG,GACN,kBAAC7N,GAAA,EAAD,CAAQ3Q,QAAQ,YAAYrB,MAAM,UAAU6O,UAAUuC,EAAsB5R,QApC7D,WACvB,IAAMiiB,EAAkBrQ,EACxB/E,QAAQC,IAAIyH,GAMZ,IAAK,IAAI/L,EAAI,EAAGA,EAAIyZ,EAAiBzZ,IACnC+L,EAAUjM,KAAI,SAACtK,EAAUoT,SA2BnB,iF,mHCpIG8Q,GA1BO,SAAC,GAAoC,IAAlCriB,EAAiC,EAAjCA,KAAMmS,EAA2B,EAA3BA,QAAS1T,EAAkB,EAAlBA,MAAOY,EAAW,EAAXA,KAC7C,OACE,kBAAC+S,GAAA,EAAD,CACEpS,KAAMA,EACNC,QAASxB,EACT4T,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAACC,GAAA,EAAD,CAAa1S,GAAG,sBAAsBR,EAAK0B,OAC3C,kBAACyR,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAmB5S,GAAG,4BACnBR,EAAKoL,OAGV,kBAACiI,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQxS,QAAS1B,EAAOkC,MAAM,WAA9B,wCAGA,kBAACgS,GAAA,EAAD,CAAQxS,QAASgS,EAASxR,MAAM,UAAUiS,WAAS,GAAnD,iD,+BC4BO0P,GA5CQ,SAAC,GAAqD,IAAnD/N,EAAkD,EAAlDA,OAAQhD,EAA0C,EAA1CA,MAAOoM,EAAmC,EAAnCA,KAAM4E,EAA6B,EAA7BA,KAAMjT,EAAuB,EAAvBA,SAAUkT,EAAa,EAAbA,OAC7D,OACE,kBAAC,WAAD,KACE,kBAACC,GAAA,EAAD,CAAO/gB,UAAU,mBACf,kBAACgG,GAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACU,QAAQ,iBAC3B,kBAACvG,EAAA,EAAD,CAAYC,QAAQ,KAAK+F,cAAY,GAClCwJ,EAAQ,GAEVgD,EAAOmO,UAAY,iCAAY,GAChC,kBAACrI,GAAA,EAAD,CACEsI,QAASrT,EACTyB,SAAU,SAACtQ,GAAD,OAAO+hB,EAAO,CACtB3iB,GAAI0U,EAAO1U,GACX0R,QACAnN,MAAO3D,KAETmiB,WAAY,CAAE,aAAc,uBAGhC,kBAAC7gB,EAAA,EAAD,CAAYC,QAAQ,YAAY+F,cAAY,GAA5C,mBACSwM,EAAOyL,KAAOzL,EAAOyL,KAAKjf,MAAQ,KAE3C,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,UAAUiB,QAAQ,QAAQ8E,cAAY,GAA1D,qDACawM,EAAOsO,SAEpB,kBAAC9gB,EAAA,EAAD,CAAYC,QAAQ,UAAUiB,QAAQ,QAAQ8E,cAAY,GAA1D,qDACawM,EAAOuO,cAKpB,kBAACpb,GAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACU,QAAQ,gBAAgB5G,UAAU,wBACrD,kBAACtB,EAAA,EAAD,CAAYsB,UAAU,cAAcpB,aAAW,SAASH,QAAS,kBAAMoiB,EAAKhO,EAAO1U,MACjF,kBAAC,KAAD,CAAUqC,SAAS,WAErB,kBAAC9B,EAAA,EAAD,CAAYsB,UAAU,cAAcpB,aAAW,SAASH,QAAS,kBAAMwd,EAAKpJ,KAC1E,kBAAC,KAAD,CAAarS,SAAS,e,y0BC7C3B,IAAM6gB,GAAqBzkB,YAAH,MAiBlB0kB,GAAmB1kB,YAAH,M,kvBCjBKA,YAAH,MAWDA,YAAH,MAXpB,IAqBM2kB,GAAiB3kB,YAAH,MCqhBZ4kB,GAzgBQ,SAAC,GAAY,IAAVrjB,EAAS,EAATA,GAAS,EACTf,oBAAS,GADA,mBAC1ByN,EAD0B,KACpBC,EADoB,OAGP1N,qBAHO,mBAG1BqkB,EAH0B,KAGnBC,EAHmB,QAIlBzkB,cAC0BG,mBAAS,IAAIukB,OALrB,gCAMHvkB,oBAAS,IANN,mBAM1BwkB,EAN0B,KAMjBC,EANiB,OAOSzkB,qBAPT,mBAO1B0kB,EAP0B,KAOXC,EAPW,OAQH3kB,mBAAS,CACrC4kB,aAAc,GACdC,OAAQ,CACN,CACExV,MAAO,EACPpN,MAAO,6EAET,CACEoN,MAAO,EACPpN,MAAO,iEAGXqH,OAAQ,GACRwb,IAAK,GACLC,IAAK,KAtB0B,mBAQ1BC,EAR0B,KAQjBC,EARiB,OAwBSjlB,qBAxBT,mBAwB1BklB,EAxB0B,KAwBXC,EAxBW,OAyBGnlB,mBAAS,IAzBZ,mBAyB1BolB,EAzB0B,KAyBdC,EAzBc,OA0BiBrlB,qBA1BjB,mBA0B1BslB,EA1B0B,KA0BPC,EA1BO,OA2BGvlB,oBAAS,GA3BZ,mBA2B1BwlB,EA3B0B,aA4BHxlB,mBAAS,CACrC6e,MAAM,EACNpU,KAAM,QACNqU,QAAS,GACTrT,SAAU,OAhCqB,gCAsC7BkC,aAASuW,GAAkB,CAC7BxE,UAAW,CACT3e,MAEF4e,YAAa,WACXgF,EAAiBc,EAAYA,iBARzBA,EAnCyB,EAmC/BllB,KACSmlB,EApCsB,EAoC/B7X,QACO8X,EArCwB,EAqC/B5X,MArC+B,EAkD7BJ,aAASsW,GAAoB,CAC/BtE,YAAa,WACXsF,EAAW,6BACND,GADK,IAER1b,OAAQsc,EAAetc,OAAOK,KAAI,SAAAuX,GAChC,MAAO,CACL7R,MAAO6R,EAAKngB,GACZkB,MAAOif,EAAKjf,MACZ4jB,SAAU3E,EAAK2E,SAASlT,UAG5BiS,aAAcgB,EAAehB,aAAajb,KAAI,SAAAmc,GAC5C,MAAO,CACLzW,MAAOyW,EAAQ/kB,GACfkB,MAAO6jB,EAAQ5jB,mBAjBjB0jB,EA/CyB,EA+C/BrlB,KAEOwlB,GAjDwB,EAgD/BlY,QAhD+B,EAiD/BE,OAjD+B,GAyE7B3N,sBAAY+jB,GAAgB,CAC9BlW,QAAS,SAACtM,GACR+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,+QAERuC,QAAQC,IAAIxM,MA/EiB,qBAuE/BqkB,GAvE+B,MAwEpBC,GAxEoB,MAwE7BpY,QAWJoB,qBAAU,WACR,GAAIiW,EACF,GAAIA,EAAc5b,OAAOC,OAAQ,CAC/B,IAAM2c,EAAMT,EAAYA,YAAY7T,QAClC,SAAA6D,GACE,QAAIA,EAAOyL,MACFgE,EAAc5b,OAAO2L,SAASQ,EAAOyL,KAAKngB,OAKvD4jB,EAAiBuB,QAEjBvB,EAAiBc,EAAYA,eAGhC,CAACP,IAGJ,IAAMvI,GAAe,SAACiD,EAAGC,KAIzB,GAAI6F,IAAuBD,IAAgBf,IAAkBM,EAAS,OACpE,kBAAC,GAAD,MAGF,GAAIW,GAAoBI,EAEtB,OADA7X,QAAQC,IAAI4S,KAAKC,UAAU2E,IAEzB,kBAAC,GAAD,CACE1jB,MAAM,iGACN8I,YAAY,wTAKlB,IAAMuD,GAAU,WACd,OAAI2X,GAAqB,kBAAC,GAAD,MAClB,MAWHE,GAAc,SAAC,GAAgB,IAE7BC,EAF4B,EAAb3Q,OACQ+K,QAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE3Y,KAAO4Y,EAAE5Y,KAAQ,GAAK,KAC/C4B,KAAI,SAAAsM,GAChC,MAAiB,KAAbA,EAAItK,KACCsK,EAAIlO,KAAO,IAAMkO,EAAItK,KAEvBsK,EAAIlO,QAEbmG,QAAQC,IAAIiY,IAGRC,GAAa,aAIbC,GAAe,SAAC/lB,GACpB,GAAIA,EAAK+E,MAAMihB,YAAYC,SAAU,CACnC,IAMMC,GALFlmB,EAAKkS,MAAQ,EAAI6S,EACdZ,EAAclE,MAAM8E,EAAmB/kB,EAAKkS,MAAQ,GAEpDiS,EAAclE,MAAMjgB,EAAKkS,MAAO6S,IAEzB1T,QAAO,SAAAqE,GAAG,OAAKmP,EAAWnQ,SAASgB,EAAIlV,OAAK4I,KAAI,SAAAsM,GAAG,OAAIA,EAAIlV,MAMzE,OALAskB,GAAc,SAAApO,GAAS,6BAClBA,GADkB,aAElBwP,YAELlB,EAAqBhlB,EAAKkS,OAI5B,GADA8S,EAAqBhlB,EAAKkS,OACtBlS,EAAK+E,MAAMihB,YAAYG,QAA3B,CACE,GAAItB,EAAWnQ,SAAS1U,EAAKQ,IAAK,CAChC,IAAM4lB,EAAIvB,EAAWxT,QAAO,SAAA7Q,GAC1B,OAAOA,IAAOR,EAAKQ,MAGrB,YADAskB,EAAcsB,GAGdtB,GAAc,SAAApO,GAAS,6BAClBA,GADkB,CAErB1W,EAAKQ,aAMX,GAAIqkB,EAAWnQ,SAAS1U,EAAKQ,IAAK,CAChC,GAAIqkB,EAAW7b,OAAS,EAEtB,YADA8b,EAAc,CAAC9kB,EAAKQ,KAGtBskB,EAAc,SAEdA,EAAc,CAAC9kB,EAAKQ,MAmClB6lB,GAAsB,WAM1B,IALA,IAAM3K,EAAcyI,EAAc9S,QAAO,SAAA6D,GAAM,OAC7C2P,EAAWnQ,SAASQ,EAAO1U,OAC3B4I,KAAI,SAAAsM,GAAG,OAAIA,EAAIR,UACXoR,EAAW5K,EAAY1S,OACzBud,EAAa,GACRjd,EAAI,EAAGA,EAAIgd,EAAUhd,IAAK,CAQjCid,GAPsB7K,EAAYpS,GAAG2W,QAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE3Y,KAAO4Y,EAAE5Y,KAAQ,GAAK,KACvD4B,KAAI,SAAAsM,GAChC,MAAiB,KAAbA,EAAItK,KACCsK,EAAIlO,KAAO,IAAMkO,EAAItK,KAEvBsK,EAAIlO,QAECgf,SAEhBC,GAAWF,IAGPE,GAAa,SAACzmB,GAClB,IAAM0mB,EAAU9M,SAAS+M,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAAC7mB,GAAO,CAAEkK,KAAM,eACtCwc,EAAQI,KAAOC,IAAIC,gBAAgBJ,GACnCF,EAAQO,SAAW,aACnBrN,SAASsN,KAAKC,YAAYT,GAC1BA,EAAQU,SAsBJnb,GAAO,kBAAC,KAAD,CAA0BpJ,SAAS,UAC1CwkB,GAAc,kBAAC,KAAD,CAAcxkB,SAAS,UAE3C,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CACElC,KAAMuM,EACN9B,KAAM8B,EAAOA,EAAK9B,KAAO,GACzBlB,KAAMgD,EAAOA,EAAKhD,KAAO,GACzB9K,MAAO,kBAAM+N,GAAQ,MAEvB,kBAACY,GAAD,MACA,kBAAC,GAAD,CACEpN,KAAMsjB,EACNnR,QA3FmB,WACvB2S,GAAa,CACXtG,UAAW,CACTxG,QAASkM,GAEX/kB,OAAQ,SAACrB,EAAD,GAAsB,IACtB6oB,EADqB,EAAXtnB,KACSunB,cAAcne,KAAI,SAAAoe,GAAG,OAAIA,EAAIhnB,MACtD4jB,EAAiBD,EAAc9S,QAAO,SAAA6D,GAAM,OAAKoS,EAAY5S,SAASQ,EAAO1U,QAC7EmN,QAAQC,IAAInP,EAAMuB,KAAKA,MACvBvB,EAAMgpB,OAAO,CACX5oB,OAAQ,CACNqmB,YADM,SACMwC,EADN,GACoC,IAAdC,EAAa,EAAbA,UAE1B,OADAha,QAAQC,IAAI8Z,GACLA,EAAarW,QAAO,SAAAuW,GAAO,OAAKN,EAAY5S,SAASiT,EAAU,KAAMC,cAMtF1D,GAAW,IAyEP9kB,MAAO,kBAAM8kB,GAAW,IACxBlkB,KACE,CACE0B,MAAO,kKACP0J,KAAM,0bAIZ,yBAAK/I,UAAU,uBAEb,kBAACgG,GAAA,EAAD,CAAMC,WAAS,EAACW,QAAQ,gBAAgB5G,UAAU,mBAChD,kBAAC8H,GAAA,EAAD,CAAK9H,UAAU,gBACb,kBAACiR,GAAA,EAAD,CACE3Q,QAAQ,YACRrB,MAAM,UACNR,QAASulB,GACTlW,UAAW0U,EAAW7b,OACtB6e,UAAW,kBAAC,KAAD,OALb,0DASA,kBAACvU,GAAA,EAAD,CACE3Q,QAAQ,YACR7B,QAzFqB,aA0FrBqP,UAAW0U,EAAW7b,OACtB6e,UAAW,kBAAC,KAAD,OAJb,qDASF,kBAAC1d,GAAA,EAAD,KACE,kBAACmJ,GAAA,EAAD,CACE3Q,QAAQ,YACRrB,MAAM,YACNR,QAxGgB,WAC1BojB,GAAW,IAwGD/T,UAAW0U,EAAW7b,OACtB6e,UAAW,kBAAC,KAAD,OALb,gDAWJ,kBAACxf,GAAA,EAAD,CAAMC,WAAS,EAACW,QAAQ,aAAa2R,WAAW,SAASjX,QAAS,GAChE,kBAAC0E,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,GACnC,kBAACvV,GAAA,EAAD,CACE3P,MAAO,CAAEb,MAAO,QAChBvB,GAAG,OACH0J,KAAK,OACLvH,QAAQ,WACRmM,MAAOgV,EACPpS,SAvEa,SAACtQ,GACxB,IAAM2mB,EAAO3mB,EAAE+X,OAAOrK,MACtBiV,EAASgE,IAsECC,WAAY,CACVC,eACE,kBAACC,GAAA,EAAD,CAAgB7iB,SAAS,SAErB,kBAAC5D,EAAA,EAAD,CAASC,MAAM,oDACb,kBAAC,KAAD,CAAWkB,MAAO,CAAEulB,OAAQ,WAC1BrnB,QAAS,kBAAMijB,EAAS,aAWxC,kBAAC1b,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,GACnC,kBAACvW,GAAA,EAAD,CACEC,UAAQ,EACR4W,UAAW,EACX3W,QAASgT,EAAQD,IACjB6D,sBAAoB,EACpBC,eAAa,EACb5W,SAAU0K,GACVmM,cAAe,qGACf3W,eAAgB,SAACC,GAAD,OAAYA,EAAOnQ,OACnCqQ,aAAc,SAACF,EAAD,OAAW5B,EAAX,EAAWA,SAAX,OACZ,kBAAC,IAAMuY,SAAP,KACE,kBAACxN,GAAA,EAAD,CACE/O,KAAMA,GACNob,YAAaA,GACbzkB,MAAO,CAAEc,YAAa,GACtB4f,QAASrT,IAEV4B,EAAOnQ,QAGZ2Q,YAAa,SAACC,GAAD,OACX,kBAACC,GAAA,EAAD,iBAAeD,EAAf,CAAuB3P,QAAQ,WAAWyP,MAAM,oDAItD,kBAAC/J,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,GACnC,kBAACvW,GAAA,EAAD,CACEC,UAAQ,EACR4W,UAAW,EACX3W,QAASgT,EAAQF,IACjB8D,sBAAoB,EACpBC,eAAa,EACb5W,SAAU0K,GACVmM,cAAe,qGACf3W,eAAgB,SAACC,GAAD,OAAYA,EAAOnQ,OACnCqQ,aAAc,SAACF,EAAD,OAAW5B,EAAX,EAAWA,SAAX,OACZ,kBAAC,IAAMuY,SAAP,KACE,kBAACxN,GAAA,EAAD,CACE/O,KAAMA,GACNob,YAAaA,GACbzkB,MAAO,CAAEc,YAAa,GACtB4f,QAASrT,IAEV4B,EAAOnQ,QAGZ2Q,YAAa,SAACC,GAAD,OACX,kBAACC,GAAA,EAAD,iBAAeD,EAAf,CAAuB3P,QAAQ,WAAWyP,MAAM,4BAItD,kBAAC/J,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,GACnC,kBAACvW,GAAA,EAAD,CACEC,UAAQ,EACR4W,UAAW,EACX3W,QAASgT,EAAQ1b,OAAOmX,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEmF,SAAWlF,EAAEkF,YACtDmD,QAAS,SAAC5W,GAAD,OAAYA,EAAOyT,UAC5B+C,sBAAoB,EACpBC,eAAa,EACb5W,SAjKa,SAAC2N,EAAGqJ,GAC3B,IAAM3f,EAAS2f,EAAOtf,KAAI,SAAAuX,GAAI,OAAIA,EAAK7R,SACvC8V,EAAiB,CACf7b,YA+JQwf,cAAe,qGACf3W,eAAgB,SAACC,GAAD,OAAYA,EAAOnQ,OACnCqQ,aAAc,SAACF,EAAD,OAAW5B,EAAX,EAAWA,SAAX,OACZ,kBAAC,IAAMuY,SAAP,KACE,kBAACxN,GAAA,EAAD,CACE/O,KAAMA,GACNob,YAAaA,GACbzkB,MAAO,CAAEc,YAAa,GACtB4f,QAASrT,IAEV4B,EAAOnQ,QAGZ2Q,YAAa,SAACC,GAAD,OACX,kBAACC,GAAA,EAAD,iBAAeD,EAAf,CAAuB3P,QAAQ,WAAWyP,MAAM,yCAMxD,kBAAC/J,GAAA,EAAD,CAAMC,WAAS,EAACW,QAAQ,aAAa2R,WAAW,SAASjX,QAAS,GAChE,kBAAC0E,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,GACnC,kBAACvW,GAAA,EAAD,CACEC,UAAQ,EACR4W,UAAW,EACX3W,QAASgT,EAAQJ,aACjBgE,sBAAoB,EACpBC,eAAa,EACb5W,SAAU0K,GACVmM,cAAe,qGACf3W,eAAgB,SAACC,GAAD,OAAYA,EAAOnQ,OACnCqQ,aAAc,SAACF,EAAD,OAAW5B,EAAX,EAAWA,SAAX,OACZ,kBAAC,IAAMuY,SAAP,KACE,kBAACxN,GAAA,EAAD,CACE/O,KAAMA,GACNob,YAAaA,GACbzkB,MAAO,CAAEc,YAAa,GACtB4f,QAASrT,IAEV4B,EAAOnQ,QAGZ2Q,YAAa,SAACC,GAAD,OACX,kBAACC,GAAA,EAAD,iBAAeD,EAAf,CAAuB3P,QAAQ,WAAWyP,MAAM,sEAItD,kBAAC/J,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,GACnC,kBAACvW,GAAA,EAAD,CACEE,QAASgT,EAAQH,OACjB5S,SA7Me,SAAC2N,EAAGqJ,KA8MnBH,cAAe,qGACf3W,eAAgB,SAACC,GAAD,OAAYA,EAAOnQ,OACnC2Q,YAAa,SAACC,GAAD,OACX,kBAACC,GAAA,EAAD,iBAAeD,EAAf,CAAuB3P,QAAQ,WAAWyP,MAAM,8CAItD,kBAAC/J,GAAA,EAAD,CAAME,MAAI,EAACD,WAAS,EAACE,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,EAAG7e,QAAQ,cACxD,kBAACqK,GAAA,EAAD,CACE3Q,QAAQ,YACR7B,QAASulB,GACTlW,UAAW0U,EAAW7b,QAHxB,2DAQF,kBAACX,GAAA,EAAD,CAAME,MAAI,EAACD,WAAS,EAACE,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,EAAG7e,QAAQ,YACxD,kBAACkB,GAAA,EAAD,CAAKwe,EAAG,GACN,uBAAG7B,KAAK,IAAR,4DAEF,kBAAC3c,GAAA,EAAD,CAAKwe,EAAG,GACN,uBAAG7B,KAAK,IAAR,iFAKR,kBAAC,GAAD,CACEnmB,KAAMskB,EACNnS,QAhXsB,aAiXtB1T,MA7WoB,aA8WpBY,KACE,CACE0B,MAAO,0IACP0J,KAAM,qwBAIZ,kBAAC/C,GAAA,EAAD,CAAMC,WAAS,EAAC3E,QAAS,EAAG6E,GAAI,IAC7B2b,EAAc/a,KAAI,SAAC8L,EAAQhD,GAAT,OACjB,kBAAC7J,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,EAAG7kB,IAAKiP,GAC3C,kBAAC,GAAD,CACEgD,OAAQA,EACRhD,MAAOA,EACPoM,KAAMsH,GACN1C,KAAM4C,GACN7V,SAAU4U,EAAWnQ,SAASQ,EAAO1U,IACrC2iB,OAAQ4C,Y,qBCteP6C,GAzDE,SAAC,GAAkB,IAAhB9pB,EAAe,EAAfA,SAAe,EAETW,mBAAS,CAC/BopB,OAAQ/pB,EAASgS,QAAQ1H,KAAI,SAACiW,EAAGnN,GAAJ,OAAcA,EAAQ,EAAI,MACvD4W,IAAK,CACH,CACE1W,MAAO,kCACPpS,KAAMlB,EAASgS,QAAQ1H,KAAI,SAAAiF,GAAM,OAAIA,EAAOsK,QAAQ3P,cAPzB,mBAE1BhJ,EAF0B,KAY3B+oB,GAZ2B,KAYhBta,oBAsCjB,OArCAC,qBAAU,WACR,IAAMsa,EAAaD,EAASna,QAAQqa,WAAW,MAE/C,IAAIC,KAAMF,EAAY,CACpB9e,KAAM,MACNlK,KAAM,CACJ6oB,OAAQ7oB,EAAK6oB,OACbM,SAAUnpB,EAAK8oB,KAEjBrX,QAAS,CACP2X,WAAW,EACXhjB,UAAW,CACT8E,SAAU,GAEZme,MAAO,CACLC,kBAAmB,GAErBC,4BAA6B,EAC7BC,OAAQ,CACN5lB,SAAS,EACTilB,OAAQ,CAENY,UAAW,QACX5mB,SAAU,KAGd6mB,OAAQ,CACNC,MAAO,CAAC,CACNC,MAAO,CACLC,aAAa,WAMtB,IAGD,kBAAC,WAAD,KACE,4BAAQ7a,IAAK+Z,MClBJe,GAnCK,SAAC,GAAyB,IAAvB5X,EAAsB,EAAtBA,MAAOpT,EAAe,EAAfA,SAAe,EACjBW,mBACxBX,EAASgS,QAAQ0F,QAAO,SAACC,EAAMsT,GAC7B,OAAOtT,EAAOsT,EAAKpR,QAAQ3P,SAC1B,IAJsC,mBACpC0J,EADoC,UAO3C,OACE,kBAAC,WAAD,KACE,yBAAKrQ,UAAU,gBACb,+BACE,4BACE,oCAAe,0EAAgB,kCAEjC,4BACE,wBAAIA,UAAU,iBAAiB2nB,QAAQ,KAAI,gCAAS9X,EAAQ,EAAjB,KAAsBpT,EAAS4C,SAE3E5C,EAASgS,QAAQ1H,KAAI,SAACiF,EAAQ6D,GAAT,OACpB,4BACE,wBAAI7P,UAAU,gBACZ,gCAAS6P,EAAQ,GADnB,OACkC,gCAAS7D,EAAO7G,MADlD,IACkE6G,EAAO3M,OAAW,4BAAK2M,EAAOsK,QAAQ3P,QACxG,4BACG0J,GACErE,EAAOsK,QAAQ3P,OAAS0J,EAAQ,KAAKuX,QAAQ,GAC9C,a,gbCxBX,IAAMC,GAAwBjrB,YAAH,MC+DnBkrB,GAlDY,SAAC,GAAY,IAAV3pB,EAAS,EAATA,GAAS,EAMjC4M,aAAS8c,GAAuB,CAClC/K,UAAW,CACT3e,MAEF4e,YAAa,WACXzR,QAAQC,IAAIsX,MARRA,EAH6B,EAGnCllB,KACSmlB,EAJ0B,EAInC7X,QACO8X,EAL4B,EAKnC5X,MAUF,OAAI2X,EACF,kBAAC,GAAD,CAAcjb,KAAK,SAGjBkb,GACFzX,QAAQC,IAAI4S,KAAKC,UAAU2E,IAEzB,kBAAC,GAAD,CACE1jB,MAAM,iGACN8I,YAAY,yTAMhB,kBAAC,WAAD,KACE,0MACA,kBAACnC,GAAA,EAAD,CAAME,MAAI,EAACD,WAAS,GACjB4c,EAAY7b,KAAKgM,UAAUjM,KAAI,SAACtK,EAAUoT,GAAX,OAC9B,kBAAC,WAAD,KACE,kBAAC7J,GAAA,EAAD,CAAMG,GAAI,GAAIqS,GAAI,GAChB,kBAAC,GAAD,CAAa3I,MAAOA,EAAOjP,IAAKnE,EAAS0B,GAAI1B,SAAUA,KAEzD,kBAACuJ,GAAA,EAAD,CAAMG,GAAI,GAAIqS,GAAI,GAChB,kBAAC,GAAD,CAAU/b,SAAUA,KAEtB,mC,8dCtDL,IAAMud,GAAgBpd,YAAH,MC4KXmrB,GAzJI,SAAC,GAAY,IAAV5pB,EAAS,EAATA,GAAS,EACGf,oBAAS,GADZ,mBACtB4qB,EADsB,KACZC,EADY,OAEH7qB,oBAAS,GAFN,mBAEfgjB,GAFe,aAGOhjB,oBAAS,GAHhB,mBAGtB8qB,EAHsB,KAGVC,EAHU,OAKS/qB,oBAAS,GALlB,mBAKtBgrB,EALsB,KAKTC,EALS,KAO7Bhc,qBAAU,WAER,GAAI2b,EAAU,CACZ,IAAMhhB,EAAOshB,EAAWA,EAASthB,KAAO,KACxC,GAAIA,EAAM,CACR,IAAMgM,EAAYhM,EAAKgM,UACjBuV,EAAmBP,EAASrhB,OAG5B6hB,EAAmBxV,EAAUjM,KAAI,SAAAtK,GACrC,IAAMgsB,EAAiBhsB,EAASgS,QAAQ1H,KAAI,SAAAiF,GAE1C,IADA,IAAIgP,EAAI,aAAOhP,EAAOsK,SACbrP,EAAI,EAAGA,EAAIshB,EAAkBthB,IAChC+gB,EAAS/gB,GAAGoL,SAASrG,EAAO7G,OAC9B6V,EAAKnN,KAAK,CACR1I,KAAM6G,EAAO7G,KACb4D,KAAM,KAIZ,OAAO,6BACFiD,GADL,IAEEsK,QAAS0E,OAGb,OAAO,6BACFve,GADL,IAEEgS,QAASga,OAGbJ,EAAeG,GACfld,QAAQC,IAAIid,OAGf,CAACR,IAzCyB,MA+CzBjd,aAASiP,GAAe,CAC1B8C,UAAW,CACT3e,MAEF4e,YAAa,WACXG,EAAiBoL,EAASthB,KAAK8L,MAAMqK,MACrC7R,QAAQC,IAAI+c,MATRA,EA5CqB,EA4C3B3qB,KACS+qB,EA7CkB,EA6C3Bzd,QACO0d,EA9CoB,EA8C3Bxd,MAWI+R,EAAmB,SAACE,GACxBC,MAAMvhB,EAAUshB,GACbE,MAAK,SAACC,GAAD,OAAOA,EAAExU,UACduU,MAAK,SAAAvU,GACJ,IAAM+J,EAAQoH,GAASnR,GAEjByU,EAAY7B,GAAe7I,GACjCsN,EAAS5C,OAqCf,GAAIkL,EAAiB,OACnB,kBAAC,GAAD,CAAc7gB,KAAK,SAGrB,GAAI8gB,EAEF,OADArd,QAAQC,IAAI4S,KAAKC,UAAUuK,IAEzB,kBAAC,GAAD,CACEtpB,MAAM,iGACN8I,YAAY,wTAKlB,IAAMuD,EAAU,WACd,OAAIwc,EAAmB,kBAAC,GAAD,MAChB,MAGT,OACE,kBAAC,WAAD,KACE,kBAACxc,EAAD,MACA,8IACA,kBAAC1F,GAAA,EAAD,CAAMC,WAAS,EAAC3E,QAAS,EAAG6E,GAAI,IAC9B,kBAACH,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAAC2B,GAAA,EAAD,KACE,wMACA,6BACA,2BACED,KAAK,OACL+gB,QA/DW,SAAC7pB,GAEtB,GADAA,EAAE8pB,iBACG9pB,EAAE+X,OAAOgS,MAAM,GAApB,CACAX,GAAc,GACd,IAAIY,EAAS,IAAIC,WACbzE,EAAOxlB,EAAE+X,OAAOgS,MAAM,GAEtBvE,IACFwE,EAAOE,UAAY,WAOjB,IALA,IAEMC,EAFaH,EAAOlW,OAAOqI,QAAQ,SAAU,IACpBT,MAAM,QACRzL,QAAO,SAAAma,GAAG,OAAIA,EAAIxiB,UACzCyiB,EAAUF,EAASviB,OACrB0iB,EAAqB,GAChBpiB,EAAI,EAAGA,EAAImiB,EAASniB,IAAK,CAIhC,IAHA,IAAMqiB,EAASJ,EAASjiB,GAAGwT,MAAM,KAC3B8O,EAAaD,EAAO3iB,OACtB6iB,EAAW,GACNC,EAAI,EAAGA,EAAIF,EAAYE,IAAK,CACnC,IAAMC,EAAWJ,EAAOG,GACxBD,EAAS3b,KAAK6b,EAASC,QAEzBN,EAAmBxb,KAAK2b,GAE1BvB,EAAYoB,GACZlB,GAAc,KAGlBY,EAAOa,WAAWrF,GAClBxlB,EAAE+X,OAAOrK,MAAQ,SAqCZ2b,GACCA,EAAYrhB,KAAI,SAACtK,EAAUoT,GAAX,OACd,kBAAC,WAAD,KACE,kBAAC7J,GAAA,EAAD,CAAMG,GAAI,GAAIqS,GAAI,GAChB,kBAAC,GAAD,CAAa3I,MAAOA,EAAOjP,IAAKnE,EAAS0B,GAAI1B,SAAUA,IACvD,6BAEF,kBAACuJ,GAAA,EAAD,CAAMG,GAAI,GAAIqS,GAAI,GAChB,kBAAC,GAAD,CAAU/b,SAAUA,IACpB,oCCnIDotB,GAzBK,SAAC,GAAY,IAAV1rB,EAAS,EAATA,GACfR,EAAO,CACX,CACEoS,MAAO,iCACPkQ,UAAW,kBAAC,GAAD,CAAgB9hB,GAAIA,KAEjC,CACE4R,MAAO,6CACPkQ,UAAW,kBAAC,GAAD,CAAmB9hB,GAAIA,KAEpC,CACE4R,MAAO,mDACPkQ,UAAW,kBAAC,GAAD,CAAY9hB,GAAIA,KAE7B,CACE4R,MAAO,2EACPkQ,UAAW,kBAAC,GAAD,CAAY9hB,GAAIA,MAG/B,OACE,kBAAC,GAAD,CAAcR,KAAMA,KCRTuH,GAfC,WAAO,IAAD,EACDyZ,cAAbxgB,EADc,EACdA,GAAIgH,EADU,EACVA,KAEV,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAY9F,MAAO,gEAAgB8F,IACnC,6BACE,kBAACwG,GAAA,EAAD,CAAW/G,SAAS,KAAKrE,MAAO,CAAEwE,QAAS,IACzC,kBAAC,GAAD,CAAa5G,GAAIA,QCH3B,IAiCe2rB,GAjCG,SAACC,GACjB,IAAMC,EAZR,SAAiBD,GACf,IAAIE,EAAS,IAAIC,UAEbC,EADWF,EAAOG,gBAAgB,UAAW,YACpBC,qBAAqB,eAAe,GAAGC,aAChEC,EAAMN,EAAOG,gBAAgBL,EAAW,YAC5C,QAAIQ,EAAIC,uBAAuBL,EAAe,eAAexjB,OAAS,IAG/D4jB,EAIKE,CAAQV,GACpB,GAAIC,EAAK,CAIP,IAHA,IAAM1T,EAAU0T,EAAIK,qBAAqB,KACnCpG,EAAW3N,EAAQ3P,OACrB+jB,EAAU,GACLzjB,EAAI,EAAGA,EAAIgd,EAAUhd,IAAK,CAUjC,IATA,IAAI0jB,EAAa,CACfC,KAAMtU,EAAQrP,GAAG4jB,aAAa,aAC9BnF,KAAMpP,EAAQrP,GAAG4jB,aAAa,cAC9BC,IAAKxU,EAAQrP,GAAG4jB,aAAa,aAC7BE,IAAKzU,EAAQrP,GAAG4jB,aAAa,cAEzB7X,EAAYsD,EAAQrP,GAAGojB,qBAAqB,KAC5CW,EAAahY,EAAUrM,OACzBskB,EAAc,GACThkB,EAAI,EAAGA,EAAI+jB,EAAY/jB,IAAK,CAGnC,IAFA,IAAMwH,EAAUuE,EAAU/L,GAAGojB,qBAAqB,KAC5CnM,EAAWzP,EAAQ9H,OAChBM,EAAI,EAAGA,EAAIiX,EAAUjX,IAAK,CACjC,IAAM9B,EAAOsJ,EAAQxH,GAAG4jB,aAAa,KAAKnP,SAAS,EAAG,KACtDuP,EAAYpd,KAAK1I,GAEnBwlB,EAAWlc,QAAUwc,EAEvBP,EAAQ7c,KAAK8c,GAEf,OAAOD,EAEP,OAAO,GCjCLnrB,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCiG,SAAU,CACRC,OAAQlG,EAAMkG,OAAOC,OAAS,EAC9BnI,MAAO,YA+DIisB,GA3DW,WAAO,IAAD,EACM9tB,mBAAS,MADf,mBACvB+tB,EADuB,KACXC,EADW,OAEMhuB,oBAAS,GAFf,mBAEvB8qB,EAFuB,KAEXC,EAFW,KAGxBtoB,EAAUN,KAyBV8rB,EAAW,SAAC,GAAc,IAAZ1tB,EAAW,EAAXA,KAElB,OADA2N,QAAQC,IAAI5N,GACK,KAAbA,EAAKmtB,KAA2B,KAAbntB,EAAKotB,IACnBptB,EAAK8Q,QAAQ6c,WAAa,OAE1B3tB,EAAK8Q,QAAQ6c,WAAb3tB,SAIX,OACE,kBAAC,WAAD,KACE,kBAAC4K,GAAA,EAAD,CAAUvI,UAAWH,EAAQqH,SAAU5I,KAAM4pB,GAC3C,kBAAC7f,GAAA,EAAD,CAAkBpJ,MAAM,aAE1B,2BACE4I,KAAK,OACL+gB,QAvCc,SAAC7pB,GACnBA,EAAE8pB,iBACFV,GAAc,GACd,IAAIY,EAAS,IAAIC,WACbzE,EAAOxlB,EAAE+X,OAAOgS,MAAM,GACtBvE,IACFwE,EAAOE,UAAY,WACjB,IAAMsC,EAAUxC,EAAOlW,OACjBmX,EAAMF,GAAUyB,GACtB,OAAIvB,GACFoB,EAAcpB,QACd7B,GAAc,KAGdA,GAAc,QACd7c,QAAQC,IAAI,uHAIhBwd,EAAOa,WAAWrF,OAsBlB,yBAAKvkB,UAAU,kBACZmrB,EACCA,EAAWpkB,KAAI,SAAC8L,EAAQ5L,GAAT,OACb,6BACI,kBAACokB,EAAD,CAAU1tB,KAAMkV,QAEjB,mICzBA2Y,GAnCC,SAAC,GAAc,IAAZ7tB,EAAW,EAAXA,KACjB,OACE,kBAAC,WAAD,KACE,kBAACqI,GAAA,EAAD,CAAMC,WAAS,EAAC3E,QAAS,GACtB3D,EAAKoJ,KAAI,WAAqB8I,GAAW,IAA7B4b,EAA4B,EAA5BA,OACLC,EADiC,EAApBC,OACS5kB,KAAI,YAA0B,IAAvB1H,EAAsB,EAAtBA,MAC3BusB,EADiD,EAAfC,SACjB9kB,KAAI,SAAA+kB,GAAC,OAAI,8BAAM,8BAAOA,GAAS,iCACtD,OACE,8BACE,0BAAM9rB,UAAU,cAAcX,GAAa,6BAC3C,8BAAOusB,OAIb,OACE,kBAAC5lB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGoS,GAAI,GAC3B,kBAACuI,GAAA,EAAD,KACE,uDAAclR,EAAQ,GAAS,6BAC/B,0FAAmB4b,EAAO,IAAU,6BACpC,8BAAOA,EAAO,IAAU,0BAAMzrB,UAAU,eAAhB,UAAkCyrB,EAAO,GAAzC,YAA+CA,EAAO,GAAtD,YAA4DA,EAAO,GAAG7N,MAAM,GAAI,GAAhF,MAA6F,6BACrH,wCAAU6N,EAAO,GAAjB,YAAuBA,EAAO,GAAGM,UAAU,EAAG,GAA9C,YAAoDN,EAAO,GAAGM,UAAU,EAAG,GAA3E,OAAyF,6BACzF,4GAAsBN,EAAO,IAAU,6BACvC,wHAA6B,0BAAMzrB,UAAU,cAAhB,IAA+ByrB,EAAO,IACnE,kBAACzqB,EAAA,EAAD,MACA,0BAAMhB,UAAU,eAAc,qGAA6B,6BAC3D,8BAAO0rB,WC2EVM,GAAe,SAACC,EAAKC,GAQhC,IAPA,IAAMC,EA5Da,SAACF,EAAKC,GAKzB,IAJA,IAAIE,EAAe,GACfC,EAAe,GAEbC,EAAQ,uBAAOJ,EAAKK,OAAZ,aAAsBL,EAAKM,OAChCvlB,EAAI,EAAGA,EAAIglB,EAAItlB,OAAQM,IAAK,CAMnC,IALA,IAAMwlB,EAAgBR,EAAIhlB,GAAG,GACvBylB,EAAgBT,EAAIhlB,GAAG,GAEvB0lB,GADqBV,EAAIhlB,GAAG,GACTwlB,EAAchS,MAAM,KAAK,GAAGmS,eACjDC,EAAO,EACFpD,EAAI,EAAGA,EAAI6C,EAAS3lB,OAAQ8iB,IAAK,CAGpCkD,IAFsBL,EAAS7C,GAAGgC,OAAO,GAAGmB,cAEHF,IADtBJ,EAAS7C,GAAGgC,OAAO,IAExCoB,IAGAA,EACFR,EAAaxe,KAAKoe,EAAIhlB,IAEtBmlB,EAAave,KAAKoe,EAAIhlB,IAO1B,IAHA,IAAM6lB,EAAY,aAAOZ,EAAKM,MAC1BL,EAAgB,GAChBY,EAAoB,GACf9lB,EAAI,EAAGA,EAAIolB,EAAa1lB,OAAQM,IAAK,CAQ5C,IAPA,IAAM+lB,EAAeX,EAAaplB,GAAG,GAC/BgmB,EAAgBZ,EAAaplB,GAAG,GAChCwlB,EAAgBJ,EAAaplB,GAAG,GAChCylB,EAAgBL,EAAaplB,GAAG,GAChCimB,EAAqBb,EAAaplB,GAAG,GACrC0lB,EAAmBF,EAAchS,MAAM,KAAK,GAAGmS,cACjDC,EAAO,EACFpD,EAAI,EAAGA,EAAIqD,EAAanmB,OAAQ8iB,IAAK,CAG5C,GAAIkD,IAFsBG,EAAarD,GAAGgC,OAAO,GAAGmB,cAEPF,IADtBI,EAAarD,GAAGgC,OAAO,GACiC,CAC7E,IAAM0B,EAAK,CAAIH,EAAcC,GAAlB,oBAAoCH,EAAarD,GAAGgC,QAApD,CAA4DyB,IACvEf,EAActe,KAAK,CACjB4d,OAAQ0B,EACRxvB,KAAMmvB,EAAarD,GAAG9rB,OAExBkvB,KAGJ,IAAKA,EAAM,CAET,IAAMpB,EAAS,CAACuB,EAAcC,EAAeR,EAAeC,EAAeQ,GAC3EH,EAAkBlf,KAChB4d,IAIN,OAAOU,EAIeiB,CAAanB,EAAKC,GACpC9C,EAAU+C,EAAcxlB,OAKxB0mB,EAAc,GACTpmB,EAAI,EAAGA,EAAImiB,EAASniB,IAAK,CAChC,IAAMqmB,EAAanB,EAAcllB,GAC3BwkB,EAAS6B,EAAW7B,OAEpB8B,EADSD,EAAW3vB,KACH8c,MAAM,MAAMmD,MAAM,GAIzCyP,EAAYxf,KAAK,CACf4d,SACAE,OAAO,aAAK6B,GAAaD,EAAQ3P,MAAM,OAG3C,OAAOyP,GAoCHI,GAAoB,SAACC,GACzB,IACMC,EAAKD,EAAQvxB,MADP,4CAENyxB,EAAQD,EAAG,GACXE,EAAOF,EAAG,GAChB,OAAQC,GACN,IAAK,uCACH,MAAO,SAAWC,EACpB,IAAK,6CACH,MAAO,SAAWA,EACpB,IAAK,2BACH,MAAO,SAAWA,EACpB,IAAK,uCACH,MAAO,SAAWA,EACpB,IAAK,qBACH,MAAO,SAAWA,EACpB,IAAK,2BACH,MAAO,SAAWA,EACpB,IAAK,2BACH,MAAO,SAAWA,EACpB,IAAK,uCACH,MAAO,SAAWA,EACpB,IAAK,mDACH,MAAO,SAAWA,EACpB,IAAK,6CACH,MAAO,SAAWA,EACpB,IAAK,uCACH,MAAO,SAAWA,EACpB,IAAK,6CACH,MAAO,SAAWA,IAIlBL,GAAe,SAACM,GAOpB,IANA,IAAInC,EAAS,GACToC,EAAQ,EACR1uB,EAAQ,GACR2uB,EAAO,GACLC,EAAU,mBAEPC,EAAI,EAAGA,EAAIJ,EAAUnnB,OAAQunB,IAC/BD,EAAQrT,KAAKkT,EAAUI,KAU1BF,EAAKngB,KAAKigB,EAAUI,IAChBA,IAAMJ,EAAUnnB,OAAS,IAC3BglB,EAAM,uBAAOA,GAAP,CAAe,CAAEtsB,QAAO2uB,WAEhCD,EAAQ,IAbJA,GACFpC,EAAM,uBAAOA,GAAP,CAAe,CAAEtsB,QAAO2uB,UAC9B3uB,EAAQyuB,EAAUI,GAClBF,EAAO,IAEP3uB,GAAS,IAAMyuB,EAAUI,GAE3BH,EAAQ,GASZ,OAAOpC,EAAO/N,MAAM,IChNhBre,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCiG,SAAU,CACRC,OAAQlG,EAAMkG,OAAOC,OAAS,EAC9BnI,MAAO,YAoIIkvB,GAhIM,WAAO,IAAD,EACO/wB,mBAAS,MADhB,mBAClBkvB,EADkB,KACR8B,EADQ,OAEKhxB,mBAAS,MAFd,mBAElBixB,EAFkB,KAETC,EAFS,OAGWlxB,oBAAS,GAHpB,mBAGlB8qB,EAHkB,KAGNC,EAHM,OAIU/qB,mBAAS,MAJnB,mBAIlBmxB,EAJkB,KAIJC,EAJI,OAKCpxB,mBAAS,MALV,mBAKlBqxB,EALkB,KAKXC,EALW,OAMiBtxB,mBAAS,MAN1B,mBAMlBuxB,EANkB,KAMHC,EANG,OAOSxxB,mBAAS,MAPlB,mBAOlByxB,EAPkB,KAOPC,EAPO,KAQnBjvB,EAAUN,KAiEhB,OACE,kBAAC,WAAD,KACE,kBAACgJ,GAAA,EAAD,CAAUvI,UAAWH,EAAQqH,SAAU5I,KAAM4pB,GAC3C,kBAAC7f,GAAA,EAAD,CAAkBpJ,MAAM,aAE1B,kBAAC+G,GAAA,EAAD,CAAMC,WAAS,EAAC3E,QAAS,GACvB,kBAAC0E,GAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAAC2B,GAAA,EAAD,KACE,kHACA,6BACA,2BACED,KAAK,OACL+gB,QA1DW,SAAC7pB,GACtBA,EAAE8pB,iBACF2F,EAAW,MACXrG,GAAc,GACd,IAAIY,EAAS,IAAIC,WACbzE,EAAOxlB,EAAE+X,OAAOgS,MAAM,GACtBvE,IACFwE,EAAOE,UAAY,WACjB,IACMtrB,EDvBQ,SAACoL,GAKrB,IAJA,IAEIgmB,EAAU,GACRlL,EAAK9a,EAAK0R,MAAM,MACbxT,EAAI,EAAGA,EAAI4c,EAAGld,OAAQM,IAAK,CAClC,IAAIwkB,EAAS,GACP8B,EAAU1J,EAAG5c,GAAGwT,MAAM,KAC5BgR,EAAO5d,KAAK0f,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,IACpEwB,EAAQlhB,KAAK4d,GAEf,OAAOsD,ECYYC,CADIjG,EAAOlW,QAExByb,EAAW3wB,GACXwqB,GAAc,KAGlBY,EAAOa,WAAWrF,QAgDd,kBAACve,GAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAAC2B,GAAA,EAAD,KACE,mKACA,6BACA,2BACED,KAAK,OACL+gB,QArFQ,SAAC7pB,GACnBA,EAAE8pB,iBACF2F,EAAW,MACXrG,GAAc,GACd,IAAIY,EAAS,IAAIC,WACbzE,EAAOxlB,EAAE+X,OAAOgS,MAAM,GACtBvE,IACFwE,EAAOE,UAAY,WACjB,IACMtrB,EDvCY,SAACoL,GAMzB,IALA,IAAIwjB,EAAQ,GACRC,EAAO,GAEL3I,EAAK9a,EAAK0R,MAAM,QAChBwU,EAAQ,0MACLhoB,EAAI,EAAGA,EAAI4c,EAAGld,OAAQM,IAC7B,GAAIgoB,EAAMrU,KAAKiJ,EAAG5c,IAAK,CACrB,IAAIwkB,EAAS,GACP8B,EAAU1J,EAAG5c,GAAGwT,MAAM,KAC5BgR,EAAO5d,KAAK0f,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,KACxDhB,EAAM1e,KAAK,CACT4d,SACA9tB,KAAM,WAEH,CACL,IAAI8tB,EAAS,GACP8B,EAAU1J,EAAG5c,GAAGwT,MAAM,KAC5BgR,EAAO5d,KAAK0f,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,KACxD,IAAM2B,EAAOrL,EAAG5c,GAChBulB,EAAK3e,KAAK,CACR4d,SACA9tB,KAAMuxB,IAQZ,MAJe,CACb3C,QACAC,QCWiB2C,CADIpG,EAAOlW,QAExBub,EAAYzwB,GACZwqB,GAAc,KAGlBY,EAAOa,WAAWrF,SA4EhB,kBAACve,GAAA,EAAD,CAAMC,WAAS,EAAC8D,UAAU,MAAMnD,QAAQ,SAAS2R,WAAW,SAASjX,QAAS,GAC5E,kBAAC0E,GAAA,EAAD,CAAME,MAAI,GACR,kBAAC+K,GAAA,EAAD,CAAQ3Q,QAAQ,YAAYrB,MAAM,UAAUR,QA1DpC,WACd,GAAI6tB,GAAY+B,EAAS,CACvBG,EAAW,MACX,IAAMY,EAAQpD,GAAaqC,EAAS/B,GACpCsC,EAAiBQ,GACjBV,GAAS,QAETF,EAAW,uIAmDP,iEAIF,kBAACxoB,GAAA,EAAD,CAAME,MAAI,GACR,kBAAC+K,GAAA,EAAD,CAAQ3Q,QAAQ,YAAYrB,MAAM,UAAUR,QApDlC,WAChB,GAAIgwB,EAAO,CACT,IAAMY,EAA4BV,EDsDV5nB,KAAI,SAACsM,EAAKxD,GAOpC,IANA,IAAMyf,EAAU,2BACVC,EAAkB5N,KAAK6N,MAAMnc,EAAIoY,OAAO,GAAGvQ,QAAQoU,EAAS,aAC5DG,EAAYpc,EAAIoY,OAAO,GAAGtvB,MAAMmzB,GAChCI,EAAc/N,KAAK6N,MAAM,MAAQC,EAAU,GAAK,KAAOE,SAASF,EAAU,GAAI,IAAM,IACpF9D,EAAStY,EAAIsY,OACfD,EAAe,GACVzkB,EAAI,EAAGA,EAAI0kB,EAAOhlB,OAAQM,IAAK,CAGtC,IAFA,IAAM2oB,EAAWjE,EAAO1kB,GAAG+mB,KACvB6B,EAAY,GACPpG,EAAI,EAAGA,EAAImG,EAASjpB,OAAQ8iB,IAAK,CACxC,IAAMqG,EAAanO,KAAK6N,MAAM/B,GAAkBmC,EAASnG,KACrDqG,GAAcP,EAAkBO,GAAcJ,GAChDG,EAAUhiB,KAAK+hB,EAASnG,IAGxBoG,EAAUlpB,QACZ+kB,EAAa7d,KAAK,CAChBxO,MAAOssB,EAAO1kB,GAAG5H,MACjBwsB,SAAUgE,IAIhB,QAAInE,EAAa/kB,QACR,6BAAK0M,GAAZ,IAAiBsY,OAAQD,OAI1B1c,QAAO,SAAAyc,GAAM,OAAIA,KCjFhBngB,QAAQC,IAAI8jB,GACZP,EAAaO,QAGXb,EADElC,GAAY+B,EACH,mIAEA,uIA2CT,+EAKJ,4BACCE,EACC,kBAAC,KAAD,CAAOzlB,SAAS,SAASylB,GAEzB,4BAEF,yBAAKvuB,UAAU,kBACZ6uB,EACC,kBAAC,GAAD,CAASlxB,KAAMkxB,IACb,+BCjIZ,SAASjQ,GAASnX,GAAQ,IAChBoX,EAAqCpX,EAArCoX,SAAUpS,EAA2BhF,EAA3BgF,MAAOoD,EAAoBpI,EAApBoI,MAAUkP,EADZ,aACsBtX,EADtB,8BAEvB,OACE,uCACEvH,KAAK,WACLF,UAAU,eACViK,OAAQwC,IAAUoD,EAClB1R,GAAE,4BAAuB0R,GACzBc,kBAAA,uBAAiCd,IAC7BkP,GAEHtS,IAAUoD,GACT,kBAAC/H,GAAA,EAAD,CAAKgX,EAAG,GACN,kBAACze,EAAA,EAAD,KAAawe,KAavB,SAASG,GAASnP,GAChB,MAAO,CACL1R,GAAG,gBAAD,OAAkB0R,GACpB,gBAAgB,qBAAhB,OAAsCA,IAI1C,IAAMtQ,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCmD,KAAM,CACJjD,SAAU,EACVmC,gBAAiBrC,EAAMuC,QAAQC,WAAWC,MAC1CnC,QAAS,QAEX0d,KAAM,CACJE,YAAY,aAAD,OAAele,EAAMuC,QAAQ4b,SACxCC,SAAU,eAmCC0Q,GA9BM,SAAC,GAAiB,EAAf5xB,GAAe,EAAXgH,KAAY,IAChCtF,EAAUN,KADqB,EAEXyC,IAAM5E,SAAS,GAFJ,mBAE9BqP,EAF8B,KAEvBoT,EAFuB,KAQrC,OACE,yBAAK7f,UAAWH,EAAQuE,MACtB,kBAACmb,GAAA,EAAD,CACEC,YAAY,WACZlf,QAAQ,aACRmM,MAAOA,EACP4C,SAVe,SAAC3M,EAAOod,GAC3BD,EAASC,IAUL9f,UAAWH,EAAQof,MAEnB,kBAACS,GAAA,EAAD,eAAK3P,MAAM,kCAAYiP,GAAS,KAChC,kBAACU,GAAA,EAAD,eAAK3P,MAAM,QAAWiP,GAAS,MAEjC,kBAAC,GAAD,CAAUvS,MAAOA,EAAOoD,MAAO,GAC7B,kBAAC,GAAD,OAEF,kBAAC,GAAD,CAAUpD,MAAOA,EAAOoD,MAAO,GAC7B,kBAAC,GAAD,SC9DOmgB,GAbC,WACd,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAY3wB,MAAK,sGACjB,yBAAKkB,MAAO,CAAE0vB,WAAY,SACxB,kBAACtkB,GAAA,EAAD,CAAW/G,SAAS,MAClB,kBAACsrB,GAAD,UCMKC,GAZI,WAEjB,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAY9wB,MAAM,oIAClB,kBAACsM,GAAA,EAAD,CAAW/G,SAAS,S,6iBCVnB,IAAMoV,GAAgBpd,YAAH,MCwBpB2C,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvC+H,QAAS,CACPC,cAAe,QAEjBvF,MAAO,CACLqB,QAAS9D,EAAMK,QAAQ,QAIrB8uB,GAAe,SAAC,GAAgB,IAAdpkB,EAAa,EAAbA,OAChB6U,EACJ,kBAACzhB,EAAA,EAAD,CAASwB,IAAK,EAAGvB,MAAM,yFACrB,kBAAC,KAAD,OAGEwc,EACJ,kBAACzc,EAAA,EAAD,CAASwB,IAAK,EAAGvB,MAAM,uHACrB,kBAAC,KAAD,OAGEyU,EACJ,kBAAC1U,EAAA,EAAD,CAASwB,IAAK,EAAGvB,MAAM,+FACrB,kBAAC,KAAD,OAGAke,EAAI,GAUR,OATIvR,EAAO6P,WACT0B,EAAE1P,KAAKgO,GAEL7P,EAAOkC,YACTqP,EAAE1P,KAAKgT,GAEL7U,EAAO8H,QACTyJ,EAAE1P,KAAKiG,GAEFyJ,GAGH8S,GAAa,SAAC,GAAuB,IAArBrkB,EAAoB,EAApBA,OAAQ6D,EAAY,EAAZA,MAC5B,OACE,yBAAK7P,UAAWgM,EAAO8B,SAAW,wBAA0B,eAC1D,kBAAC9H,GAAA,EAAD,CACEC,WAAS,EACT8D,UAAU,MACVnD,QAAQ,gBACR2R,WAAW,UAEX,kBAACzQ,GAAA,EAAD,CAAKwe,EAAG,GACN,0BAAMtmB,UAAU,iBAAiB6P,EAAQ,EAAzC,KACA,0BAAM7P,UAAU,WAAhB,KACA,0BAAMA,UAAU,eAAegM,EAAO7G,MACtC,0BAAMnF,UAAU,WAAhB,OACA,0BAAMA,UAAU,gBAAgBgM,EAAO3M,QAGzC,kBAACyI,GAAA,EAAD,CAAKwe,EAAG,GACN,8BACE,kBAAC,GAAD,CAActa,OAAQA,SAS5BskB,GAAgB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACjB1wB,EAAUN,KADmB,EAEHyC,IAAM5E,SAAS,MAFZ,mBAE5BC,EAF4B,KAElBC,EAFkB,KAO7B8L,EAAqB,WACzB9L,EAAY,OAERgB,EAAOvC,QAAQsB,GAErB,OACE,kBAAC,WAAD,KACE,kBAAC,KAAD,CACEmM,aAZoB,SAAC9G,GACzBpF,EAAYoF,EAAM1D,gBAYdyK,aAAcL,EACd5I,SAAS,UACX,kBAAC8I,GAAA,EAAD,CACEtJ,UAAWH,EAAQmJ,QACnBnJ,QAAS,CACP6D,MAAO7D,EAAQ6D,OAEjBpF,KAAMA,EACNjB,SAAUA,EACVW,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdG,gBAAiB,CACfJ,SAAU,MACVC,WAAY,QAEdK,QAAS6K,EACTG,qBAAmB,GAEnB,kBAAClJ,EAAA,EAAD,CAAYC,QAAQ,WAAWiB,QAAQ,QAAQ8E,cAAY,GAA3D,6BACSkqB,EAAMlxB,UAOjBmxB,GAAe,SAAC,GAAyB,IAAvB/zB,EAAsB,EAAtBA,SAAUoT,EAAY,EAAZA,MAChC,OACE,kBAACrK,GAAA,EAAD,CAAMxF,UAAU,iBACd,kBAAC+F,GAAA,EAAD,KACE,yBAAK/F,UAAU,mBACb,kBAACZ,EAAA,EAAD,CAASC,MAAM,wGACb,0BAAMW,UAAU,kBAAkBvD,EAAS8R,QAE7C,0BAAMvO,UAAU,mBAAmB6P,EAAQ,EAA3C,KACA,0BAAM7P,UAAU,iBAAiBf,MAAM,iBACpCxC,EAAS4C,MACV,kBAAC,GAAD,CAAekxB,MAAO9zB,EAAS8zB,UAGlC9zB,EAASgS,QAAQ1H,KAAI,SAACiF,EAAQ6D,GAAT,OACpB,kBAAC,GAAD,CAAYjP,IAAKiP,EAAO7D,OAAQA,EAAQ6D,MAAOA,UAgI1C4gB,GAzHO,SAAC,GAAY,IAAVtyB,EAAS,EAATA,GAAS,EACNf,oBAAS,GADH,mBACzBqxB,EADyB,KAClBC,EADkB,OAEEtxB,qBAFF,mBAEzB4V,EAFyB,KAEdmN,EAFc,OAO5BpV,aAASiP,GAAe,CAC1B8C,UAAW,CAAE3e,MACb4e,YAAa,WACX2T,EAA+BpI,EAASthB,SAN1CiE,EAJ8B,EAI9BA,QACAE,EAL8B,EAK9BA,MACMmd,EANwB,EAM9B3qB,KASI+yB,EAAiC,SAAC1pB,GACtC,IAAMoW,EAAWpW,EAAK8L,MAAMqK,KAC5BE,MAAMvhB,EAAUshB,GACbE,MAAK,SAACC,GAAD,OAAOA,EAAExU,UACduU,MAAK,SAAAvU,GACJ,IAAM6S,EAAkBD,GAAezB,GAASnR,IAC1C4nB,EAAmBC,EAA2BhV,GACpDuE,EAAawQ,EAAiB9S,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,MAAQD,EAAEC,MAAS,GAAK,MACxE0Q,GAAS,OAITkC,EAA6B,SAAC9d,GAkDlC,OAjDqBwV,EAASthB,KAAKgM,UAAUjM,KAAI,SAAAtK,GAC/C,IAAMkX,EAAalX,EAASgS,QAAQ1H,KAAI,SAAAiF,GACtC,IAAI4H,EAAS,GAsCb,OArCId,EAAMM,WACJN,EAAMM,UAAUf,SAASrG,EAAO7G,QAClCyO,EAAM,6BACDA,GADC,IAEJ9F,UAAU,KAIZgF,EAAMiB,aACJjB,EAAMiB,YAAY1B,SAASrG,EAAO7G,QACpCyO,EAAM,6BACDA,GADC,IAEJ1F,YAAY,KAKd4E,EAAMgB,QACJhB,EAAMgB,OAAOzB,SAASrG,EAAO7G,QAC/ByO,EAAM,6BACDA,GADC,IAEJE,QAAQ,KAIVhB,EAAM+I,WACJ/I,EAAM+I,UAAUxJ,SAASrG,EAAO7G,QAClCyO,EAAM,6BACDA,GADC,IAEJiI,WAAW,KAIF,6BACV7P,GACA4H,MASP,OALiB,6BACZnX,GADY,IAEfgS,QAASkF,EACTkd,SAAS,QAOf,OAAI5lB,GAAY+H,GAAcyb,EAI1BtjB,GACFG,QAAQC,IAAI4S,KAAKC,UAAUjT,IAEzB,kBAAC,GAAD,CACE9L,MAAM,iGACN8I,YAAY,yTAMhB,kBAAC,WAAD,KACE,kBAACnC,GAAA,EAAD,CAAMC,WAAS,EAACjG,UAAU,mBACxB,kBAACK,EAAA,EAAD,CAAYC,QAAQ,KAAK+F,cAAY,GACnC,8DAAwBiiB,EAASthB,KAAK3H,OAExC,kBAAC2G,GAAA,EAAD,CACEhG,UAAU,YACViG,WAAS,EACT8D,UAAU,MACVnD,QAAQ,gBACR2R,WAAW,UAEX,kBAACzQ,GAAA,EAAD,CAAKwe,EAAG,GACN,mFAAiBgC,EAASthB,KAAKqZ,iBAEjC,kBAACvY,GAAA,EAAD,CAAKwe,EAAG,GACN,6EAAgBgC,EAASthB,KAAKsZ,gBAGjCtN,EAAUjM,KAAI,SAACtK,EAAUoT,GAAX,OACb,kBAAC,GAAD,CAAcpT,SAAUA,EAAUmE,IAAKnE,EAAS0B,GAAI0R,MAAOA,SAlCjE,kBAAC,GAAD,CAAchI,KAAK,U,qKC7OhB,IAAMipB,GAAal0B,YAAH,M,kLCAhB,IAAMm0B,GAAoBn0B,YAAH,MCqIfo0B,GAnHM,SAAC,GAAY,IAAV7yB,EAAS,EAATA,GAAS,EACPf,oBAAS,GADF,mBACxByN,EADwB,KAClBC,EADkB,OAED1N,oBAAS,GAFR,mBAExB6zB,EAFwB,KAEfC,EAFe,OAGH9zB,mBAAS,MAHN,mBAGxBqX,EAHwB,KAGhB0c,EAHgB,OAIC/zB,mBAAS,MAJV,mBAIxBggB,EAJwB,KAIdgU,EAJc,KAKzBC,EAAUjlB,mBALe,EAMErB,aAAS+lB,GAAY,CACpDhU,UAAW,CAAE3e,MACb4e,YAAa,WACXG,EAAiBvf,EAAK2zB,UAAUnU,SAH5BlS,EANuB,EAMvBA,QAASE,EANc,EAMdA,MAAOxN,EANO,EAMPA,KANO,EAasBH,sBAAYuzB,GAAmB,CAClF1lB,QAAS,SAACtM,GACRuM,QAAQC,IAAIxM,GACZ+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,kNAGVgU,YAAa,WACXjS,EAAQ,CACNjD,KAAM,UACNkB,KAAM,uIAGVwoB,eAAgB,iBAAM,CAAC,CACrBp0B,MAAO6c,GACP8C,UAAW,CACT3e,WA9ByB,mBAaxBqzB,EAbwB,KAaDC,EAbC,KAaVxmB,QAsBfiS,EAAmB,SAACE,GACxBgU,EAAYhU,GACZC,MAAMvhB,EAAUshB,GACbE,MAAK,SAACC,GAAD,OAAOA,EAAExU,UACduU,MAAK,SAAAvU,GACJooB,EAAUpoB,OAqBV2C,EAAU,WACd,OAAI+lB,EAA0B,kBAAC,GAAD,MACvB,MAGT,OAAIxmB,IAAYwJ,EACd,kBAAC,GAAD,CAAc5M,KAAK,SAGjBsD,GACFG,QAAQC,IAAI4S,KAAKC,UAAUjT,IAEzB,kBAAC,GAAD,CACE9L,MAAM,iGACN8I,YAAY,yTAMhB,kBAAC,WAAD,KACE,kBAAC,GAAD,CACE7J,KAAMuM,EACN9B,KAAM8B,EAAOA,EAAK9B,KAAO,GACzBlB,KAAMgD,EAAOA,EAAKhD,KAAO,GACzB9K,MAAO,kBAAM+N,GAAQ,MAEvB,kBAACY,EAAD,MAEA,kBAAC1F,GAAA,EAAD,CAAME,MAAI,EAACD,WAAS,GAClB,kBAACD,GAAA,EAAD,CAAME,MAAI,EAACD,WAAS,EAACW,QAAQ,iBAC3B,kBAACkB,GAAA,EAAD,CAAKgX,EAAG,GACN,kBAACze,EAAA,EAAD,CAAYC,QAAQ,YAAY+F,cAAY,GAA5C,2QAIF,kBAACyB,GAAA,EAAD,KACE,kBAAC1I,EAAA,EAAD,CAASC,MAAM,0DACb,kBAACX,EAAA,EAAD,CAAYD,QAvDL,SAACM,GAClByyB,EAAW,CACT1U,UAAW,CACTK,KAAMC,EACNrU,KAAMsoB,EAAQ9kB,QAAQE,UAmDiBqB,UAAWmjB,GAC1C,kBAAC,KAAD,SAIN,8BACEtkB,IAAK0kB,EACLK,aAAcjd,EACdpF,SAtDiB,SAACtQ,GACtB0V,IAAW1V,EAAEC,cAAcyN,MAI/BykB,GAAW,GAHTA,GAAW,U,gKCzEV,IAAMS,GAAc/0B,YAAH,MCqGTg1B,GAtFI,SAAC,GAAkB,IAAhBzzB,EAAe,EAAfA,GAAIgH,EAAW,EAAXA,KAClBgX,EAAUC,cADmB,EAEXhf,oBAAS,GAFE,mBAE5BkB,EAF4B,KAEtB0L,EAFsB,OAGD5M,oBAAS,GAHR,mBAG5By0B,EAH4B,KAGjBC,EAHiB,OAIPt0B,sBAAYm0B,GAAa,CACnD5U,YAAa,WACXZ,EAAQtO,KAAK,QANkB,mBAI5BkkB,EAJ4B,KAU7B7nB,GAV6B,KAIjBlD,KAME,WAClBgD,GAAQ,KA8BV,OACE,kBAAC,WAAD,KACE,kBAAC0G,GAAA,EAAD,CAAQpS,KAAMA,EAAMC,QAAS2L,EAAayG,kBAAgB,qBACxD,kBAACE,GAAA,EAAD,CAAa1S,GAAG,qBAAhB,oDACA,kBAAC2S,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAAC1Q,EAAA,EAAD,CAAYC,QAAQ,YAAY+F,cAAY,GAA5C,mfAIA,kBAAChG,EAAA,EAAD,CAAYC,QAAQ,SAASiB,QAAQ,QAAQ8E,cAAY,GAAzD,sKAIF,kBAAC6J,GAAA,EAAD,CACErL,OAAO,QACP1G,GAAG,OACH4R,MAAM,0DACNlI,KAAK,OACL8R,WAAS,EACTtK,SAtCW,SAACtQ,GACpB,IAAMgK,EAAOhK,EAAEC,cAAcyN,MAAMulB,cACnCjzB,EAAEC,cAAcyN,MAAQ1D,EACpBA,EAAKipB,gBAAkB7sB,EACzB2sB,GAAa,GAEbA,GAAa,OAmCX,kBAAC9gB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQxS,QAASyL,EAAajL,MAAM,WAApC,wCAGA,kBAACgS,GAAA,EAAD,CAAQxS,QAnCK,YAnBC,SAACN,GACrB4zB,EAAQ,CACNjV,UAAW,CACT3e,MAEFozB,eAAgB,CAAC,CAAEp0B,MAAOuN,OAe5BunB,CAAc9zB,IAkCuBc,MAAM,UAAU6O,SAAU+jB,GAAzD,gDAKJ,kBAACxxB,EAAA,EAAD,CAAYC,QAAQ,SAASiB,QAAQ,QAAQ8E,cAAY,GAAzD,yFAGA,kBAAChG,EAAA,EAAD,CAAYC,QAAQ,UAAUiB,QAAQ,QAAQ8E,cAAY,GAA1D,uZAGA,kBAAC4K,GAAA,EAAD,CAAQ3Q,QAAQ,YAAYrB,MAAM,YAAYR,QA1C9B,WAClBuL,GAAQ,KAyCN,+E,wVC9FC,IAAMkoB,GAA4Bt1B,YAAH,M,mcCA/B,IAAMu1B,GAA0Bv1B,YAAH,MAUvBw1B,GAAoBx1B,YAAH,MCkPfy1B,GAnOM,SAAC,GAAY,IAAVl0B,EAAS,EAATA,GAAS,EACPf,oBAAS,GADF,mBACxByN,EADwB,KAClBC,EADkB,OAaL1N,mBAAS,GAbJ,mBAaxBk1B,EAbwB,KAajBC,EAbiB,OAcLn1B,oBAAS,GAdJ,mBAcxBo1B,EAdwB,KAcjBC,EAdiB,OAeIr1B,qBAfJ,mBAexBs1B,EAfwB,KAebC,EAfa,OAgBev1B,qBAhBf,mBAgBxBw1B,EAhBwB,KAgBPC,EAhBO,OAiBCz1B,mBAAS,IAjBV,mBAiBxBwQ,EAjBwB,KAiBdklB,EAjBc,OAsB3B/nB,aAASmnB,GAA2B,CACtCpV,UAAW,CAAE3e,MACb4e,YAAa,WACX,IAAMgW,EAAaC,EAAWhsB,KAAKN,OACnCisB,EAAcK,EAAWtsB,QACzBmsB,EAAmBG,EAAWtsB,OAAOsI,QACnC,SAAAsP,GACE,IAAK,IAAIrX,EAAI,EAAGA,EAAI8rB,EAAWpsB,OAAQM,IACrC,GAAIqX,EAAKngB,KAAO40B,EAAW9rB,GAAG9I,GAC5B,OAAO,EAGX,OAAO,SAfP60B,EAnBuB,EAmB7Br1B,KACSs1B,EApBoB,EAoB7BhoB,QACOioB,EArBsB,EAqB7B/nB,MArB6B,EA0C3B3N,sBAAY40B,GAAmB,CACjC/mB,QAAS,SAACtM,GACRuM,QAAQC,IAAIxM,GACZ+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,kNAGVtL,OAAQ,SAACrB,EAAD,GAAuC,IACvCsK,EADsC,EAA5B/I,KAAQw1B,YACGzsB,OAAOK,KAAI,SAAAuX,GAAI,OAAIA,EAAKngB,MACnD00B,EAAmBD,EAAgB5jB,QAAO,SAAAsP,GACxC,OAAQ5X,EAAO2L,SAASiM,EAAKngB,WArDJ,mBAwC7Bi1B,EAxC6B,KAyClBC,EAzCkB,KAyC3BpoB,QAzC2B,EA4D3BzN,sBAAY20B,GAAyB,CACvC9mB,QAAS,SAACtM,GACRuM,QAAQC,IAAIxM,GACZ+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,sMAGVtL,OAAQ,SAACrB,EAAD,GAAsB,IACtB22B,EADqB,EAAXp1B,KACQ21B,qBAAqB5sB,OACvC6sB,EAAWb,EAAU1jB,QAAO,SAAAsP,GAChC,IAAK,IAAIrX,EAAI,EAAGA,EAAI8rB,EAAWpsB,OAAQM,IACrC,GAAIqX,EAAKngB,KAAO40B,EAAW9rB,GAAG9I,GAAI,OAAO,EAE3C,OAAO,KAET00B,EAAmBU,MA5EQ,mBA0D7BC,EA1D6B,KA2DlBC,EA3DkB,KA2D3BxoB,QAqBJ,GAAIgoB,IAAkBD,IAAeJ,EAAiB,OACpD,kBAAC,GAAD,CAAc/qB,KAAK,SAGrB,IAAM6D,EAAU,WACd,OAAI2nB,GAAyBI,EAA0B,kBAAC,GAAD,MAChD,MAGT,GAAIP,EAEF,OADA5nB,QAAQC,IAAI4S,KAAKC,UAAU8U,IAEzB,kBAAC,GAAD,CACE7zB,MAAM,iGACN8I,YAAY,wTAKlB,IAAMurB,EAAmB,SAACv1B,GACxBs0B,EAASt0B,IAyBLyL,EAAO,kBAAC,KAAD,CAA0BpJ,SAAS,UAC1CwkB,EAAc,kBAAC,KAAD,CAAcxkB,SAAS,UAErCmzB,EAAuB,SAACjtB,GAC5B8sB,EAAW,CACT1W,UAAW,CACT3e,KACAuI,OAAQA,MAKRktB,EAAW,SAAC,GAA0B,IAAxBtV,EAAuB,EAAvBA,KAAMkV,EAAiB,EAAjBA,WAIxB,OACE,kBAACxtB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,EAAGoO,GAAI,GAC1C,kBAAC9S,GAAA,EAAD,CAAO/gB,UAAU,aACf,kBAACK,EAAA,EAAD,CAAYC,QAAQ,KAAK+F,cAAY,GAClCiY,EAAKjf,OAER,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,YAAY+F,cAAY,GACzCiY,EAAK2E,SAAS5jB,OAEjB,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,WAAWiB,QAAQ,QAAQ8E,cAAY,GAA3D,2DACciY,EAAKwV,YAEnB,kBAAC9tB,GAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACU,QAAQ,gBAAgB5G,UAAU,wBACrD,kBAACtB,EAAA,EAAD,CAAYsB,UAAU,cAAcpB,aAAW,SAASH,QAhB3C,WACnB+0B,EAAWlV,EAAKngB,MAgBR,kBAAC,KAAD,CAAYqC,SAAS,eAQjC,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CACElC,KAAMuM,EACN9B,KAAM8B,EAAOA,EAAK9B,KAAO,GACzBlB,KAAMgD,EAAOA,EAAKhD,KAAO,GACzB9K,MAAO,kBAAM+N,GAAQ,MAEvB,kBAACY,EAAD,MACA,kBAAC,GAAD,CACEpN,KAAMk0B,EACN/hB,QAvEmB,WACvBkjB,EAAqB,CAACnB,IACtBC,GAAS,IAsEL11B,MAAO,kBAAM01B,GAAS,IACtB90B,KACE,CACE0B,MAAO,0IACP0J,KAAM,qwBAIZ,yBAAK/I,UAAU,uBACb,kBAACK,EAAA,EAAD,CAAYL,UAAU,UAAtB,sLACA,kBAACgG,GAAA,EAAD,CAAMC,WAAS,EAACW,QAAQ,aAAa2R,WAAW,SAASjX,QAAS,GAChE,kBAAC0E,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,GACnC,kBAACvW,GAAA,EAAD,CACEC,UAAQ,EACRvO,IAAK0xB,EACLvM,UAAW,EACX3W,QAASwjB,EACT5M,sBAAoB,EACpBC,eAAa,EACb5W,SAzES,SAAC2N,EAAGvQ,GACvBqmB,EAAYrmB,IAyEF8C,eAAgB,SAACC,GAAD,OAAYA,EAAOnQ,OACnCqQ,aAAc,SAACF,EAAD,OAAW5B,EAAX,EAAWA,SAAX,OACZ,kBAAC,IAAMuY,SAAP,KACE,kBAACxN,GAAA,EAAD,CACE/O,KAAMA,EACNob,YAAaA,EACbzkB,MAAO,CAAEc,YAAa,GACtB4f,QAASrT,IAEV4B,EAAOnQ,QAGZ2Q,YAAa,SAACC,GAAD,OACX,kBAACC,GAAA,EAAD,iBAAeD,EAAf,CAAuB3P,QAAQ,WAAWyP,MAAM,yFAItD,kBAAC/J,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,GACnC,kBAACxU,GAAA,EAAD,CAAQ3Q,QAAQ,YAAYrB,MAAM,UAAU2I,KAAK,QAAQnJ,QAzGjD,WAChB,IAAMs1B,EAAiBnmB,EAAS7G,KAAI,SAAAsM,GAClC,OAAOA,EAAIlV,MAEbi1B,EAAc,CACZtW,UAAW,CACT3e,KACAuI,OAAQqtB,KAGZxB,EAASD,EAAQ,IA+FoExkB,UAAWF,EAASjH,QAAjG,uDAMN,kBAACX,GAAA,EAAD,CAAMC,WAAS,EAAC3E,QAAS,EAAG6E,GAAI,IAC7B6sB,EAAWhsB,KAAKN,OAAOK,KAAI,SAACuX,EAAMzO,GAAP,OAC1B,kBAAC+jB,EAAD,CAAUhzB,IAAKiP,EAAOyO,KAAMA,EAAMkV,WAAYE,U,+BC1KzClD,GAvEM,SAAC,GAAoC,IAAlC/zB,EAAiC,EAAjCA,SAAUu3B,EAAuB,EAAvBA,iBAAuB,EACjC52B,mBAASX,EAAS8R,OADe,mBAChDtB,EADgD,KAC3CgnB,EAD2C,KA0BvD,OACE,kBAACjuB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,EAAGoO,GAAI,GAC1C,kBAAC9S,GAAA,EAAD,CAAO/gB,UAAU,gBAAgB0I,UAAW,GAC1C,kBAAC1C,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,IAAE,EAACH,WAAS,GAC7B,kBAACD,GAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAACF,WAAS,EAAC8D,UAAU,SAASzI,QAAS,EAAGiX,WAAW,cAChE,kBAACvS,GAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAAC/G,EAAA,EAAD,CAASC,MAAM,wIAA0BT,aAAW,OAClD,kBAACyB,EAAA,EAAD,CAAYC,QAAQ,QAAQrB,MAAM,WAC/BxC,EAASuhB,UAKlB,kBAAChY,GAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAACF,WAAS,EAAC8D,UAAU,SAASzI,QAAS,EAAGiX,WAAW,YAChE,kBAACvS,GAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAACoS,WAAW,SAAShY,MAAO,CAAEulB,OAAQ,YACjD,kBAAC1mB,EAAA,EAAD,CAASC,MAAM,gGAAqBT,aAAW,OAC7C,kBAAC,IAAD,SAIN,kBAACoH,GAAA,EAAD,CAAME,MAAI,GACR,kBAAC9G,EAAA,EAAD,CAASC,MAAM,4EAAgBT,aAAW,OACxC,2BACEiJ,KAAK,SACL7H,UAAU,uBACVqP,SA5CO,SAACtQ,GACpB,IAAMm1B,EAAen1B,EAAEC,cAAcyN,MACrCnB,QAAQC,IAAIxM,GAEVk1B,EADEC,EAAe,EACV,EACEA,EAAe,GACjB,GAEAA,IAqCG7mB,OAjCK,SAACtO,GAClBi1B,EAAiB,CACf71B,GAAI1B,EAAS0B,GACboQ,MAAOtB,KA+BGD,QAlDM,SAACjO,GACD,KAAdA,EAAE+N,SAAgB/N,EAAEC,cAAcmO,QAkD1BV,MAAOQ,OAKf,kBAAC5M,EAAA,EAAD,CAAYL,UAAU,kBACnBvD,EAAS4C,MAAMsH,OAAS,IACvBlK,EAAS4C,MAAM0sB,UAAU,EAAG,KAAO,QAAUtvB,EAAS4C,MAAM0sB,UAAUtvB,EAAS4C,MAAMsH,OAAS,IAC9FlK,EAAS4C,U,4VCnEd,IAAM80B,GAAYv3B,YAAH,M,kWCAf,IAAMw3B,GAAex3B,YAAH,MAQZy3B,GAAez3B,YAAH,MCyIV03B,GAnIM,SAAC,GAAY,IAAVn2B,EAAS,EAATA,GAAS,EACPf,oBAAS,GADF,mBACxByN,EADwB,KAClBC,EADkB,OAEG1N,mBAAS,MAFZ,mBAExB4V,EAFwB,KAEbmN,EAFa,OAGG/iB,mBAAS,MAHZ,mBAGbm3B,GAHa,aAI0BxpB,aAASopB,GAAW,CAC3ErX,UAAW,CAAE3e,MACb4e,YAAa,WACX,IAAM/J,EAAYrV,EAAKqJ,KAAKgM,UAC5B1H,QAAQC,IAAIyH,GACZmN,EAAanN,EAAU4K,QAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,MAAQD,EAAEC,MAAS,GAAK,SAL5DwW,EAJc,EAIvBvpB,QAA6BwpB,EAJN,EAIDtpB,MAAkBxN,EAJjB,EAIiBA,KAJjB,EAYoBH,sBAAY42B,GAAc,CAC3E/oB,QAAS,SAACtM,GACRuM,QAAQC,IAAIxM,GACZ+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,mPAjBmB,mBAYxB2rB,EAZwB,KAYFC,EAZE,KAYX1pB,QAZW,EAqBoBzN,sBAAY62B,GAAc,CAC3EhpB,QAAS,SAACtM,GACRuM,QAAQC,IAAIxM,GACZ+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,6PAGVtL,OAAQ,SAACrB,EAAD,GAEN,IAF4B,IACtB4W,EADqB,EAAXrV,KACOi3B,SACd3tB,EAAI,EAAGA,EAAI+L,EAAUrM,OAAQM,IAAK,CACzC,IAAM9I,EAAK6U,EAAU/L,GAAG9I,GAClBwvB,EAAKvxB,EAAMuB,KAAKA,KACtB,IAAK,IAAIiD,KAAO+sB,EACVA,EAAG/sB,GAAKzC,KAAOA,GAAImN,QAAQC,IAAIoiB,EAAG/sB,QAnCf,mBAqBxBi0B,EArBwB,KAqBFC,EArBE,KAqBX7pB,QAoBpB,GAAIupB,IAAgBxhB,EAAW,OAC7B,kBAAC,GAAD,CAAcnL,KAAK,SAGrB,GAAI4sB,EAEF,OADAnpB,QAAQC,IAAI4S,KAAKC,UAAUqW,IAEzB,kBAAC,GAAD,CACEp1B,MAAM,iGACN8I,YAAY,wTAKlB,IAAMuD,EAAU,WACd,OAAIipB,GAAoBG,EAAyB,kBAAC,GAAD,MAC1C,MAGHd,EAAmB,SAACe,GACxB,IAAM52B,EAAK42B,EAAU52B,GACfoQ,GAASwmB,EAAUxmB,MACzB4R,EAAanN,EAAUjM,KAAI,SAAAtK,GAAQ,OAAIA,EAAS0B,KAAOA,EAAhB,6BAA0B1B,GAA1B,IAAoC8R,MAAOA,IAAU9R,MAC5Fi4B,EAAU,CACR5X,UAAW,CACT3e,KACAoQ,YAgCAymB,EAAeC,cAAgB,gBAAGx4B,EAAH,EAAGA,SAAH,OACnC,kBAAC,GAAD,CAAcA,SAAUA,EAAUu3B,iBAAkBA,OAGhDkB,EAAeC,cAAkB,YAAoB,IAAjBniB,EAAgB,EAAhBA,UACxC,OACE,kBAAChN,GAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,GAAI,GAAI7E,QAAS,GACnC0R,EAAUjM,KAAI,SAACtK,EAAUoT,GAAX,OACb,kBAACmlB,EAAD,CAAcp0B,IAAG,eAAUnE,EAAS0B,IAAM0R,MAAOA,EAAOpT,SAAUA,WAM1E,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CACE6B,KAAMuM,EACN9B,KAAM8B,EAAOA,EAAK9B,KAAO,GACzBlB,KAAMgD,EAAOA,EAAKhD,KAAO,GACzB9K,MAAO,kBAAM+N,GAAQ,MAEvB,kBAACY,EAAD,MACA,kBAACwpB,EAAD,CACEliB,UAAWA,EACXoiB,UApDY,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAG7B,GAFAf,EAAa,gBAAKvhB,IAClB1H,QAAQC,IAAI8pB,EAAUC,GAClBD,IAAaC,EAAU,CACzB,IAAMC,EAAWC,KAAUxiB,EAAWqiB,EAAUC,GAC5CG,EAAa,GACXb,EAAWW,EAASphB,QAAO,SAACC,EAAMnH,EAAK4C,GAU3C,OATI5C,EAAI+Q,QAAUnO,EAAQ,EACxBuE,EAAKvG,KAAKZ,IAEVwoB,EAAW5nB,KAAK,CACd1P,GAAI8O,EAAI9O,GACR6f,MAAOnO,EAAQ,IAEjBuE,EAAKvG,KAAL,6BAAeZ,GAAf,IAAoB+Q,MAAOnO,EAAQ,MAE9BuE,IACN,IACH+L,EAAayU,GACbC,EAAU,CACR/X,UAAW,CACT9J,UAAWyiB,OAgCbC,KAAK,SCrGE3F,GA9BM,SAAC,GAAkB,IAAhB5xB,EAAe,EAAfA,GAAIgH,EAAW,EAAXA,KACpBxH,EAAO,CACX,CACEoS,MAAO,iCACPkQ,UAAW,kBAAC0V,GAAD,CAAex3B,GAAIA,KAEhC,CACE4R,MAAO,gHACPkQ,UAAW,kBAAC,GAAD,CAAc9hB,GAAIA,KAE/B,CACE4R,MAAO,uCACPkQ,UAAW,kBAAC,GAAD,CAAc9hB,GAAIA,KAE/B,CACE4R,MAAO,uCACPkQ,UAAW,kBAAC,GAAD,CAAe9hB,GAAIA,KAEhC,CACE4R,MAAO,mDACPkQ,UAAW,kBAAC,GAAD,CAAY9hB,GAAIA,EAAIgH,KAAMA,MAGzC,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAcxH,KAAMA,MCdX2H,GAfE,WAAO,IAAD,EACFqZ,cAAbxgB,EADe,EACfA,GAAIgH,EADW,EACXA,KAEV,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAY9F,MAAO,+FAAsB8F,IACzC,6BACE,kBAACwG,GAAA,EAAD,CAAW/G,SAAS,KAAKrE,MAAO,CAAEwE,QAAS,IACzC,kBAAC,GAAD,CAAc5G,GAAIA,EAAIgH,KAAMA,QCNtC,SAASyZ,GAASnX,GAAQ,IAChBoX,EAAqCpX,EAArCoX,SAAUpS,EAA2BhF,EAA3BgF,MAAOoD,EAAoBpI,EAApBoI,MAAUkP,EADZ,aACsBtX,EADtB,8BAGvB,OACE,uCACEvH,KAAK,WACL+J,OAAQwC,IAAUoD,EAClB1R,GAAE,4BAAuB0R,GACzBc,kBAAA,uBAAiCd,IAC7BkP,GAEHtS,IAAUoD,GACT,kBAAC/H,GAAA,EAAD,CAAKgX,EAAG,GACN,kBAACze,EAAA,EAAD,KAAawe,KAoBvB,IAAMtf,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCmD,KAAM,CACJjD,SAAU,EACVmC,gBAAiBrC,EAAMuC,QAAQC,WAAWC,MAC1CnC,QAAS,QAEX0d,KAAM,CACJE,YAAY,aAAD,OAAele,EAAMuC,QAAQ4b,cA+B7BwW,GA3BG,SAAC,GAAY,IAlBZ/lB,EAkBE1R,EAAS,EAATA,GACb0B,EAAUN,KADY,EAEFyC,IAAM5E,SAAS,GAFb,mBAErBqP,EAFqB,KAEdoT,EAFc,KAQ5B,OACE,yBAAK7f,UAAWH,EAAQuE,MACtB,kBAACmb,GAAA,EAAD,CACEC,YAAY,WACZlf,QAAQ,aACRmM,MAAOA,EACP4C,SAVe,SAAC3M,EAAOod,GAC3BD,EAASC,IAUL9f,UAAWH,EAAQof,MAEnB,kBAACS,GAAA,EAAD,eAAK3P,MAAM,kCAlCV,CACL5R,GAAG,gBAAD,OAFa0R,EAmCsB,GAhCrC,gBAAgB,qBAAhB,OAAsCA,OAkCpC,kBAAC,GAAD,CAAUpD,MAAOA,EAAOoD,MAAO,GAA/B,yEACkB1R,EAChB,qGCnDOkH,GAfI,WAAO,IAAD,EACJsZ,cAAbxgB,EADiB,EACjBA,GAAIgH,EADa,EACbA,KAEV,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAY9F,MAAO,kCAAW8F,IAC9B,yBAAK5E,MAAO,CAAE0vB,WAAY,SACxB,kBAACtkB,GAAA,EAAD,CAAW/G,SAAS,MAClB,kBAAC,GAAD,CAAWzG,GAAIA,QCFV03B,GAVE,WACf,OACE,kBAAC,WAAD,KACE,kBAAC7vB,GAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,GAApB,UCcSX,GAbF,WAAO,IAAD,EACEoZ,cAATxZ,GADO,EACXhH,GADW,EACPgH,MAEV,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAY9F,MAAO,QAAU8F,IAC7B,kBAACwG,GAAA,EAAD,CAAW/G,SAAS,MAClB,kBAAC,GAAD,S,qRCZD,IAAMkxB,GAA8Bl5B,YAAH,M,g1BCAjC,IAAMm5B,GAAqBn5B,YAAH,MAalBo5B,GAAiBp5B,YAAH,MAadq5B,GAAcr5B,YAAH,MCkTTs5B,GAnTA,WAAO,IAAD,EACK94B,oBAAS,GADd,mBACZyN,EADY,KACNC,EADM,OAGO1N,oBAAS,GAHhB,mBAGZo1B,EAHY,KAGLC,EAHK,OAIWr1B,oBAAS,GAJpB,mBAIZ+4B,EAJY,KAIHC,EAJG,OASfrrB,aAAS+qB,IAHL9C,EANW,EAMjBr1B,KACSs1B,EAPQ,EAOjBhoB,QACOorB,EARU,EAQjBlrB,MARiB,EAW8B3N,sBAAYu4B,GAAoB,CAC/E1qB,QAAS,SAACtM,GACR+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,+QAERuC,QAAQC,IAAIxM,IAEdtB,OAAQ,SAACrB,EAAD,OAAkBk6B,EAAlB,EAAU34B,KAAQ24B,QAAlB,OAAkCl6B,EAAMsB,WAAW,CACzDP,MAAO24B,GACPn4B,KAAM,CACJ+I,OAAO,GAAD,oBACDssB,EAAWtsB,QADV,CAEJ4vB,UAxBW,mBAWZC,EAXY,KAWSC,EAXT,KAWAvrB,QAXA,EA8BsCzN,sBAAYw4B,GAAgB,CACnF3qB,QAAS,SAACtM,GACR+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,wQAERuC,QAAQC,IAAIxM,IAEdtB,OAAQ,SAACrB,EAAD,OAAkBq6B,EAAlB,EAAU94B,KAAQ84B,SAAlB,OAAmCr6B,EAAMsB,WAAW,CAC1DP,MAAO24B,GACPn4B,KAAM,CACJ+I,OAAQssB,EAAWtsB,OAAOK,KAAI,SAAAuX,GAAI,OAAIA,EAAKngB,KAAOs4B,EAASt4B,GAAKs4B,EAAWnY,WAzC9D,mBA8BZoY,EA9BY,KA8BaC,EA9Bb,KA8BI1rB,QA9BJ,EAiDfzN,sBAAYy4B,GAAa,CAC3B5qB,QAAS,SAACtM,GACR+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,oOAERuC,QAAQC,IAAIxM,IAEdtB,OAAQ,SAACrB,EAAD,OAAkBo3B,EAAlB,EAAU71B,KAAQ61B,WAAlB,OAAqCp3B,EAAMsB,WAAW,CAC5DP,MAAO24B,GACPn4B,KAAM,CACJ+I,OAAQssB,EAAWtsB,OAAOsI,QAAO,SAAAsP,GAAI,OAAIA,EAAKngB,KAAOq1B,EAAWr1B,YA5DnD,mBA+CjBq1B,EA/CiB,KAgDNC,EAhDM,KAgDfxoB,QAiBE2oB,EAAW,SAAC,GAAgC,IAA9BtV,EAA6B,EAA7BA,KAAM9E,EAAuB,EAAvBA,KAAMga,EAAiB,EAAjBA,WAAiB,EACfp2B,oBAAS,GADM,mBACxCw5B,EADwC,KAC9BC,EAD8B,KAsB/C,OACE,kBAAC,WAAD,KACID,EAsBE,kBAACE,EAAD,CAASxY,KAAMA,EAAM9E,KAvCV,SAAC7b,GAClB6b,EAAK,6BACA7b,GADD,IAEFQ,GAAImgB,EAAKngB,OAoCkCpB,MAhCvB,WACtB85B,GAAY,MAUR,kBAAC7wB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,EAAGoO,GAAI,GAC1C,kBAAC9S,GAAA,EAAD,CAAO/gB,UAAU,aACf,kBAACK,EAAA,EAAD,CAAYC,QAAQ,KAAK+F,cAAY,GAClCiY,EAAKjf,OAER,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,YAAY+F,cAAY,GACzCiY,EAAK2E,SAAS5jB,OAEjB,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,WAAWiB,QAAQ,QAAQ8E,cAAY,GAA3D,2DACciY,EAAKwV,YAEnB,kBAAC9tB,GAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACU,QAAQ,gBAAgB5G,UAAU,wBACrD,kBAACtB,EAAA,EAAD,CAAYsB,UAAU,cAAcpB,aAAW,SAASH,QAnB/C,WACnB+0B,EAAWlV,EAAKngB,MAmBJ,kBAAC,KAAD,CAAYqC,SAAS,WAEvB,kBAAC9B,EAAA,EAAD,CAAYsB,UAAU,cAAcpB,aAAW,SAASH,QArCjD,WACjBo4B,GAAY,KAqCA,kBAAC,KAAD,CAAUr2B,SAAS,gBAW7Bs2B,EAAU,SAAC,GAA2B,IAAzBtd,EAAwB,EAAxBA,KAAMzc,EAAkB,EAAlBA,MAAOuhB,EAAW,EAAXA,KAAW,EACjBlhB,oBAAS,GADQ,mBAClCyjB,EADkC,KAC5BkW,EAD4B,OAEf35B,mBAASkhB,EAAOA,EAAKjf,MAAQ,IAFd,mBAElCA,EAFkC,KAE3B23B,EAF2B,OAGL55B,mBAASkhB,EAAOA,EAAKwV,WAAa,IAH7B,mBAGlCA,EAHkC,KAGtBmD,EAHsB,OAIT75B,mBAASkhB,EAAOA,EAAK2E,SAAS9kB,GAAK,IAJ1B,mBAIlC8kB,EAJkC,KAIxBiU,EAJwB,KA8BzC,OACE,kBAAClxB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGoS,GAAI,EAAGiN,GAAI,EAAGoO,GAAI,GAC1C,kBAAC9S,GAAA,EAAD,CAAO/gB,UAAU,iBACf,kBAACtB,EAAA,EAAD,CAAYsB,UAAU,mBAAmBpB,aAAW,SAASgJ,KAAK,QAAQnJ,QAAS1B,GACjF,kBAAC,KAAD,CAAWyD,SAAS,aAEtB,0BAAM22B,SA9BS,SAACp4B,GACpBA,EAAE8pB,iBACF,IAAMyN,EAAU,CACdj3B,QACAy0B,YAAaA,EACb7Q,YAEF3X,QAAQC,IAAI+qB,GACZ9c,EAAK8c,KAuBC,kBAACpmB,GAAA,EAAD,CACElQ,UAAU,iBACVo3B,UAAQ,EACR1F,aAAcpT,EAAOA,EAAKjf,MAAQ,GAClC8Q,WAAW,kEACXd,SAzBU,SAACtQ,GACnBg4B,GAAQ,GACRC,EAASj4B,EAAEC,cAAcyN,UAyBnB,kBAACyD,GAAA,EAAD,CACElQ,UAAU,sBACV6H,KAAK,SACLuvB,UAAQ,EACR1F,aAAcpT,EAAOA,EAAKwV,WAAa,GACvCzkB,SA5BQ,SAACtQ,GACjBg4B,GAAQ,GACRE,EAAcl4B,EAAEC,cAAcyN,QA2BtB+T,gBAAiB,CACfC,QAAQ,GAEVtQ,WAAW,4FAEb,kBAACD,GAAA,EAAD,CACE4Q,QAAM,EACNsW,UAAQ,EACR/nB,SAjCQ,SAACtQ,GACjBg4B,GAAQ,GACRG,EAAYn4B,EAAEC,cAAcyN,QAgCpBilB,aAAcpT,EAAOA,EAAK2E,SAAS9kB,GAAK,GACxCk5B,YAAa,CACXzd,QAAQ,GAEVzJ,WAAW,yEAEX,4BAAQvP,IAAK,EAAGkN,UAAQ,EAACF,UAAQ,EAACnB,MAAM,KACvCumB,EAAWsE,eAAevwB,KAAI,SAACyI,GAAD,OAC7B,4BAAQ5O,IAAK4O,EAAOrR,GAAIsO,MAAO+C,EAAOrR,IACnCqR,EAAOnQ,WAId,kBAAC4R,GAAA,EAAD,CACEjR,UAAU,mBACVM,QAAQ,YACRrB,MAAM,UACN2I,KAAK,QACL4d,UAAW,kBAAC,KAAD,MACX3d,KAAK,SACLiG,UAAW+S,GAPb,YA7LS,8CAsNnB,WAA6B0W,GAA7B,UAAAzZ,EAAA,sEACQyY,EAAS,CACbzZ,UAAU,gBAAMya,KAFpB,OAIEnB,GAAW,GAJb,4CAtNmB,+BA6NJoB,EA7NI,gFA6NnB,WAA8BC,GAA9B,UAAA3Z,EAAA,sEACQ4Y,EAAa,CACjB5Z,UAAU,gBAAM2a,KAFpB,4CA7NmB,oEAmOnB,WAAoCt5B,GAApC,UAAA2f,EAAA,sEACQ0V,EAAW,CACf1W,UAAW,CAAE3e,QAFjB,4CAnOmB,sBAyOnB,IAAMu1B,EAAmB,SAACv1B,GACxBs0B,EAASt0B,IAYX,GAAI80B,EAAe,OACjB,kBAAC,GAAD,MAGF,GAAIoD,EAEF,OADA/qB,QAAQC,IAAI4S,KAAKC,UAAUiY,IAEzB,kBAAC,GAAD,CACEh3B,MAAM,iGACN8I,YAAY,wTAKlB,IAAMuD,EAAU,WACd,OAAI8qB,GAAmBG,GAAuBlD,EAA0B,kBAAC,GAAD,MACjE,MAGT,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CACEn1B,KAAMuM,EACN9B,KAAM8B,EAAOA,EAAK9B,KAAO,GACzBlB,KAAMgD,EAAOA,EAAKhD,KAAO,GACzB9K,MAAO,kBAAM+N,GAAQ,MAEvB,kBAACY,EAAD,MAEA,yBAAK1L,UAAU,uBACb,kBAACK,EAAA,EAAD,CAAYL,UAAU,UAAtB,gJACA,kBAACiR,GAAA,EAAD,CAAQ3Q,QAAQ,YAAYrB,MAAM,UAAU2I,KAAK,QAAQnJ,QAvE7C,WAChB23B,GAAW,KAsEP,qDAIF,kBAAC,GAAD,CACE93B,KAAMk0B,EACN/hB,QA9CmB,YA7ON,oCA8OjBkjB,CAAqBnB,GACrBC,GAAS,IA6CL11B,MA1CuB,WAC3B01B,GAAS,IA0CL90B,KACE,CACE0B,MAAO,0IACP0J,KAAM,qwBAIZ,kBAAC/C,GAAA,EAAD,CAAMC,WAAS,EAAC3E,QAAS,EAAG6E,GAAI,IAC7BgwB,GACC,kBAACW,EAAD,CAAStd,KAtSE,4CAsSmBzc,MApFlB,WAClBq5B,GAAW,MAqFNpD,EAAWtsB,OAAOK,KAAI,SAACuX,EAAMzO,GAAP,OACrB,kBAAC+jB,EAAD,CAAUtV,KAAMA,EAAM9E,KAAMge,EAAgBhE,WAAYE,QAG5D,4BACA,sEACA,kBAAC1yB,EAAA,EAAD,QC3TS02B,GAVA,WACb,OACE,kBAAC,WAAD,KACE,yBAAK13B,UAAU,uBACb,kBAACK,EAAA,EAAD,CAAYL,UAAU,UAAtB,oHC+BO23B,GAhCS,WACtB,IAAMh6B,EAAO,CACX,CACEoS,MAAO,uCACPkQ,UAAW,kBAAC,GAAD,OAEb,CACElQ,MAAO,6CACPkQ,UAAW,kBAAC,GAAD,OAEb,CACElQ,MAAO,qBACPkQ,UAAW,sBAEb,CACElQ,MAAO,6CACPkQ,UAAW,8CAEb,CACElQ,MAAO,uCACPkQ,UAAW,wCAEb,CACElQ,MAAO,qBACPkQ,UAAW,uBAGf,OACE,kBAAC,GAAD,CAActiB,KAAMA,KCjBTi6B,GAba,WAC1B,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAYv4B,MAAK,wHACjB,6BACE,kBAACsM,GAAA,EAAD,CAAW/G,SAAS,KAAKrE,MAAO,CAAEwE,QAAS,IACzC,kBAAC,GAAD,U,4ICyIK8yB,GAvIO,SAAC,GAA2C,IAAzCv5B,EAAwC,EAAxCA,KAAMvB,EAAkC,EAAlCA,MAAO+6B,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAAc,EAC/B36B,qBAD+B,mBACxD46B,EADwD,KAC9CC,EAD8C,KAQ/D,OACE,kBAAC,WAAD,KACE,kBAACvnB,GAAA,EAAD,CAAQpS,KAAMA,EAAMC,QAASxB,EAAO4T,kBAAgB,qBAClD,0BAAMwmB,SARC,SAACp4B,GACZA,EAAE8pB,iBACFiP,EAAYE,KAON,kBAACnnB,GAAA,EAAD,8IACA,kBAACC,GAAA,EAAD,KACE,kBAAC9K,GAAA,EAAD,CAAMC,WAAS,EAAC3E,QAAS,GACvB,kBAAC0E,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqS,GAAI,GACrB,kBAACtI,GAAA,EAAD,CACEknB,UAAQ,EACRzd,UAAU,OACV5J,MAAM,2EACNzP,QAAQ,WACR+O,SAAU,SAACtQ,GAAD,OAAOk5B,EAAY,6BAEtBD,GAFqB,IAGxB14B,SAAUP,EAAEC,cAAcyN,UAG9B0D,WAAW,kKAGf,kBAACnK,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqS,GAAI,GACrB,kBAACtI,GAAA,EAAD,CACEknB,UAAQ,EACRzd,UAAU,OACV5J,MAAM,iCACNzP,QAAQ,WACR+O,SAAU,SAACtQ,GAAD,OAAOk5B,EAAY,6BAEtBD,GAFqB,IAGxBE,MAAOn5B,EAAEC,cAAcyN,UAG3B0D,WAAW,uHAGf,kBAACnK,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqS,GAAI,GACrB,kBAACtI,GAAA,EAAD,CACEknB,UAAQ,EACRzd,UAAU,OACV5J,MAAM,uCACNlI,KAAK,WACLvH,QAAQ,WACR+O,SAAU,SAACtQ,GAAD,OAAOk5B,EAAY,6BAEtBD,GAFqB,IAGxBG,SAAUp5B,EAAEC,cAAcyN,UAG9B0D,WAAW,uIAGf,kBAACnK,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqS,GAAI,GACrB,kBAACtI,GAAA,EAAD,CACEknB,UAAQ,EACRzd,UAAU,OACV5J,MAAM,uCACNlI,KAAK,WACLvH,QAAQ,WACR6P,WAAW,iGAGf,kBAACnK,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqS,GAAI,GACrB,kBAAC4f,GAAA,EAAD,CAAahB,UAAQ,EAAC92B,QAAQ,WAAWqZ,UAAU,QACjD,kBAAC0e,GAAA,EAAD,CAAYC,QAAQ,8BAApB,wCACA,kBAAC5e,GAAA,EAAD,CACE0d,UAAQ,EACRxd,QAAM,EACN7J,MAAM,uCACNV,SAAU,SAACtQ,GAAD,OAAOk5B,EAAY,6BAEtBD,GAFqB,IAGxB/V,OAAQljB,EAAEC,cAAcyN,UAG5ByU,WAAY,CACVrX,KAAM,MACN1L,GAAI,+BAGN,4BAAQS,aAAW,OAAOgP,UAAQ,EAACE,SAAS,OAAOrB,MAAM,KACxDsrB,EAAQQ,WAAWxxB,KAAI,SAAAsM,GAAG,OAAI,4BAAQ5G,MAAO4G,EAAIlV,IAAKkV,EAAIhU,WAE7D,kBAACm5B,GAAA,EAAD,uJAGJ,kBAACxyB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqS,GAAI,GACrB,kBAAC4f,GAAA,EAAD,CAAahB,UAAQ,EAAC92B,QAAQ,WAAWqZ,UAAU,QACjD,kBAAC0e,GAAA,EAAD,CAAYC,QAAQ,8BAApB,kCACA,kBAAC5e,GAAA,EAAD,CACEE,QAAM,EACN7J,MAAM,iCACNV,SAAU,SAACtQ,GAAD,OAAOk5B,EAAY,6BAEtBD,GAFqB,IAGxBS,OAAQ15B,EAAEC,cAAcyN,UAG5ByU,WAAY,CACVrX,KAAM,MACN1L,GAAI,+BAGN,4BAAQS,aAAW,OAAOgP,UAAQ,EAACE,SAAS,OAAOrB,MAAM,KACxDsrB,EAAQW,WAAW3xB,KAAI,SAAAsM,GAAG,OAAI,4BAAQ5G,MAAO4G,EAAIlV,IAAKkV,EAAIhU,WAE7D,kBAACm5B,GAAA,EAAD,yJAKR,4BACA,kBAACxnB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQ3Q,QAAQ,YAAY7B,QAAS1B,GAArC,wCAGA,kBAACkU,GAAA,EAAD,CAAQ3Q,QAAQ,YAAYuH,KAAK,SAAS5I,MAAM,WAAhD,yDCPG05B,GAtHU,SAAC,GAAgD,IAA9Ch7B,EAA6C,EAA7CA,KAAMo6B,EAAuC,EAAvCA,QAASz5B,EAA8B,EAA9BA,KAAMvB,EAAwB,EAAxBA,MAAO67B,EAAiB,EAAjBA,WAAiB,EACvCx7B,oBAAS,GAD8B,mBAChE46B,EADgE,KACtDC,EADsD,KAavE,OACE,kBAAC,WAAD,KACE,kBAACvnB,GAAA,EAAD,CAAQpS,KAAMA,EAAMC,QAASxB,EAAO4T,kBAAgB,qBAClD,0BAAMwmB,SAbC,SAACp4B,GACZA,EAAE8pB,iBACF+P,EAAW,CACTz6B,GAAIR,EAAKQ,GACTR,KAAMq6B,IAERC,GAAY,GACZl7B,MAOM,kBAAC8T,GAAA,EAAD,8FACA,kBAACC,GAAA,EAAD,KACE,kBAAC9K,GAAA,EAAD,CAAMC,WAAS,EAAC3E,QAAS,GACvB,kBAAC0E,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqS,GAAI,GACrB,kBAACtI,GAAA,EAAD,CACEknB,UAAQ,EACRzd,UAAU,OACV5J,MAAM,2EACNzP,QAAQ,WACRoxB,aAAc/zB,EAAK2B,SACnB+P,SAAU,SAACtQ,GAAD,OAAOk5B,EAAY,6BAEtBD,GAFqB,IAGxB14B,SAAUP,EAAEC,cAAcyN,UAG9B0D,WAAW,kKAGf,kBAACnK,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqS,GAAI,GACrB,kBAACtI,GAAA,EAAD,CACEknB,UAAQ,EACRzd,UAAU,OACV5J,MAAM,iCACNzP,QAAQ,WACRoxB,aAAc/zB,EAAKu6B,MACnB7oB,SAAU,SAACtQ,GAAD,OAAOk5B,EAAY,6BAEtBD,GAFqB,IAGxBE,MAAOn5B,EAAEC,cAAcyN,UAG3B0D,WAAW,uHAGf,kBAACnK,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqS,GAAI,GACrB,kBAAC4f,GAAA,EAAD,CAAahB,UAAQ,EAAC92B,QAAQ,WAAWqZ,UAAU,QACjD,kBAAC0e,GAAA,EAAD,CAAYC,QAAQ,8BAApB,wCACA,kBAAC5e,GAAA,EAAD,CACE0d,UAAQ,EACRxd,QAAM,EACN8X,aAAc/zB,EAAKskB,OAAStkB,EAAKskB,OAAO9jB,GAAK,GAC7C4R,MAAM,uCACNV,SAAU,SAACtQ,GAAD,OAAOk5B,EAAY,6BAEtBD,GAFqB,IAGxB/V,OAAQljB,EAAEC,cAAcyN,UAG5ByU,WAAY,CACVrX,KAAM,MACN1L,GAAI,+BAGN,4BAAQS,aAAW,OAAOgP,UAAQ,EAACE,SAAS,OAAOrB,MAAM,KACxDsrB,EAAQQ,WAAWxxB,KAAI,SAAAsM,GAAG,OAAI,4BAAQ5G,MAAO4G,EAAIlV,IAAKkV,EAAIhU,WAE7D,kBAACm5B,GAAA,EAAD,uJAGJ,kBAACxyB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIqS,GAAI,GACrB,kBAAC4f,GAAA,EAAD,CAAahB,UAAQ,EAAC92B,QAAQ,WAAWqZ,UAAU,QACjD,kBAAC0e,GAAA,EAAD,CAAYC,QAAQ,8BAApB,kCACA,kBAAC5e,GAAA,EAAD,CACEE,QAAM,EACN8X,aAAc/zB,EAAK86B,OAAS96B,EAAK86B,OAAOt6B,GAAK,GAC7C4R,MAAM,iCACNV,SAAU,SAACtQ,GAAD,OAAOk5B,EAAY,6BAEtBD,GAFqB,IAGxBS,OAAQ15B,EAAEC,cAAcyN,UAG5ByU,WAAY,CACVrX,KAAM,MACN1L,GAAI,+BAGN,4BAAQS,aAAW,OAAOgP,UAAQ,EAACE,SAAS,OAAOrB,MAAM,KACxDsrB,EAAQW,WAAW3xB,KAAI,SAAAsM,GAAG,OAAI,4BAAQ5G,MAAO4G,EAAIlV,IAAKkV,EAAIhU,WAE7D,kBAACm5B,GAAA,EAAD,yJAKR,4BACA,kBAACxnB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQ3Q,QAAQ,YAAY7B,QAAS1B,GAArC,wCAGA,kBAACkU,GAAA,EAAD,CAAQ3Q,QAAQ,YAAYuH,KAAK,SAAS5I,MAAM,WAAhD,yDC7CG45B,GAlES,SAAC,GAAsC,IAApCl7B,EAAmC,EAAnCA,KAAMW,EAA6B,EAA7BA,KAAMvB,EAAuB,EAAvBA,MAAO+7B,EAAgB,EAAhBA,UAAgB,EAC5B17B,oBAAS,GADmB,mBACrD46B,EADqD,KAC3CC,EAD2C,KAa5D,OACE,kBAAC,WAAD,KACE,kBAACvnB,GAAA,EAAD,CAAQpS,KAAMA,EAAMC,QAASxB,EAAO4T,kBAAgB,qBAClD,0BAAMwmB,SAbC,SAACp4B,GACZA,EAAE8pB,iBACFiQ,EAAU,CACR36B,GAAIR,EAAKQ,GACTg6B,SAAUH,EAASG,WAErBF,GAAY,GACZl7B,MAOM,kBAAC8T,GAAA,EAAD,oGACA,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAmB5S,GAAG,4BAAtB,+MAC0CR,EAAK2B,UAE/C,kBAAC0G,GAAA,EAAD,CAAMC,WAAS,EAAC3E,QAAS,GACvB,kBAAC0E,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAAC+J,GAAA,EAAD,CACEknB,UAAQ,EACRzd,UAAU,OACV5J,MAAM,uCACNlI,KAAK,WACLvH,QAAQ,WACR+O,SAAU,SAACtQ,GAAD,OAAOk5B,EAAY,6BAEtBD,GAFqB,IAGxBG,SAAUp5B,EAAEC,cAAcyN,UAG9B0D,WAAW,uIAGf,kBAACnK,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAAC+J,GAAA,EAAD,CACEknB,UAAQ,EACRzd,UAAU,OACV5J,MAAM,uCACNlI,KAAK,WACLvH,QAAQ,WACR6P,WAAW,mGAKnB,4BACA,kBAACa,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQ3Q,QAAQ,YAAY7B,QAAS1B,GAArC,wCAGA,kBAACkU,GAAA,EAAD,CAAQ3Q,QAAQ,YAAYuH,KAAK,SAAS5I,MAAM,WAAhD,+DCfZ,SAAS85B,GAAqBjb,EAAGC,EAAGib,GAClC,OAAIjb,EAAEib,GAAWlb,EAAEkb,IACT,EAENjb,EAAEib,GAAWlb,EAAEkb,GACV,EAEF,EAmBT,IAAMC,GAAY,CAChB,CAAE96B,GAAI,WAAY+6B,SAAS,EAAOC,gBAAgB,EAAMppB,MAAO,2EAAgB8N,MAAM,GACrF,CAAE1f,GAAI,QAAS+6B,SAAS,EAAOC,gBAAgB,EAAOppB,MAAO,iCAAS8N,MAAM,GAC5E,CAAE1f,GAAI,SAAU+6B,SAAS,EAAOC,gBAAgB,EAAOppB,MAAO,uCAAU8N,MAAM,GAC9E,CAAE1f,GAAI,SAAU+6B,SAAS,EAAOC,gBAAgB,EAAOppB,MAAO,iCAAS8N,MAAM,GAC7E,CAAE1f,GAAI,GAAI+6B,SAAS,EAAMC,gBAAgB,EAAMppB,MAAO,SAAU8N,MAAM,IAGxE,SAASub,GAAkB3xB,GAAQ,IACzB5H,EAAoF4H,EAApF5H,QAASw5B,EAA2E5xB,EAA3E4xB,iBAAkBrb,EAAyDvW,EAAzDuW,MAAOgb,EAAkDvxB,EAAlDuxB,QAASM,EAAyC7xB,EAAzC6xB,YAAaC,EAA4B9xB,EAA5B8xB,SAAUC,EAAkB/xB,EAAlB+xB,cAK1E,OACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAW50B,QAAQ,YACjB,kBAAC4T,GAAA,EAAD,CACEihB,cAAeN,EAAc,GAAKA,EAAcC,EAChDtY,QAASsY,EAAW,GAAKD,IAAgBC,EACzClqB,SAAUgqB,EACVnY,WAAY,CAAE,aAAc,0BAG/B+X,GAAUlyB,KAAI,SAAC8yB,GAAD,OACb,kBAACF,GAAA,EAAD,CACE/4B,IAAKi5B,EAAS17B,GACd27B,MAAM,SACN/0B,QAAS80B,EAASV,eAAiB,OAAS,WAC5CU,EAAShc,KACT,kBAACkc,GAAA,EAAD,CACEx1B,OAAQy0B,IAAYa,EAAS17B,GAC7B4L,UAAWivB,IAAYa,EAAS17B,GAAK6f,EAAQ,MAC7Cvf,SAxBeqc,EAwBY+e,EAAS17B,GAxBR,SAACuE,GACvC82B,EAAc92B,EAAOoY,KAwBXkf,cAAcH,EAAShc,MAEtBgc,EAAS9pB,MACTipB,IAAYa,EAAS17B,GACpB,0BAAM6B,UAAWH,EAAQo6B,gBACZ,SAAVjc,EAAmB,oBAAsB,oBAE1C,MAGH,8BAAO6b,EAAS9pB,QAnCH,IAAC+K,OA2C7B,IAAMof,GAAmB16B,aAAW,SAACyB,GAAD,MAAY,CAC9CmD,KAAM,CACJ+1B,YAAal5B,EAAMK,QAAQ,GAC3B84B,aAAcn5B,EAAMK,QAAQ,IAE9B+4B,UACyB,UAAvBp5B,EAAMuC,QAAQqE,KACV,CACA5I,MAAOgC,EAAMuC,QAAQ82B,UAAUC,KAC/Bj3B,gBAAiBk3B,aAAQv5B,EAAMuC,QAAQ82B,UAAUG,MAAO,MAExD,CACAx7B,MAAOgC,EAAMuC,QAAQuF,KAAKhI,QAC1BuC,gBAAiBrC,EAAMuC,QAAQ82B,UAAUI,MAE/Cr7B,MAAO,CACL2F,KAAM,gBAIJ21B,GAAuB,SAAClzB,GAC5B,IAAM5H,EAAUq6B,KACRZ,EAA8C7xB,EAA9C6xB,YAAasB,EAAiCnzB,EAAjCmzB,aAAcC,EAAmBpzB,EAAnBozB,eAEnC,OACE,kBAAC53B,EAAA,EAAD,CACEjD,UAAWC,YAAKJ,EAAQuE,KAAT,eACZvE,EAAQw6B,UAAYf,EAAc,KAGpCA,EAAc,EACb,kBAACj5B,EAAA,EAAD,CAAYL,UAAWH,EAAQR,MAAOJ,MAAM,UAAUqB,QAAQ,YAAY2f,UAAU,OACjFqZ,EADH,+CAIE,kBAACj5B,EAAA,EAAD,CAAYL,UAAWH,EAAQR,MAAOiB,QAAQ,KAAKnC,GAAG,aAAa8hB,UAAU,OAA7E,4EAMHqZ,EAAc,EACb,kBAACl6B,EAAA,EAAD,CAASC,MAAM,8CACb,kBAACX,EAAA,EAAD,CAAYE,aAAW,SAASH,QAASm8B,GACvC,kBAAC,KAAD,QAIF,kBAACx7B,EAAA,EAAD,CAASC,MAAM,6HACb,kBAAC4R,GAAA,EAAD,CAAQ3Q,QAAQ,YAAYrB,MAAM,UAAUR,QAAS,kBAAMo8B,GAAe,KAA1E,uDAUNt7B,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCyC,MAAO,CACLhE,MAAO,OACPo7B,aAAc75B,EAAMK,QAAQ,IAE9By5B,MAAO,CACL7b,SAAU,KAEZ+a,eAAgB,CACdj2B,OAAQ,EACRg3B,KAAM,gBACNn3B,OAAQ,EACRgB,QAAS,EACTwa,SAAU,SACVta,QAAS,EACT/B,SAAU,WACVW,IAAK,GACLjE,MAAO,OAoMIu7B,GAhMI,SAAC,GAA4E,IAA1EC,EAAyE,EAAzEA,MAAOC,EAAkE,EAAlEA,WAAYC,EAAsD,EAAtDA,YAAaxC,EAAyC,EAAzCA,WAAYyC,EAA6B,EAA7BA,cAAetD,EAAc,EAAdA,QACzEl4B,EAAUN,KAD6E,EAGrDnC,oBAAS,GAH4C,mBAGtFk+B,EAHsF,KAGxEC,EAHwE,OAIvDn+B,oBAAS,GAJ8C,mBAItFo+B,EAJsF,KAIzEX,EAJyE,OAKzDz9B,oBAAS,GALgD,mBAKtFq+B,EALsF,KAK1EC,EAL0E,OAM3Dt+B,oBAAS,GANkD,mBAMtF07B,EANsF,KAM3E6C,EAN2E,OAQnEv+B,mBAAS,OAR0D,mBAQtF4gB,EARsF,KAQ/E4d,EAR+E,OAS/Dx+B,mBAAS,YATsD,mBAStF47B,EATsF,KAS7E6C,EAT6E,OAU7Dz+B,mBAAS,IAVoD,mBAUtFwQ,EAVsF,KAU5EklB,EAV4E,OAWrE11B,mBAAS,GAX4D,mBAWtF0+B,EAXsF,KAWhFC,EAXgF,OAYvD3+B,mBAAS,GAZ8C,mBAYtF4+B,EAZsF,KAYzEC,EAZyE,KA6F7F,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAe39B,KAAMk9B,EAAazD,QAASA,EAASh7B,MAAO,kBAAM89B,GAAe,IAAQ/C,YArBxE,SAACn6B,GAEnBw9B,EAAWx9B,GACXk9B,GAAe,MAmBb,kBAAC,GAAD,CAAkBl9B,KAAM89B,EAAY1D,QAASA,EAASz5B,KAAMm9B,EAAY1+B,MAAO,kBAAM2+B,GAAc,IAAQ9C,WAhBvF,SAAC,GAAkB,IAAhBz6B,EAAe,EAAfA,GAAIR,EAAW,EAAXA,KAC7Bi7B,EAAW,CACTz6B,KACAR,YAcA,kBAAC,GAAD,CAAiBA,KAAMm7B,EAAWx6B,KAAMw6B,EAAW/7B,MAAO,kBAAM4+B,GAAa,IAAQ7C,UAV7D,SAAC,GAAsB,IAApB36B,EAAmB,EAAnBA,GAAIg6B,EAAe,EAAfA,SACjCkD,EAAc,CACZl9B,KAAIg6B,gBASJ,kBAAC,GAAD,CACE75B,KAAMg9B,EACN7qB,QAhCmB,WACvB2qB,EAAYxtB,GACZ2tB,GAAgB,GAChBzI,EAAY,KA8BR/1B,MAAO,kBAAMw+B,GAAgB,IAC7B59B,KACE,CACE0B,MAAO,qIACP0J,KAAM,2mBAIZ,kBAACgY,GAAA,EAAD,CAAO/gB,UAAWH,EAAQ6D,OACxB,kBAAC,GAAD,CAAsB41B,YAAa1rB,EAASjH,OAAQi0B,aAAcW,EAAiBV,eAAgBA,IACnG,kBAACqB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEn8B,UAAWH,EAAQk7B,MACnBpqB,kBAAgB,aAChB/I,KAAK,SACLhJ,aAAW,kBAEX,kBAACw6B,GAAD,CACEv5B,QAASA,EACTy5B,YAAa1rB,EAASjH,OACtBqX,MAAOA,EACPgb,QAASA,EACTK,iBAvGiB,SAAC32B,GAC5B,GAAIA,EAAMoU,OAAOmK,QAAjB,CACE,IAAMmb,EAAelB,EAAMn0B,KAAI,SAACgd,GAAD,OAAOA,EAAE5lB,MACxC20B,EAAYsJ,QAGdtJ,EAAY,KAkGF0G,cA9Gc,SAAC92B,EAAOoY,GAEhC8gB,EADc5C,IAAYle,GAAsB,QAAVkD,EACrB,OAAS,OAC1B6d,EAAW/gB,IA4GDye,SAAU2B,EAAMv0B,SAElB,kBAAC01B,GAAA,EAAD,KA9QZ,SAAoBC,EAAOC,GACzB,IAAMC,EAAiBF,EAAMv1B,KAAI,SAACmR,EAAIrI,GAAL,MAAe,CAACqI,EAAIrI,MAMrD,OALA2sB,EAAe3e,MAAK,SAACC,EAAGC,GACtB,IAAMC,EAAQue,EAAWze,EAAE,GAAIC,EAAE,IACjC,OAAc,IAAVC,EAAoBA,EACjBF,EAAE,GAAKC,EAAE,MAEXye,EAAez1B,KAAI,SAACmR,GAAD,OAAQA,EAAG,MAwQxBukB,CAAWvB,EArR1B,SAAuBld,EAAOgb,GAC5B,MAAiB,SAAVhb,EACH,SAACF,EAAGC,GAAJ,OAAUgb,GAAqBjb,EAAGC,EAAGib,IACrC,SAAClb,EAAGC,GAAJ,OAAWgb,GAAqBjb,EAAGC,EAAGib,IAkRX0D,CAAc1e,EAAOgb,IACrCpb,MAAMke,EAAOE,EAAaF,EAAOE,EAAcA,GAC/Cj1B,KAAI,SAAC41B,EAAK9sB,GACT,IAjEIhG,EAiEE+yB,GAjEF/yB,EAiE8B8yB,EAAIx+B,IAjEG,IAA5ByP,EAASivB,QAAQhzB,IAkExBizB,EAAO,kCAA8BjtB,GAC3C,OACE,kBAAC6pB,GAAA,EAAD,CACE1S,OAAK,EACL9mB,KAAK,WACL68B,eAAcH,EACdI,UAAW,EACXp8B,IAAK+7B,EAAIx+B,GACTyP,SAAUgvB,GAEV,kBAACjD,GAAA,EAAD,CAAW50B,QAAQ,YACjB,kBAAC4T,GAAA,EAAD,CACEsI,QAAS2b,EACTn+B,QAAS,SAACiE,GAAD,OApHb,SAACsa,EAAG7e,GACtB,IAAM0b,EAAgBjM,EAASivB,QAAQ1+B,GACnC8+B,EAAc,IAEK,IAAnBpjB,EACFojB,EAAcA,EAAY1hB,OAAO3N,EAAUzP,GAChB,IAAlB0b,EACTojB,EAAcA,EAAY1hB,OAAO3N,EAASgQ,MAAM,IACvC/D,IAAkBjM,EAASjH,OAAS,EAC7Cs2B,EAAcA,EAAY1hB,OAAO3N,EAASgQ,MAAM,GAAI,IAC3C/D,EAAgB,IACzBojB,EAAcA,EAAY1hB,OACxB3N,EAASgQ,MAAM,EAAG/D,GAClBjM,EAASgQ,MAAM/D,EAAgB,KAInCiZ,EAAYmK,GAmG8BC,CAAYx6B,EAAOi6B,EAAIx+B,KAC3C+iB,WAAY,CAAE,kBAAmB4b,MAGrC,kBAACnD,GAAA,EAAD,CAAWG,MAAM,SAAS7Z,UAAU,KAAK9hB,GAAI2+B,EAASK,MAAM,MAAMp4B,QAAQ,QACvE43B,EAAIr9B,UAEP,kBAACq6B,GAAA,EAAD,CAAWG,MAAM,UAAU6C,EAAIzE,OAC/B,kBAACyB,GAAA,EAAD,CAAWG,MAAM,UAAU6C,EAAI1a,OAAS0a,EAAI1a,OAAO5iB,MAAQ,KAC3D,kBAACs6B,GAAA,EAAD,CAAWG,MAAM,UAAU6C,EAAIlE,OAASkE,EAAIlE,OAAOp5B,MAAQ,KAC3D,kBAACs6B,GAAA,EAAD,CAAWG,MAAM,SAAS/0B,QAAQ,QAChC,kBAAC3F,EAAA,EAAD,CAASC,MAAM,oDACb,kBAACX,EAAA,EAAD,CACED,QAAS,SAACiE,GAAD,OA7Gb,SAACsa,EAAG2f,GACxBjB,EAAciB,GA4G8BS,CAAc16B,EAAOi6B,KAEzC,kBAAC,KAAD,QAGJ,kBAACv9B,EAAA,EAAD,CAASC,MAAM,yFACb,kBAACX,EAAA,EAAD,CACED,QAAS,SAACiE,GAAD,OAhHX,SAACsa,EAAG2f,GAC1BhB,EAAagB,GA+G+BU,CAAgB36B,EAAOi6B,KAE3C,kBAAC,KAAD,gBAUpB,kBAACW,GAAA,EAAD,CACEC,mBAAoB,CAAC,EAAG,GAAI,IAC5Btd,UAAU,MACV5P,MAAO6qB,EAAMv0B,OACbq1B,YAAaA,EACbF,KAAMA,EACN0B,iBAAiB,kCACjBC,aA/HiB,SAAC/6B,EAAOg7B,GAC/B3B,EAAQ2B,IA+HFC,oBA5HwB,SAACj7B,GAC/Bu5B,EAAetM,SAASjtB,EAAMoU,OAAOrK,MAAO,KAC5CsvB,EAAQ,S,qbC/QL,IAAM6B,GAAgBhhC,YAAH,MAkBbihC,GAAmBjhC,YAAH,M,q7BClBtB,IAAMkhC,GAAelhC,YAAH,MAkBZmhC,GAAcnhC,YAAH,MAkBXohC,GAAephC,YAAH,MAQZqhC,GAAiBrhC,YAAH,MCwHZshC,GAvJD,WAAO,IAAD,EACM9gC,oBAAS,GADf,mBACXyN,EADW,KACLC,EADK,OAMdC,aAAS6yB,IAHFO,EAHO,EAGhBlzB,QACOmzB,EAJS,EAIhBjzB,MACAxN,EALgB,EAKhBA,KALgB,EAWdoN,aAAS8yB,IAHFQ,EARO,EAQhBpzB,QACOqzB,EATS,EAShBnzB,MACM4sB,EAVU,EAUhBp6B,KAVgB,EAagCH,sBAAYwgC,GAC5D,CACE3yB,QAAS,SAACtM,GACR+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,qMAERuC,QAAQC,IAAIxM,IAEdtB,OAAQ,SAACrB,EAAD,OAAkBg/B,EAAlB,EAAUz9B,KAAQy9B,YAAlB,OAAsCh/B,EAAMsB,WAAW,CAC7DP,MAAOygC,GACPjgC,KAAM,CACJu9B,MAAOv9B,EAAKu9B,MAAMlsB,QAAO,SAAAwP,GACvB,IAAK,IAAIvX,EAAI,EAAGA,EAAIm0B,EAAYz0B,OAAQM,IACtC,GAAIm0B,EAAYn0B,GAAG9I,KAAOqgB,EAAKrgB,GAAI,OAAO,EAE5C,OAAO,WA7BC,mBAaXi9B,EAbW,KAaamD,EAbb,KAaItzB,QAbJ,EAmCyBzN,sBAAYsgC,GACrD,CACEzyB,QAAS,SAACtM,GACR+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,2MAERuC,QAAQC,IAAIxM,IAEdtB,OAAQ,SAACrB,EAAD,OAAkB++B,EAAlB,EAAUx9B,KAAQw9B,WAAlB,OAAqC/+B,EAAMsB,WAAW,CAC5DP,MAAOygC,GACPjgC,KAAM,CACJu9B,MAAM,GAAD,oBACAv9B,EAAKu9B,OADL,CAEHC,UAjDQ,mBAmCXqD,EAnCW,KAmCS/yB,EAnCT,KAmCAR,QAnCA,EAwD+BzN,sBAAYugC,GAC3D,CACE1yB,QAAS,SAACtM,GACR+L,EAAQ,CACNjD,KAAM,QACNkB,KAAM,2MAERuC,QAAQC,IAAIxM,IAEdtB,OAAQ,SAACrB,EAAD,OAAkBw8B,EAAlB,EAAUj7B,KAAQi7B,WAAlB,OAAqCx8B,EAAMsB,WAAW,CAC5DP,MAAOygC,GACPjgC,KAAM,CACJu9B,MAAOv9B,EAAKu9B,MAAMn0B,KAAI,SAAAyX,GAAI,OAAIA,EAAKrgB,KAAOy6B,EAAWz6B,GAAKy6B,EAAapa,WApE7D,mBAwDXoa,EAxDW,KAwDY6F,EAxDZ,KAwDGxzB,QAxDH,EAyEMzN,sBAAYygC,IAA7B5C,EAzEW,oBA2ElB,GAAI8C,GAAeE,EAAgB,OACjC,kBAAC,GAAD,MAGF,GAAID,GAAaE,EACf,OACE,kBAAC,GAAD,CACEj/B,MAAM,iGACN8I,YAAY,wTAKlB,IAkCMuD,EAAU,WACd,OAAI6yB,GACA9yB,GACAgzB,EAFsB,kBAAC,GAAD,MAGnB,MAGT,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CACEngC,KAAMuM,EACN9B,KAAM8B,EAAOA,EAAK9B,KAAO,GACzBlB,KAAMgD,EAAOA,EAAKhD,KAAO,GACzB9K,MAAO,kBAAM+N,GAAQ,MAEvB,kBAACY,EAAD,MAEA,kBAAC,GAAD,CACEwvB,MAAOv9B,EAAKu9B,MACZnD,QAASA,EACToD,WAtDa,SAACx9B,GAClB6gC,EAAQ,CACN1hB,UAAW,CACT0B,KAAM7gB,MAoDNy9B,YA/CoB,SAACz9B,GACzBy9B,EAAY,CACVte,UAAW,CACToe,MAAOv9B,MA6CPi7B,WAxCmB,SAAC,GAAkB,IAAhBz6B,EAAe,EAAfA,GAAIR,EAAW,EAAXA,KAC9Bi7B,EAAW,CACT9b,UAAW,CACT3e,KACAR,WAqCA09B,cAhCY,SAAC,GAAsB,IAApBl9B,EAAmB,EAAnBA,GAAIg6B,EAAe,EAAfA,SACvBkD,EAAc,CACZve,UAAW,CACT3e,KACAg6B,mBClHOuG,GAbG,WAChB,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CAAYr/B,MAAK,wHACjB,yBAAKkB,MAAO,CAAE0vB,WAAY,SACxB,kBAACtkB,GAAA,EAAD,CAAW/G,SAAS,MAClB,kBAAC,GAAD,UCOK+5B,GAXM,WACnB,OACE,kBAAC,WAAD,KACE,kBAAC,GAAD,CACEt/B,MAAM,+GACN8I,YAAY,6KC0BLy2B,GArBA,WAEb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOzhB,KAAM,IAAK0hB,OAAK,EAAC5e,UAAWrU,KACnC,kBAAC,IAAD,CAAOuR,KAAM,kBAAmB0hB,OAAK,EAAC5e,UAAWye,KACjD,kBAAC,IAAD,CAAOvhB,KAAM,qBAAsB8C,UAAW6e,KAC9C,kBAAC,IAAD,CAAO3hB,KAAM,2BAA4B8C,UAAW8e,KACpD,kBAAC,IAAD,CAAO5hB,KAAM,mBAAoB8C,UAAWvB,KAC5C,kBAAC,IAAD,CAAOvB,KAAM,WAAY8C,UAAW+e,KACpC,kBAAC,IAAD,CAAO7hB,KAAM,wBAAyB8C,UAAWgf,KACjD,kBAAC,IAAD,CAAO9hB,KAAM,uBAAwB8C,UAAWif,KAChD,kBAAC,IAAD,CAAO/hB,KAAM,qBAAsB8C,UAAW2X,KAC9C,kBAAC,IAAD,CAAOza,KAAM,UAAW8C,UAAWkQ,KACnC,kBAAC,IAAD,CAAOlQ,UAAW0e,Q,+BCnB1B,SAASQ,KACP,OACE,kBAAC9+B,EAAA,EAAD,CAAYC,QAAQ,QAAQrB,MAAM,gBAAgB66B,MAAM,UACrD,kBACA,gCACA,IAAInY,MAAOyd,eAKlB,IAAM7/B,GAAYC,aAAW,SAACyB,GAAD,MAAY,CACvCyC,MAAO,CACL0K,UAAWnN,EAAMK,QAAQ,GACzBC,QAAS,OACT89B,cAAe,SACf9mB,WAAY,UAEdlU,OAAQ,CACNQ,OAAQ5D,EAAMK,QAAQ,GACtBgC,gBAAiBrC,EAAMuC,QAAQ82B,UAAUC,MAE3C+E,KAAM,CACJ5/B,MAAO,OACP0O,UAAWnN,EAAMK,QAAQ,IAE3Bi+B,OAAQ,CACN16B,OAAQ5D,EAAMK,QAAQ,EAAG,EAAG,IAE9Bk+B,OAAQ,CACN1Z,OAAQ,eAuFG2Z,GAnFA,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,cAAoB,EAC9BxiC,mBAAS,IADqB,mBACjD86B,EADiD,KAC1C2H,EAD0C,OAExBziC,mBAAS,IAFe,mBAEjD+6B,EAFiD,KAEvC2H,EAFuC,KAGlDjgC,EAAUN,KAmBhB,OACE,kBAACoM,GAAA,EAAD,CAAWsU,UAAU,OAAOrb,SAAS,MACnC,kBAACm7B,GAAA,EAAD,MACA,yBAAK//B,UAAWH,EAAQ6D,OACtB,kBAACe,GAAA,EAAD,CAAQzE,UAAWH,EAAQwE,QACzB,kBAAC,KAAD,OAEF,kBAAChE,EAAA,EAAD,CAAY4f,UAAU,KAAK3f,QAAQ,MAAnC,gGAGA,0BAAMN,UAAWH,EAAQy/B,KAAMU,YAAU,GACvC,kBAAC9vB,GAAA,EAAD,CACE/E,QAASw0B,EACTr/B,QAAQ,WACRuE,OAAO,SACPuyB,UAAQ,EACRzd,WAAS,EACTxb,GAAG,QACH4R,MAAM,iCACNlG,KAAK,QACLo2B,aAAa,QACb/uB,WAAS,EACT7B,SAvCS,SAACtQ,GAClB8gC,EAAS9gC,EAAE+X,OAAOrK,QAuCV0D,WAAYwvB,IAGd,kBAACzvB,GAAA,EAAD,CACE/E,MAAOy0B,EACPt/B,QAAQ,WACRuE,OAAO,SACPuyB,UAAQ,EACRzd,WAAS,EACT9P,KAAK,WACLkG,MAAM,uCACNlI,KAAK,WACL1J,GAAG,WACH8hC,aAAa,mBACb5wB,SAlDa,SAACtQ,GACtB+gC,EAAY/gC,EAAE+X,OAAOrK,UAmDf,kBAACgM,GAAA,EAAD,CACEC,QAAS,kBAACC,GAAA,EAAD,CAAUlM,MAAM,WAAWxN,MAAM,YAC1C8Q,MAAM,oFAER,kBAACkB,GAAA,EAAD,CACEpJ,KAAK,SACL8R,WAAS,EACTrZ,QAAQ,YACRrB,MAAM,UACNe,UAAWH,EAAQ0/B,OACnB9gC,QA1DW,SAACM,GACpBA,EAAE8pB,kBACEqP,GAASC,IACXuH,EAAQ,CACNxH,QACAC,eA+CE,oCAYJ,kBAACrwB,GAAA,EAAD,KACE,kBAACq3B,GAAD,S,gjBC1HD,IAAMe,GAAkBtjC,YAAH,MCwEbujC,IDvDgBvjC,YAAH,MCFhB,WAAO,IAAD,EACiBmO,mBAASlO,GAAlCoO,EADQ,EACRA,QAASE,EADD,EACCA,MAAOxN,EADR,EACQA,KADR,EAE0BP,mBAAS,MAFnC,mBAETwiC,EAFS,KAEMQ,EAFN,OAGkBhjC,mBAAS,MAH3B,mBAGTuiC,EAHS,KAGEU,EAHF,OAK6B7iC,sBAC3C0iC,GACA,CACE70B,QAAS,SAACtM,GACRshC,EAAa,mKACbD,GAAiB,IAEnB3iC,OAAQ,SAACrB,EAAD,OAAkBkkC,EAAlB,EAAU3iC,KAAQ2iC,OAAlB,OAAiClkC,EAAMsB,WAAW,CACxDP,MAAON,EACPc,KAAM,CAAEX,YAAasjC,EAAO9hB,WAdlB,mBAKT8hB,EALS,KAKUC,EALV,KAKCt1B,QAcjB,GAAIA,EAAS,OAAO,kBAAC,GAAD,MAEpB,GAAIE,EAEF,OADAG,QAAQC,IAAI4S,KAAKC,UAAUjT,IAEzB,kBAAC,GAAD,CACE9L,MAAM,oFACN8I,YAAY,wQAKlB,IAIMuD,EAAU,WACd,OAAI60B,EAAsB,kBAAC,GAAD,MACnB,MAIT,OAAM5iC,EAAKX,YAEP,kBAAC,WAAD,KACE,yBAAKgD,UAAU,OACb,kBAAC0L,EAAD,MACA,kBAAC,GAAD,QAKD,6BACL,kBAACA,EAAD,MACA,kBAAC80B,GAAD,CAAYd,QAtBM,SAAC/hC,GACnB2iC,EAAO,CAAExjB,UAAWnf,KAqBcgiC,UAAWA,EAAWC,cAAeA,OC1DrE5jB,GAAS,IAAIykB,IAAa,CAC9BC,IAAK5kC,EAAU,WACfM,QACAukC,YAAa,UACbC,mBAAmB,IAGrBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAgBhlB,OAAQA,IACtB,kBAAC,GAAD,QAGJzE,SAAS0pB,eAAe,SvG0GpB,kBAAmBC,WACrBA,UAAUC,cAAc1S,MACrBnR,MAAK,SAAA8jB,GACJA,EAAaC,gBAEdC,OAAM,SAAAn2B,GACLG,QAAQH,MAAMA,EAAM+Q,c","file":"static/js/main.b40568ce.chunk.js","sourcesContent":["// export const mainUrl = 'http://localhost:4000'\r\nexport const mainUrl = 'http://192.168.31.82:4000'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { InMemoryCache } from '@apollo/client'\r\n\r\nexport const cache = new InMemoryCache({\r\n  typePolicies: {\r\n    Poll: {\r\n      fields: {\r\n        question: {\r\n          read(question) {\r\n            return question\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n})","import { gql } from '@apollo/client';\r\n\r\nexport const LOGOUT_MUTATION = gql`\r\n  mutation Logout {\r\n    logout\r\n  }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const CURRENT_USER_QUERY = gql`\r\n  query {\r\n    currentUser {\r\n      id\r\n      username\r\n    }\r\n  }\r\n`;","import React, { Fragment, useState } from 'react'\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport { gql, useApolloClient } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { LOGOUT_MUTATION } from './mutations'\r\nimport { CURRENT_USER_QUERY } from '../../containers/App/queries'\r\n\r\nconst UserProfile = ({ close }) => {\r\n  const client = useApolloClient();\r\n  const { currentUser } = client.readQuery({\r\n    query: gql`\r\n    query {\r\n      currentUser {\r\n        id\r\n        username\r\n      }\r\n    }\r\n    `,\r\n  })\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const [logout] = useMutation(\r\n    LOGOUT_MUTATION,\r\n    {\r\n      update: (cache) => cache.writeQuery({\r\n        query: CURRENT_USER_QUERY,\r\n        data: { currentUser: null },\r\n      }),\r\n    },\r\n  );\r\n  const menuId = 'account-menu';\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const handleProfileExit = () => {\r\n    logout()\r\n    handleMenuClose()\r\n  }\r\n  const handleProfileMenuOpen = (e) => {\r\n    setAnchorEl(e.currentTarget)\r\n  }\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      {/* <MenuItem onClick={handleMenuClose}>Профиль</MenuItem> */}\r\n      <MenuItem onClick={handleProfileExit}>Выход</MenuItem>\r\n    </Menu>\r\n  );\r\n  return (\r\n    <Fragment>\r\n      <IconButton\r\n        edge=\"end\"\r\n        aria-label=\"account of current user\"\r\n        aria-controls={menuId}\r\n        aria-haspopup=\"true\"\r\n        onClick={handleProfileMenuOpen}\r\n        color=\"inherit\"\r\n      >\r\n        <Badge badgeContent={0} color=\"secondary\">\r\n          <Tooltip\r\n            title={currentUser.username}\r\n          >\r\n            <AccountCircle />\r\n          </Tooltip>\r\n        </Badge>\r\n      </IconButton>\r\n      { renderMenu}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default UserProfile","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport AlarmOnIcon from '@material-ui/icons/AlarmOn';\r\nimport PieChartIcon from '@material-ui/icons/PieChart';\r\n\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n});\r\n\r\nexport default function ServiceMenu({ open, close }) {\r\n  const classes = useStyles();\r\n  const list = () => (\r\n    <div\r\n      className={clsx(classes.list)}\r\n      role=\"presentation\"\r\n      onClick={close}\r\n      onKeyDown={close}\r\n    >\r\n      <List>\r\n        <Typography variant=\"overline\" style={{ fontSize: '10px' }}>\r\n          подсистема опросов\r\n        </Typography>\r\n        <NavLink to='analyze'>\r\n          <ListItem button key={1}>\r\n            <ListItemIcon><PieChartIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Анализатор\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        {/* <NavLink to='tester'>\r\n          <ListItem button key={1}>\r\n            <ListItemIcon><AlarmOnIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Тест интерфейса\" />\r\n          </ListItem>\r\n        </NavLink> */}\r\n        <ListItem button key={1}>\r\n          <ListItemIcon><PhoneIcon /></ListItemIcon>\r\n          <ListItemText primary=\"Генератор номеров\" />\r\n        </ListItem>\r\n        <NavLink to='poll-app-settings'>\r\n          <ListItem button key={1}>\r\n            <ListItemIcon><SettingsIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Настройки\" />\r\n          </ListItem>\r\n        </NavLink>\r\n        <Typography variant=\"overline\" style={{ fontSize: '10px' }}>\r\n          общие\r\n        </Typography>\r\n        <Divider />\r\n        <NavLink to='settings/users'>\r\n          <ListItem button key={1}>\r\n            <ListItemIcon><GroupIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Пользователи\" />\r\n          </ListItem>\r\n        </NavLink>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Drawer anchor={'left'} open={open} onClose={close} className=\"left-app-menu\">\r\n      {list('left')}\r\n    </Drawer>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport UserProfile from '../../containers/UserProfile'\r\nimport ServiceMenu from '../ServiceMenu'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('xs')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  sectionDesktop: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  link: {\r\n    color: 'white',\r\n    textDecoration: 'none'\r\n  }\r\n}));\r\n\r\nconst HomeBar = ({ title }) => {\r\n  const classes = useStyles();\r\n  const [appAnchorEl, setAppAnchorEl] = React.useState(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n  const [menuOpen, setMenuOpen] = React.useState(false)\r\n\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n  const isAppMenuOpen = Boolean(appAnchorEl);\r\n\r\n  const handleAppsMenuOpen = (event) => {\r\n    setAppAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n\r\n  const handleAppMenuClose = () => {\r\n    setAppAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  }\r\n\r\n  const handleMobileMenuOpen = (event) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const openServiceMenu = (e) => {\r\n    setMenuOpen(true)\r\n  }\r\n\r\n  const closeServiceMenu = (e) => {\r\n    setMenuOpen(false)\r\n  }\r\n\r\n  const appsMenuId = 'primary-apps-menu';\r\n\r\n  const renderAppsMenu = (\r\n    <Menu\r\n      anchorEl={appAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={appsMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isAppMenuOpen}\r\n      onClose={handleAppMenuClose}\r\n    >\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_1</MenuItem>\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_2</MenuItem>\r\n    </Menu>\r\n  )\r\n\r\n  const mobileMenuId = 'primary-account-menu-mobile';\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem>\r\n        <IconButton color=\"inherit\">\r\n          <Badge badgeContent={0} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Уведомления</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={handleAppsMenuOpen}>\r\n        <IconButton\r\n          aria-label=\"more apps\"\r\n          aria-controls=\"primary-apps-menu\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\">\r\n          <AppsIcon />\r\n        </IconButton>\r\n        <p>Приложения</p>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <UserProfile />\r\n        <p>Profile</p>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            onClick={openServiceMenu}\r\n            aria-label=\"open drawer\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.sectionDesktop}>\r\n            <IconButton color=\"inherit\">\r\n              <Badge badgeContent={0} color=\"secondary\">\r\n                <NotificationsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <IconButton\r\n              aria-label=\"apps\"\r\n              aria-controls={appsMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleAppsMenuOpen}\r\n              color=\"inherit\">\r\n              <Badge badgeContent={0} color=\"secondary\">\r\n                <AppsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <UserProfile />\r\n          </div>\r\n          <div className={classes.sectionMobile}>\r\n            <IconButton\r\n              aria-label=\"show more\"\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleMobileMenuOpen}\r\n              color=\"inherit\"\r\n            >\r\n              <MoreIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <ServiceMenu open={menuOpen} close={closeServiceMenu} />\r\n      {renderMobileMenu}\r\n      {renderAppsMenu}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeBar","import React from 'react';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    backgroundColor: '#44b700',\r\n    color: '#44b700',\r\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n    '&::after': {\r\n      position: 'absolute',\r\n      top: '-1px',\r\n      left: '-1px',\r\n      width: '100%',\r\n      height: '100%',\r\n      borderRadius: '50%',\r\n      animation: '$ripple 1.2s infinite ease-in-out',\r\n      border: '1px solid currentColor',\r\n      content: '\"\"',\r\n    },\r\n  },\r\n  '@keyframes ripple': {\r\n    '0%': {\r\n      transform: 'scale(.8)',\r\n      opacity: 1,\r\n    },\r\n    '100%': {\r\n      transform: 'scale(2.4)',\r\n      opacity: 0,\r\n    },\r\n  },\r\n}))(Badge);\r\n\r\nconst useStyles = makeStyles(({\r\n  root: {\r\n    display: 'flex'\r\n  },\r\n  avatar: {\r\n    backgroundColor: data => data.color\r\n  }\r\n}));\r\n\r\nconst ActiveAvatar = ({ data }) => {\r\n  const classes = useStyles(data);\r\n  if (data.active) {\r\n    return (\r\n      <div className={classes.root}>\r\n        <StyledBadge\r\n          overlap=\"circle\"\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'right',\r\n          }}\r\n          variant=\"dot\"\r\n        >\r\n          <Avatar className={classes.avatar}>\r\n            <span className=\"poll-liter-title\">{data.liter}</span>\r\n          </Avatar>\r\n        </StyledBadge>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <Avatar className={classes.avatar}>\r\n        {data.liter}\r\n      </Avatar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ActiveAvatar","export const pollWays = [\r\n  'Интервьюирование',\r\n  'Анкетирование',\r\n  'Телефонный',\r\n  'WEB'\r\n]\r\n\r\nexport const pollTypes = [\r\n  'Всероссийский',\r\n  'Экспертный'\r\n]","import React, { Fragment } from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PollIcon from '@material-ui/icons/Poll';\r\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport PollAvatar from '../PollAvatar'\r\n\r\nimport { pollWays } from '../../lib/constants'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: '100%',\r\n    margin: '10px 0'\r\n  },\r\n  header: {\r\n    padding: '16px 16px 0 16px'\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    padding: '10px 16px 0 16px'\r\n  },\r\n}));\r\n\r\nconst PollCard = ({ data }) => {\r\n  const classes = useStyles();\r\n  const Results = () => {\r\n    return (\r\n      <Tooltip title=\"Результаты\">\r\n        <NavLink to={`/results/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <PollIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  const Drive = () => {\r\n    return (\r\n      <Tooltip title=\"Ввод результатов\">\r\n        <NavLink to={`/drive/${data.id}/${data.code}`}>\r\n          <IconButton >\r\n            <AssignmentTurnedInIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  const Attachment = () => {\r\n    return (\r\n      <Tooltip title=\"Файлы\">\r\n        <NavLink to={`/attachment/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  const Settings = () => {\r\n    return (\r\n      <Tooltip title=\"Настройки опроса\">\r\n        <NavLink to={`/poll-settings/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <SettingsIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  const Wiki = () => {\r\n    return (\r\n      <Tooltip title=\"Заметки\">\r\n        <NavLink to={`/poll-wiki/${data.id}/${data.code}`}>\r\n          <IconButton>\r\n            <LibraryBooksIcon />\r\n          </IconButton>\r\n        </NavLink>\r\n      </Tooltip>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Card className={classes.root}>\r\n        <CardHeader className={classes.header}\r\n          avatar={\r\n            <PollAvatar data={data} />\r\n          }\r\n          action={\r\n            <Settings />\r\n          }\r\n          title={data.code + ': ' + data.title}\r\n          subheader={data.startDate + ' - ' + data.endDate}\r\n        />\r\n        <CardContent className={classes.content}>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12} sm={6}>\r\n              <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                Метод проведения: {pollWays[data.way]}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                Респондентов: {data.sample}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <CardActions disableSpacing>\r\n          <Grid container item xs={12}>\r\n            <Results />\r\n            {data.cities.length ?\r\n              <Drive /> :\r\n              <Tooltip title=\"Города устанавливаются в настройках опроса\">\r\n                <Typography variant=\"overline\" display=\"block\" gutterBottom className=\"empty-cities-warning\">\r\n                  настройте города\r\n              </Typography>\r\n              </Tooltip>\r\n            }\r\n\r\n          </Grid>\r\n          <Grid container item xs={12} justify=\"flex-end\">\r\n            <Attachment />\r\n            <Wiki />\r\n          </Grid>\r\n        </CardActions>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PollCard","import React from 'react'\r\nimport PollCard from '../PollCard'\r\n\r\nconst ListOfPolls = ({ data }) => {\r\n  return data.polls.map((poll, i) => (\r\n    <PollCard key={i} data={poll} />\r\n  ))\r\n}\r\n\r\nexport default ListOfPolls","import React, { useRef, useEffect, useState } from 'react'\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Button from '@material-ui/core/Button';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport xmlparser from '../../lib/utils'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst XmlImport = ({ field, ...props }) => {\r\n  const { errorMessage, touched, setFieldValue } = props;\r\n  const { name, value, onChange, onBlur } = field;\r\n  const [processing, setProcessing] = useState(false)\r\n  const [file, setFile] = useState(undefined)\r\n  const [count, setCount] = useState(0)\r\n  const classes = useStyles();\r\n  const fileUpload = useRef();\r\n  let fileReader\r\n\r\n  const upload = () => {\r\n    if (fileUpload) {\r\n      fileUpload.current.click();\r\n    }\r\n  }\r\n\r\n  const handleChg = (e) => {\r\n    e.preventDefault()\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        const xmlText = reader.result\r\n        const xml = xmlparser(xmlText)\r\n        if (xml) {\r\n          setProcessing(false)\r\n          const regEx = /^(\\d{2}).(\\d{2}).(\\d{4})$/;\r\n          setFieldValue('title', xml.title)\r\n          setFieldValue('startdate', xml.start.replace(regEx, `$3-$2-$1`))\r\n          setFieldValue('enddate', xml.end.replace(regEx, `$3-$2-$1`))\r\n          setFieldValue('code', xml.code)\r\n          setFieldValue('xmlfile', file)\r\n        } else {\r\n          console.log('Неправильный формат XML');\r\n          setFieldValue('mainconfig', '')\r\n          return\r\n        }\r\n      }\r\n      reader.readAsText(file);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Backdrop className={classes.backdrop} open={processing} >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n\r\n      <input\r\n        style={{ display: 'none' }}\r\n        id={name}\r\n        name={name}\r\n        type=\"file\"\r\n        id={name}\r\n        ref={fileUpload}\r\n        onBlur={onBlur}\r\n        // onChange={handleChange}\r\n        onInput={handleChg}\r\n      />\r\n      <Badge\r\n        color=\"secondary\"\r\n        badgeContent={count}\r\n        style={{ top: '5px' }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"default\"\r\n          startIcon={<PublishIcon />}\r\n          onClick={upload}\r\n        >\r\n          XML\r\n        </Button>\r\n      </Badge>\r\n      {errorMessage ? (\r\n        <Typography variant=\"caption\" color=\"error\">\r\n          {errorMessage}\r\n        </Typography>\r\n      ) : null}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default XmlImport","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  small: {\r\n    position: 'fixed',\r\n    bottom: '30px',\r\n    right: '30px'\r\n  }\r\n}));\r\n\r\nconst AddFub = ({ onClick }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.small}>\r\n      <Fab color=\"secondary\" aria-label=\"add\" onClick={onClick}>\r\n        <AddIcon />\r\n      </Fab>\r\n    </div>\r\n  );\r\n}\r\nexport default AddFub","function testXml(xmlString) {\r\n  var parser = new DOMParser();\r\n  var docError = parser.parseFromString('INVALID', 'text/xml');\r\n  var parsererrorNS = docError.getElementsByTagName(\"parsererror\")[0].namespaceURI;\r\n  var doc = parser.parseFromString(xmlString, 'text/xml');\r\n  if (doc.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0) {\r\n    return false\r\n  }\r\n  return doc;\r\n}\r\n\r\nconst xmlparser = (xmlString) => {\r\n  const xml = testXml(xmlString)\r\n  if (xml) {\r\n    let data = {}\r\n    const element = xml.getElementsByTagName(\"opros\")[0]\r\n    data.title = element.getAttribute('name')\r\n    data.code = element.getAttribute('cod')\r\n    data.start = element.getAttribute('start_date')\r\n    data.end = element.getAttribute('end_date')\r\n    data.structure = {\r\n      data: ''\r\n    }\r\n    return data\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default xmlparser","import React, { Fragment } from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Box, Typography } from \"@material-ui/core\";\r\n\r\nconst LoadingState = (props) => {\r\n  let imageWidth;\r\n  let imageHeight;\r\n  let variant;\r\n\r\n  switch (props.size) {\r\n    case \"small\":\r\n      imageWidth = 40;\r\n      imageHeight = 40;\r\n      variant = \"h6\";\r\n      break;\r\n\r\n    case \"medium\":\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n\r\n    case \"large\":\r\n      imageWidth = 100;\r\n      imageHeight = 100;\r\n      variant = \"h4\";\r\n      break;\r\n\r\n    default:\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n  }\r\n\r\n  if (props.type === \"page\") {\r\n    return (\r\n      <Box\r\n        style={{ transform: \"translate(-50%, -50%)\" }}\r\n        position=\"absolute\"\r\n        top=\"50%\"\r\n        left=\"50%\"\r\n        textAlign=\"center\"\r\n      >\r\n        {props.image && (\r\n          <Box\r\n            clone\r\n            mb={props.title || props.description ? 2 : 0}\r\n            width={`${imageWidth}%`}\r\n            height={`${imageHeight}%`}\r\n          >\r\n            {props.image}\r\n          </Box>\r\n        )}\r\n\r\n        {props.title && (\r\n          <Box mb={!props.description && props.button ? 2 : 0}>\r\n            <Typography variant={variant}>{props.title}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.description && (\r\n          <Box mb={props.button && 2}>\r\n            <Typography variant=\"body1\">{props.description}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.button && props.button}\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (props.type === \"card\") {\r\n    return (\r\n      <Box padding={props.padding} textAlign=\"center\">\r\n        {props.image && (\r\n          <Box\r\n            clone\r\n            mb={props.title || props.description ? 2 : 0}\r\n            width={`${imageWidth}%`}\r\n            height={`${imageHeight}%`}\r\n          >\r\n            {props.image}\r\n          </Box>\r\n        )}\r\n\r\n        {props.title && (\r\n          <Box mb={!props.description && props.button ? 2 : 0}>\r\n            <Typography variant={variant}>{props.title}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.description && (\r\n          <Box mb={props.button && 2}>\r\n            <Typography variant=\"body1\">{props.description}</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {props.button && props.button}\r\n      </Box>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nLoadingState.defaultProps = {\r\n  image: <CircularProgress />,\r\n  title: 'Загрузка',\r\n  description: 'Подождите пожалуйста',\r\n  type: \"page\",\r\n  size: \"medium\",\r\n  padding: 2,\r\n};\r\n\r\n\r\nexport default LoadingState","import React from 'react'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst LoadingStatus = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Backdrop className={classes.backdrop} open={true}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  )\r\n}\r\n\r\nexport default LoadingStatus","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst SystemNoti = (props) => {\r\n\r\n  const Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n  return (\r\n    <Snackbar open={props.open} autoHideDuration={props.duration} onClose={props.close}>\r\n      <Alert severity={props.type} onClose={props.close}>\r\n        {props.text}\r\n      </Alert>\r\n    </Snackbar>\r\n\r\n  )\r\n}\r\n\r\nSystemNoti.defaultProps = {\r\n  type: 'error',\r\n  duration: 4000\r\n}\r\n\r\nexport default SystemNoti","import React, { Fragment } from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Box, Typography } from \"@material-ui/core\";\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  popover: {\r\n    pointerEvents: 'none',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n\r\nconst ErrorState = (props) => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const classes = useStyles();\r\n\r\n  const handlePopoverOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handlePopoverClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n\r\n  const PopOver = ({ open }) => {\r\n    return (\r\n      <Popover\r\n        id=\"mouse-over-popover\"\r\n        className={classes.popover}\r\n        classes={{\r\n          paper: classes.paper,\r\n        }}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left',\r\n        }}\r\n        onClose={handlePopoverClose}\r\n        disableRestoreFocus\r\n      >\r\n        <Typography>{}</Typography>\r\n      </Popover>\r\n    )\r\n  }\r\n\r\n  let imageWidth;\r\n  let imageHeight;\r\n  let variant;\r\n\r\n  switch (props.size) {\r\n    case \"small\":\r\n      imageWidth = 40;\r\n      imageHeight = 40;\r\n      variant = \"h6\";\r\n      break;\r\n\r\n    case \"medium\":\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n\r\n    case \"large\":\r\n      imageWidth = 100;\r\n      imageHeight = 100;\r\n      variant = \"h4\";\r\n      break;\r\n\r\n    default:\r\n      imageWidth = 60;\r\n      imageHeight = 60;\r\n      variant = \"h5\";\r\n      break;\r\n  }\r\n\r\n  if (props.type === \"page\") {\r\n    return (\r\n      <Fragment>\r\n        <PopOver open={open} />\r\n        <Box\r\n          style={{ transform: \"translate(-50%, -50%)\" }}\r\n          position=\"absolute\"\r\n          top=\"50%\"\r\n          left=\"50%\"\r\n          textAlign=\"center\"\r\n        >\r\n          {props.image && (\r\n            <Box\r\n              clone\r\n              mb={props.title || props.description ? 2 : 0}\r\n              width={`${imageWidth}%`}\r\n              height={`${imageHeight}%`}\r\n            >\r\n              {props.image}\r\n            </Box>\r\n          )}\r\n\r\n          {props.title && (\r\n            <Box mb={!props.description && props.button ? 2 : 0}>\r\n              <Typography variant={variant}>{props.title}</Typography>\r\n            </Box>\r\n          )}\r\n\r\n          {props.description && (\r\n            <Box mb={props.button && 2}>\r\n              <Typography variant=\"body1\">{props.description}</Typography>\r\n            </Box>\r\n          )}\r\n          <HelpOutlineIcon\r\n            onMouseEnter={handlePopoverOpen}\r\n            onMouseLeave={handlePopoverClose}\r\n          />\r\n\r\n          {props.button && props.button}\r\n        </Box>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  if (props.type === \"card\") {\r\n    return (\r\n      <Fragment>\r\n        <PopOver open={open} />\r\n        <Box padding={props.padding} textAlign=\"center\">\r\n          {props.image && (\r\n            <Box\r\n              clone\r\n              mb={props.title || props.description ? 2 : 0}\r\n              width={`${imageWidth}%`}\r\n              height={`${imageHeight}%`}\r\n            >\r\n              {props.image}\r\n            </Box>\r\n          )}\r\n\r\n          {props.title && (\r\n            <Box mb={!props.description && props.button ? 2 : 0}>\r\n              <Typography variant={variant}>{props.title}</Typography>\r\n            </Box>\r\n          )}\r\n\r\n          {props.description && (\r\n            <Box mb={props.button && 2}>\r\n              <Typography variant=\"body1\">{props.description}</Typography>\r\n            </Box>\r\n          )}\r\n          <HelpOutlineIcon\r\n            onMouseEnter={handlePopoverOpen}\r\n            onMouseLeave={handlePopoverClose}\r\n          />\r\n\r\n          {props.button && props.button}\r\n        </Box>\r\n      </Fragment>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nErrorState.defaultProps = {\r\n  title: 'Ошибка',\r\n  description: 'Что-то пошло не так',\r\n  type: \"page\",\r\n  size: \"medium\",\r\n  padding: 2,\r\n};\r\n\r\n\r\nexport default ErrorState","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    position: 'fixed',\r\n    bottom: '30px',\r\n    right: '30px'\r\n  },\r\n  speedDial: {\r\n    position: 'absolute',\r\n    bottom: theme.spacing(2),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst actions = [\r\n  { icon: <FileCopyIcon />, name: 'Copy' },\r\n  { icon: <SaveIcon />, name: 'Save' },\r\n  { icon: <PrintIcon />, name: 'Print' },\r\n  { icon: <ShareIcon />, name: 'Share' },\r\n  { icon: <FavoriteIcon />, name: 'Like' },\r\n];\r\n\r\nexport default function SpeedDials() {\r\n  const classes = useStyles();\r\n  const [direction, setDirection] = React.useState('up');\r\n  const [open, setOpen] = React.useState(false);\r\n  const [hidden, setHidden] = React.useState(false);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Backdrop open={open} />\r\n\r\n      <SpeedDial\r\n        ariaLabel=\"SpeedDial example\"\r\n        className={classes.speedDial}\r\n        hidden={hidden}\r\n        icon={<SpeedDialIcon />}\r\n        onClose={handleClose}\r\n        onOpen={handleOpen}\r\n        open={open}\r\n        direction={direction}\r\n      >\r\n        {actions.map((action) => (\r\n          <SpeedDialAction\r\n            key={action.name}\r\n            icon={action.icon}\r\n            tooltipTitle={action.name}\r\n            tooltipOpen\r\n            onClick={handleClose}\r\n          />\r\n        ))}\r\n      </SpeedDial>\r\n    </div>\r\n  );\r\n}\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const GET_ALL_ACTIVE_POLLS = gql`\r\n  query {\r\n    polls {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      color\r\n      startDate\r\n      endDate\r\n      sample\r\n      way\r\n      type\r\n      complete\r\n      questionsCount\r\n      answersCount\r\n      active\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const ADD_NEW_POLL = gql`\r\n  mutation ($newPoll: PollWithConfig!, $poolOfQuestions: [QuestionInput], $logic: LogicInput, $topic: [TopicInput]) {\r\n    addPoll(poll: $newPoll, questions: $poolOfQuestions, logic: $logic, topic: $topic) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      color\r\n      startDate\r\n      endDate\r\n      sample\r\n      way\r\n      type\r\n      complete\r\n      questionsCount\r\n      answersCount\r\n      active\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\nimport Container from '@material-ui/core/Container'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport ListOfPolls from './components/ListOfPolls'\r\nimport AddPollLogic from './components/AddPollLogic'\r\nimport LoadingState from '../../components/LoadingState'\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\nimport SystemNoti from '../../components/SystemNoti'\r\nimport ErrorState from '../../components/ErrorState'\r\n\r\nimport TestBtn from './components/TestBtn'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_ACTIVE_POLLS } from \"./queries\"\r\nimport { ADD_NEW_POLL } from './mutations'\r\n\r\nconst PollHome = () => {\r\n  const [noti, setNoti] = useState(false)\r\n\r\n  const {\r\n    loading: pollsLoading,\r\n    error: pollsError,\r\n    data: pollsData\r\n  } = useQuery(GET_ALL_ACTIVE_POLLS)\r\n\r\n  const [addPoll, {\r\n    loading: addLoading\r\n  }] = useMutation(ADD_NEW_POLL, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Добавить не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data }) => {\r\n      const { polls } = cache.readQuery({ query: GET_ALL_ACTIVE_POLLS })\r\n      cache.writeQuery({ query: GET_ALL_ACTIVE_POLLS, data: { polls: [...polls, data.addPoll] } })\r\n    }\r\n  })\r\n\r\n  if (pollsLoading) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (pollsError) return (\r\n    <ErrorState\r\n      title=\"Что-то пошло не так\"\r\n      description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n    />\r\n  );\r\n\r\n  const Loading = () => {\r\n    if (addLoading)\r\n      return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n\r\n      <Container maxWidth=\"md\">\r\n        <ListOfPolls data={pollsData} />\r\n      </Container>\r\n      <TestBtn />\r\n      {/* <AddPollLogic addPoll={addPoll} /> */}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollHome","import React, { Fragment } from 'react'\r\n\r\nimport HomeBar from '../components/HomeBar'\r\nimport PollHome from '../modules/PollHome'\r\n\r\nconst HomePage = () => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <HomeBar title={\"Опросы\"} />\r\n      <PollHome />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default HomePage","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    textDecoration: 'none'\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('xs')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  sectionDesktop: {\r\n    display: 'flex'\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  arrow: {\r\n    color: 'white',\r\n    textDecoration: 'none'\r\n  }\r\n}));\r\n\r\nconst SettingBar = ({ title }) => {\r\n  const classes = useStyles();\r\n  const [appAnchorEl, setAppAnchorEl] = React.useState(null);\r\n  const isAppMenuOpen = Boolean(appAnchorEl);\r\n\r\n  const handleAppsMenuOpen = (event) => {\r\n    setAppAnchorEl(event.currentTarget);\r\n  };\r\n  const handleAppMenuClose = () => {\r\n    setAppAnchorEl(null);\r\n  }\r\n\r\n  const appsMenuId = 'primary-apps-menu';\r\n\r\n  const renderAppsMenu = (\r\n    <Menu\r\n      anchorEl={appAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={appsMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isAppMenuOpen}\r\n      onClose={handleAppMenuClose}\r\n    >\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_1</MenuItem>\r\n      <MenuItem onClick={handleAppMenuClose}>ПУСТО_2</MenuItem>\r\n    </Menu>\r\n  )\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <NavLink to=\"/\">\r\n            <IconButton\r\n              edge=\"start\"\r\n              className={classes.menuButton}\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n            >\r\n              <ArrowBackIcon className={classes.arrow} />\r\n            </IconButton>\r\n          </NavLink>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.sectionDesktop}>\r\n            <IconButton\r\n              edge=\"end\"\r\n              aria-label=\"apps\"\r\n              aria-controls={appsMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleAppsMenuOpen}\r\n              color=\"inherit\">\r\n              <AppsIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {renderAppsMenu}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingBar","import React, { useRef, useEffect } from 'react'\r\n\r\nconst FreeAnswer = ({ answer, focusHandler, blurHandler }) => {\r\n  const textInput = useRef(null);\r\n  useEffect(() => {\r\n    if (answer.focus) {\r\n      textInput.current.focus()\r\n    }\r\n    if (answer.freeAnswerText !== '') {\r\n      textInput.current.value = answer.freeAnswerText\r\n    }\r\n  }, [])\r\n\r\n  const handlerInput = (e) => {\r\n    // замена запятой на \";\"\r\n    const regRex = /,/gi\r\n    let keyCode = e.keyCode\r\n    if (keyCode === 13) {\r\n      const val = textInput.current.value.replaceAll(regRex, ';')\r\n      textInput.current.value = val\r\n      e.currentTarget.blur()\r\n      return\r\n    } else if (keyCode === 27) {\r\n      if (textInput.current.value !== '') {\r\n        textInput.current.value = ''\r\n        return\r\n      }\r\n      e.currentTarget.blur()\r\n      return\r\n    }\r\n  }\r\n  if (answer.showFreeAnswer) {\r\n    return (\r\n      <span>\r\n        <input\r\n          className=\"free-answer\"\r\n          type=\"text\"\r\n          ref={textInput}\r\n          data-code={answer.code}\r\n          data-keycode={answer.keyCode}\r\n          placeholder=\"Введите свободный ответ\"\r\n          onKeyUp={handlerInput}\r\n          onFocus={focusHandler}\r\n          onBlur={blurHandler}\r\n        />\r\n      </span>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nexport default FreeAnswer","import React, { Fragment, useRef } from 'react'\r\nimport FreeAnswer from '../FreeAnswer'\r\nimport FlashOnSharpIcon from '@material-ui/icons/FlashOnSharp';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst Answer = ({ answer, clickHandler, focusHandler, blurHandler, settings }) => {\r\n  const answerRef = useRef(null)\r\n\r\n  let answerCls = ['answer-wrap']\r\n  let answerTitle = ['answer-title']\r\n  if (answer.selected) {\r\n    answerCls.push('selected')\r\n  }\r\n  if (answer.disabled) {\r\n    answerTitle.push('disabled')\r\n  }\r\n\r\n  const click = () => {\r\n    clickHandler(answerRef.current)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div onClick={(e) => click(e)}\r\n        className={answerCls.join(' ')}\r\n        ref={answerRef}\r\n        data-code={answer.keyCode} >\r\n        <div className={\"answer-title\"}>\r\n          <span className={\"answer-key\"}>{answer.showIndex}</span>\r\n          <span> </span>\r\n          {settings.codesShow &&\r\n            <span className={\"answer-code\"} >{answer.code}</span>\r\n          }\r\n          <span> - </span>\r\n          <span className={answerTitle.join(' ')}>{answer.title}</span>\r\n          <span className=\"free-answer-icon\">{answer.freeAnswer ? <EditIcon fontSize=\"small\" /> : null}</span>\r\n          <span className=\"answer-exclude-message\">{answer.excludeM}</span>\r\n        </div>\r\n        <div>\r\n          {answer.showFreeAnswer && (\r\n            <FreeAnswer\r\n              answer={answer}\r\n              focus={answer.focus}\r\n              focusHandler={focusHandler}\r\n              blurHandler={blurHandler}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Answer","import React, { useState, useEffect } from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 500,\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n  errorText: {\r\n    color: 'red'\r\n  }\r\n}));\r\n\r\nexport default function Tags({ data, limit, settings, multipleHandler }) {\r\n  const classes = useStyles();\r\n  const [answers, setAnswers] = useState([])\r\n  const [codes, setCodes] = useState([])\r\n  const [error, setError] = useState({\r\n    state: false,\r\n    text: ''\r\n  })\r\n\r\n  useEffect(() => {\r\n    const defVal = data.filter(val => {\r\n      if (val.selected) return val\r\n    })\r\n    const codesOfAnswers = data.map(val => val.code)\r\n    setCodes(codesOfAnswers)\r\n    setAnswers(defVal)\r\n  }, [])\r\n\r\n  const handleAnswerSelect = (e, value, reason) => {\r\n    switch (reason) {\r\n      case 'select-option':\r\n        if (value.length > limit) {\r\n          setError({ state: true, text: 'Максимальное количество ответов' })\r\n          return\r\n        }\r\n        setAnswers(value)\r\n        setError({ ...error, state: false })\r\n        break\r\n      case 'remove-option':\r\n        setAnswers(value)\r\n        setError({ ...error, state: false })\r\n        break\r\n      case 'clear':\r\n        setAnswers([])\r\n        setError({ ...error, state: false })\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const blurHandler = (e) => {\r\n    setError({ ...error, state: false })\r\n    multipleHandler(answers, codes)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Autocomplete\r\n        multiple={limit > 1}\r\n        id=\"tags-standard\"\r\n        options={data}\r\n        onChange={handleAnswerSelect}\r\n        value={answers}\r\n        getOptionLabel={(option) => option.title}\r\n        getOptionDisabled={(option) => option.disabled}\r\n        renderOption={(option) => {\r\n          if (settings.codesShow) {\r\n            return <span><span style={{ fontSize: '10px' }}>{option.code}</span> - {option.title}</span>\r\n          }\r\n          return option.title\r\n        }}\r\n        onBlur={blurHandler}\r\n        renderTags={(value, getTagProps) =>\r\n          value.map((option, index) => (\r\n            <Chip\r\n              {...getTagProps({ index })}\r\n              variant=\"outlined\"\r\n              key={index}\r\n              label={settings.codesShow ?\r\n                <span><span style={{ fontSize: '10px' }}>{option.code}</span> - {option.title}</span> :\r\n                <span>{option.title}</span>\r\n              }\r\n            />\r\n          ))\r\n        }\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            error={error.state}\r\n            variant=\"standard\"\r\n            label=\"Выберите ответы\"\r\n            helperText={error.state ? error.text : ''}\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}","import React, { Fragment, useState } from 'react'\r\nimport Answer from \"../Answer\";\r\nimport Tags from '../MultipleAnswers'\r\n\r\nconst Question = ({ count, question, clickHandler, focusHandler, blurHandler, multipleHandler, settings }) => {\r\n  function FlatAnswer() {\r\n    return (\r\n      question.answers.map((answer, i) => (\r\n        <Answer key={i} answer={answer}\r\n          clickHandler={clickHandler}\r\n          focusHandler={focusHandler}\r\n          blurHandler={blurHandler}\r\n          settings={settings}\r\n        />\r\n      )))\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <span className=\"drive-question-card\">\r\n        <h3 className=\"question-title-card\" >\r\n          <span className={\"question-number\"}>{count + 1}</span>\r\n          <span> - </span>\r\n          {question.title}</h3>\r\n        <div>{\r\n          !question.mega ?\r\n            question.answers.map((answer, i) => (\r\n              <Answer key={i} answer={answer}\r\n                clickHandler={clickHandler}\r\n                focusHandler={focusHandler}\r\n                blurHandler={blurHandler}\r\n                settings={settings}\r\n              />\r\n            )) : <Tags data={question.answers} limit={question.limit} settings={settings} multipleHandler={multipleHandler} />\r\n        }\r\n        </div>\r\n      </span>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Question","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst FinishDialog = ({ open, handleClose, finishAll, confirm }) => {\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Данная анкета завершена.\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Кажется данная анкета закончена. Перейти к другой анкете?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={finishAll} color=\"primary\">\r\n            Закончить\r\n          </Button>\r\n          <Button onClick={confirm} color=\"primary\" autoFocus>\r\n            Следующая\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FinishDialog","export const serviceBtns = [\r\n  8, 9, 16, 17, 18, 19, 20, 32,\r\n  33, 34, 35, 36, 38, 40, 91, 106,\r\n  107, 109, 110, 112, 113, 114, 115,\r\n  116, 117, 118, 119, 120, 121, 122, 123, 144\r\n];\r\n\r\nexport const resetBtn = [\r\n  27\r\n]\r\n\r\nexport const confirmBtns = [\r\n  48,\r\n  96,\r\n  13\r\n];\r\n\r\nexport const castCodes = {\r\n  97: 49,\r\n  98: 50,\r\n  99: 51,\r\n  100: 52,\r\n  101: 53,\r\n  102: 54,\r\n  103: 55,\r\n  104: 56,\r\n  105: 57\r\n};\r\n\r\nexport const answersCodes = [\r\n  37,\r\n  39,\r\n  49,\r\n  50,\r\n  51,\r\n  52,\r\n  53,\r\n  54,\r\n  55,\r\n  56,\r\n  57,\r\n  81,\r\n  87,\r\n  69,\r\n  82,\r\n  84,\r\n  89,\r\n  85,\r\n  73,\r\n  79,\r\n  80,\r\n  65,\r\n  83,\r\n  68,\r\n  70,\r\n  71,\r\n  72,\r\n  74,\r\n  75,\r\n  76,\r\n  90,\r\n  88,\r\n  67,\r\n  97,\r\n  98,\r\n  99,\r\n  100,\r\n  101,\r\n  102,\r\n  103,\r\n  104,\r\n  105\r\n]\r\n\r\nexport const keycodes = [\r\n  ['1', 49],\r\n  ['2', 50],\r\n  ['3', 51],\r\n  ['4', 52],\r\n  ['5', 53],\r\n  ['6', 54],\r\n  ['7', 55],\r\n  ['8', 56],\r\n  ['9', 57],\r\n  ['Q', 81],\r\n  ['W', 87],\r\n  ['E', 69],\r\n  ['R', 82],\r\n  ['T', 84],\r\n  ['Y', 89],\r\n  ['U', 85],\r\n  ['I', 73],\r\n  ['O', 79],\r\n  ['P', 80],\r\n  ['A', 65],\r\n  ['S', 83],\r\n  ['D', 68],\r\n  ['F', 70],\r\n  ['G', 71],\r\n  ['H', 72],\r\n  ['J', 74],\r\n  ['K', 75],\r\n  ['L', 76],\r\n  ['Z', 90],\r\n  ['X', 88],\r\n  ['C', 67],\r\n  ['V', 86],\r\n  ['B', 66],\r\n  ['N', 78],\r\n  ['M', 77]\r\n];","import { castCodes, serviceBtns, resetBtn, confirmBtns, answersCodes } from './keycodes'\r\n\r\n// приведение клавиш доп.клавиатуры к кодам основной цифровой клавиатуры\r\nfunction cast(keyCode) {\r\n  if (castCodes[keyCode] !== undefined) return castCodes[keyCode];\r\n  return keyCode;\r\n}\r\n\r\nfunction checkAnswerSelected(keyCode) {\r\n  return answersCodes.includes(keyCode)\r\n}\r\n\r\nfunction checkResetBtn(keyCode) {\r\n  return resetBtn.includes(keyCode)\r\n\r\n}\r\n\r\nfunction checkConfirmBtn(keyCode) {\r\n  return confirmBtns.includes(keyCode)\r\n}\r\n\r\nfunction checkServiceBtn(keyCode) {\r\n  return serviceBtns.includes(keyCode)\r\n}\r\n\r\nconst defineSelectedAnswer = (keyCode) => {\r\n  if (checkAnswerSelected(keyCode)) {\r\n    return {\r\n      do: 1,\r\n      trueCode: cast(keyCode)\r\n    }\r\n  }\r\n  if (checkServiceBtn(keyCode)) {\r\n    return {\r\n      do: 4\r\n    }\r\n  }\r\n  if (checkResetBtn(keyCode)) {\r\n    return {\r\n      do: 2\r\n    }\r\n  }\r\n  if (checkConfirmBtn(keyCode)) {\r\n    return {\r\n      do: 3\r\n    }\r\n  }\r\n  return {\r\n    do: 4\r\n  }\r\n}\r\n\r\nexport default defineSelectedAnswer","import { keycodes } from './keycodes'\r\n\r\n// формирует вопрос, на основании логики и ранее сохраненных результатов\r\nconst questionFormation = (poll, count, result, logic, setResults) => {\r\n  const question = poll.questions[count]\r\n  let keyCodesPool = []\r\n  let codesPool = []\r\n\r\n  // проверка на видимость ответа в перечне (ВНЕШНЯЯ ЛОГИКА - видимость)\r\n  const visibleAnswers = logic.invisible ? question.answers.filter(obj => !logic.invisible.includes(obj.code))\r\n    : question.answers\r\n\r\n  // если вопрос пропущен\r\n\r\n  const exclude = logic.criticalExclude ? logic.criticalExclude : false\r\n  let uniqueIn = false\r\n  let selectedIn = false\r\n  let uniqueSelected = false\r\n  const newAnswers = visibleAnswers.map((answer, i) => {\r\n    // надстройка для объекта - ответ\r\n    let suffix = {\r\n      freeAnswer: false,\r\n      showFreeAnswer: false,\r\n      freeAnswerText: '',\r\n      focus: false,\r\n      selected: false,\r\n      disabled: false,\r\n      exclude: [],\r\n      excludeM: ''\r\n    }\r\n    codesPool.push(answer.code)\r\n    // устанавливаем исключения\r\n    if (exclude) {\r\n      // заполняем поле exclude, в котором указаны все коды, которые будут исключены при выборе данного ответа\r\n      for (let code in exclude) {\r\n        if (code === answer.code) {\r\n          suffix = {\r\n            ...suffix,\r\n            exclude: [...suffix.exclude, ...exclude[code]]\r\n          }\r\n        }\r\n        if (exclude[code].includes(answer.code)) {\r\n          suffix = {\r\n            ...suffix,\r\n            exclude: [...suffix.exclude, code]\r\n          }\r\n        }\r\n      }\r\n      // проверяем не исключен ли данный ответ кодами, которые указаны в поле exclude\r\n      suffix.exclude.map(code => {\r\n        if (result.pool.includes(code)) {\r\n          suffix = {\r\n            ...suffix,\r\n            disabled: true,\r\n            excludeM: `противоречит коду ${code}`\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    if (visibleAnswers.length > keycodes.length) {\r\n      keyCodesPool[i] = [i, i + 1]\r\n    } else {\r\n      keyCodesPool[i] = keycodes[i][1]\r\n      suffix = {\r\n        ...suffix,\r\n        showIndex: keycodes[i][0],\r\n        keyCode: keycodes[i][1],\r\n      }\r\n    }\r\n    // восстанавливаем ответы !\r\n    if (result.pool.includes(answer.code)) {\r\n      selectedIn = true\r\n      suffix = {\r\n        ...suffix,\r\n        selected: true\r\n      }\r\n    }\r\n    // проверка на блокировку ответа (ВНЕШНЯЯ ЛОГИКА - уникальность)\r\n    if (logic.unique.includes(answer.code)) {\r\n      uniqueIn = true\r\n      suffix = {\r\n        ...suffix,\r\n        unique: true\r\n      }\r\n    }\r\n    if (logic.unique.includes(answer.code) & result.pool.includes(answer.code)) uniqueSelected = true\r\n\r\n    // проверка на свободный ответ (ВНЕШНЯЯ ЛОГИКА - свободный ответ)\r\n    if (logic.freeAnswers.includes(answer.code)) {\r\n      suffix = {\r\n        ...suffix,\r\n        freeAnswer: true,\r\n        focus: true\r\n      }\r\n    }\r\n    if (result[question.id]) {\r\n      let data = result[question.id].data\r\n      for (let i = 0; i < data.length; i++) {\r\n        if (answer.code === data[i].answerCode && data[i].freeAnswerText !== '') {\r\n          suffix = {\r\n            ...suffix,\r\n            freeAnswer: true,\r\n            showFreeAnswer: true,\r\n            freeAnswerText: data[i].freeAnswerText,\r\n            focus: false\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const resultQ = { ...answer, ...suffix }\r\n    return resultQ\r\n  })\r\n\r\n  // надстройка для объекта - вопрос\r\n  let qSuffix = {\r\n    mega: false,\r\n    megaMltp: false,\r\n    multiple: false                                      // много возможных ответов\r\n  }\r\n\r\n  if (question.limit > 1) {\r\n    qSuffix = {\r\n      ...qSuffix,\r\n      multiple: true\r\n    }\r\n  }\r\n\r\n  // проверка сколько всего ответов в вопросе -> если много, то формируем multiple select\r\n  if (visibleAnswers.length > keycodes.length) {\r\n    qSuffix = {\r\n      ...qSuffix,\r\n      mega: true,\r\n      megaMltp: question.limit\r\n    }\r\n  } else {\r\n    qSuffix = {\r\n      ...qSuffix,\r\n      keyCodesPool\r\n    }\r\n  }\r\n\r\n  const countSkipAnswers = newAnswers.reduce((acum, answer) => {\r\n    return acum + answer.disabled\r\n  }, 0)\r\n\r\n  if (countSkipAnswers === newAnswers.length) {\r\n    setResults(prevState => ({\r\n      ...prevState,\r\n      [question.id]: {\r\n        data: [],\r\n        codesPool,\r\n        count\r\n      }\r\n    }))\r\n    return {\r\n      next: true\r\n    }\r\n  }\r\n\r\n  if (result[question.id] === undefined) {\r\n    setResults(prevState => ({\r\n      ...prevState,\r\n      [question.id]: {\r\n        data: [],\r\n        codesPool,\r\n        count\r\n      }\r\n    }))\r\n  }\r\n\r\n  // определение выбранных ответов и их уникальность для вопроса при восстановлении результатов\r\n  const mAnswers = newAnswers.map((answer, index) => {\r\n    if (selectedIn) {\r\n      if (uniqueIn) {\r\n        if (uniqueSelected) {\r\n          return answer.unique & answer.selected ? answer : { ...answer, disabled: true }\r\n        } else {\r\n          return answer.unique ? { ...answer, disabled: true } : answer\r\n        }\r\n      }\r\n    }\r\n    return answer\r\n  }).map(answer => {\r\n    if (exclude) {\r\n      for (let code in exclude) {\r\n        if (result.pool.includes(code)) {\r\n          if (exclude[code].includes(answer.code)) {\r\n            return { ...answer, disabled: true }\r\n          }\r\n          return answer\r\n        }\r\n      }\r\n\r\n    }\r\n    return answer\r\n  })\r\n\r\n  const data = {\r\n    ...question,\r\n    ...qSuffix,\r\n    answers: mAnswers\r\n  }\r\n\r\n  return {\r\n    next: false,\r\n    data\r\n  }\r\n}\r\n\r\nexport default questionFormation","const beep = (config) => {\r\n  let audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n  config = Object.assign({\r\n    volume: 25 / 100,\r\n    frequency: 3020,\r\n    duration: 150,\r\n    type: 'sine'\r\n  }, config);\r\n\r\n  let oscillator = audioCtx.createOscillator();\r\n  let gainNode = audioCtx.createGain();\r\n  oscillator.connect(gainNode);\r\n  gainNode.connect(audioCtx.destination);\r\n  gainNode.gain.value = config.volume;\r\n  oscillator.frequency.value = config.frequency;\r\n  oscillator.type = config.type;\r\n  oscillator.start();\r\n  setTimeout(\r\n    function () {\r\n      oscillator.stop();\r\n    },\r\n    config.duration\r\n  );\r\n}\r\nexport default beep","import React, { Fragment, useEffect, useState } from 'react'\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport { Grid } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Question from '../Question'\r\nimport FinishDialog from '../FinishDialog';\r\n\r\nimport defineSelectedAnswer from '../../lib/defineSelectedAnswer'\r\nimport questionFormation from '../../lib/questionFormation'\r\nimport beep from '../../lib/beep'\r\n\r\nconst KEY_TYPE = 'keyup'\r\nconst STEP_DELAY = 100\r\nconst MOVE_DELAY = 0\r\n\r\nconst ANSWER_SELECTED = 1\r\nconst RESET_RESULTS = 2\r\nconst CONFIRM_QUESTION = 3\r\nconst SKIP = 4\r\n\r\nconst PollDrive = ({ poll, logics, setCurrentQuestion, saveAndGoBack, saveWorksheet }) => {\r\n  const questionsLimit = poll.questions.length\r\n  const [question, setQuestion] = useState(null)\r\n  const [userSettings, setUserSettings] = useState({\r\n    codesShow: true\r\n  })\r\n  const [direction, setDirection] = useState(1)\r\n  const [logic] = useState(logics)\r\n  const [count, setCount] = useState(0)\r\n  const [results, setResults] = useState(\r\n    {\r\n      pool: []\r\n    }\r\n  )\r\n  const [finish, setFinish] = useState(false)\r\n  const [finishDialog, setFinishDialog] = useState(false)\r\n  const [inlineMessage, setInlineMessage] = useState('')\r\n  const keyUpHandler = ({ target, keyCode }) => {\r\n    if (target.nodeName === 'BODY') {\r\n      const nextStep = defineSelectedAnswer(keyCode)\r\n      switch (nextStep.do) {\r\n        case ANSWER_SELECTED: {\r\n          mainLogic(nextStep.trueCode)\r\n          return\r\n        }\r\n        case CONFIRM_QUESTION: {\r\n          confirmResults()\r\n          return\r\n        }\r\n        case RESET_RESULTS: {\r\n          resetAnswers()\r\n          return\r\n        }\r\n        case SKIP: {\r\n          return                                                    // нажата системная клавиша, не относящаяся к опросу\r\n        }\r\n        default: {\r\n          return\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const confirmResults = () => {\r\n    if (finish) {\r\n      finishRespondent()\r\n    } else {\r\n      if (results[question.id].data.length) {\r\n        goToNext()\r\n        return\r\n      }\r\n      beep()\r\n    }\r\n  }\r\n\r\n  const goToNext = () => {\r\n    setDirection(1)\r\n    if (count < questionsLimit - 1) {\r\n      setCount(count + 1)\r\n    } else {\r\n      setCount(0)\r\n    }\r\n  }\r\n\r\n  const goToPrevious = () => {\r\n    setDirection(0)\r\n    if (count === 0) {\r\n      setCount(questionsLimit - 1)\r\n    } else {\r\n      setCount(count - 1)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(KEY_TYPE, keyUpHandler)\r\n    return () => {\r\n      document.removeEventListener(KEY_TYPE, keyUpHandler)\r\n    };\r\n  })\r\n\r\n  // Кнопка с треброванием выдать ID и сохранить !!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n  useEffect(() => {\r\n    // первичная инициализация, наложение логики и сохранение в стор следующего вопроса + восстановление промежуточных итогов\r\n    const newQuestion = questionFormation(poll, count, results, logic, setResults);\r\n    if (!newQuestion) return\r\n    if (newQuestion.next) {\r\n      if (direction) {\r\n        setCount(count + 1)\r\n      } else {\r\n        setCount(count - 1)\r\n      }\r\n      return\r\n    }\r\n    setQuestion(newQuestion.data)\r\n    setCurrentQuestion(newQuestion.data)\r\n  }, [count])\r\n\r\n  const clickHandler = (target) => {\r\n    const code = target.dataset.code\r\n    const selectedAnswer = question.answers.filter(obj => obj.keyCode === +code)[0]\r\n    // проверка, если поле со свободным ответом необходимо отредактировать\r\n    if (selectedAnswer.freeAnswer && selectedAnswer.selected) {\r\n      return\r\n    }\r\n    mainLogic(code)\r\n  }\r\n\r\n  const codesShow = (e) => {\r\n    setUserSettings(prevState => ({\r\n      ...prevState,\r\n      codesShow: !prevState.codesShow\r\n    }))\r\n  }\r\n\r\n  const checkRespondentFinish = (newResults) => {\r\n    let count = 0\r\n    for (let key in newResults) {\r\n      if (key !== 'pool') {\r\n        count++\r\n      }\r\n    }\r\n    // проверка - если не дошли до конца анкета, нет смысла анализировать концовку\r\n    if (count < poll.questions.length) {\r\n      return false\r\n    }\r\n    for (let key in newResults) {\r\n      if (key !== 'pool') {\r\n        const result = newResults[key]\r\n        if (!result.data.length) {\r\n          // необходимо проверить - пропущен был вопрос или нет\r\n          if (logic.criticalExclude) {\r\n            const resPool = newResults.pool                // уже сохраненные ответы\r\n            const codesPool = result.codesPool\r\n            const criticalExclude = logic.criticalExclude\r\n            const r = codesPool.filter((code, index) => {\r\n              for (let eCode in criticalExclude) {\r\n                if (resPool.includes(eCode)) {\r\n                  if (criticalExclude[eCode].includes(code)) return false\r\n                }\r\n              }\r\n              return true\r\n            })\r\n            if (r.length) {\r\n              setInlineMessage(`Пропущен ${result.count + 1}й вопрос`)\r\n              setFinish(false)\r\n              return false\r\n            }\r\n          } else {\r\n            // пула критичных ответов нет -> запрещенных вопросов нет -> какой-то вопрос пропущен\r\n            // ОПРЕДЕЛИТЬ какой номер вопроса\r\n            setInlineMessage(`Пропущен ${result.count + 1}й вопрос`)\r\n            setFinish(false)\r\n            return false\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setInlineMessage('')\r\n    setFinish(true)\r\n    return true\r\n  }\r\n\r\n  const finishRespondent = () => {\r\n    setFinishDialog(true)\r\n  }\r\n\r\n  // ОСНОВНЫЙ обработчик сброса ответов\r\n  const resetAnswers = () => {\r\n    const savedCodes = results[question.id].data.reduce((acum, val) => [...acum, val.answerCode], [])\r\n    // Сделано так, чтобы не ждать обновления СТЕЙТА с результатами\r\n    let newResults = {}\r\n    for (let key in results) {\r\n      if (key === question.id) {\r\n        newResults[question.id] = {\r\n          ...newResults[question.id],\r\n          data: []\r\n        }\r\n      } else {\r\n        if (key !== 'pool') {\r\n          newResults = {\r\n            ...newResults,\r\n            [key]: results[key]\r\n          }\r\n        } else {\r\n          newResults = {\r\n            ...newResults,\r\n            pool: results.pool.filter(code => {\r\n              return savedCodes.includes(code) ? false : true\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setResults(newResults)\r\n    setQuestion(prevState => ({\r\n      ...prevState,\r\n      answers: prevState.answers.map(\r\n        answer => true ? { ...answer, selected: false, showFreeAnswer: false, disabled: false } : answer\r\n      ).map(\r\n        answer => {\r\n          let excludePool = []\r\n          // формирование пула кодов которые запрещены в результатах\r\n          for (let code in logic.criticalExclude) {\r\n            if (code === answer.code) {\r\n              excludePool = [\r\n                ...excludePool,\r\n                ...logic.criticalExclude[code]\r\n              ]\r\n            }\r\n            if (logic.criticalExclude[code].includes(answer.code)) {\r\n              excludePool = [\r\n                ...excludePool,\r\n                code\r\n              ]\r\n            }\r\n          }\r\n          for (let i = 0; i < excludePool.length; i++) {\r\n            if (newResults.pool.includes(excludePool[i])) {\r\n              return {\r\n                ...answer,\r\n                disabled: true,\r\n                excludeM: `противоречит коду ${excludePool[i]}`\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            ...answer,\r\n            disabled: false,\r\n            excludeM: ''\r\n          }\r\n        }\r\n      )\r\n    }))\r\n    setFinish(false)\r\n    // обновить логику и проверить запрещенные ответы для данного вопроса для их перерисовки!!!!!!\r\n  }\r\n\r\n  // ОСНОВНОЙ обработчик логики\r\n  const mainLogic = (code) => {\r\n    const trueCode = +code\r\n    const keyCodesPool = question.keyCodesPool\r\n    const selectedAnswer = question.answers.filter(obj => obj.keyCode === trueCode)[0]\r\n    // движение по опросу\r\n    if (trueCode === 39) {\r\n      setTimeout(() => {\r\n        goToNext()\r\n      }, MOVE_DELAY)\r\n      return\r\n    } else if (trueCode === 37) {\r\n      setTimeout(() => {\r\n        goToPrevious()\r\n      }, MOVE_DELAY)\r\n      return\r\n    }\r\n    // входит ли код клавиатуры в перечень ответов\r\n    if (keyCodesPool.includes(trueCode)) {\r\n      // промежуточные результаты уже содержат выбранный код => удаляем промежуточный результат => обновляем текущий вью\r\n      if (results.pool.includes(selectedAnswer.code)) {\r\n        let newResults = {}\r\n        for (let key in results) {\r\n          if (key === question.id) {\r\n            newResults = {\r\n              ...newResults,\r\n              [question.id]: {\r\n                ...results[question.id],\r\n                data: results[question.id].data.filter(el => el.answerCode !== selectedAnswer.code)\r\n              }\r\n            }\r\n          } else {\r\n            if (key !== 'pool') {\r\n              newResults = {\r\n                ...newResults,\r\n                [key]: results[key]\r\n              }\r\n            } else {\r\n              newResults = {\r\n                ...newResults,\r\n                pool: results.pool.filter(el => el !== selectedAnswer.code)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        setResults(newResults)\r\n        setQuestion(prevState => ({\r\n          ...prevState,\r\n          answers: prevState.answers.map(\r\n            answer => answer.code === selectedAnswer.code ? { ...answer, selected: false, showFreeAnswer: false } : answer\r\n          ).map(\r\n            answer => newResults[question.id].data.length ? answer : ({ ...answer, disabled: false })\r\n          ).map(\r\n            answer => {\r\n              let excludePool = []\r\n              // формирование пула кодов которые запрещены в результатах \r\n              for (let code in logic.criticalExclude) {\r\n                if (code === answer.code) {\r\n                  excludePool = [\r\n                    ...excludePool,\r\n                    ...logic.criticalExclude[code]\r\n                  ]\r\n                }\r\n                if (logic.criticalExclude[code].includes(answer.code)) {\r\n                  excludePool = [\r\n                    ...excludePool,\r\n                    code\r\n                  ]\r\n                }\r\n              }\r\n              for (let i = 0; i < excludePool.length; i++) {\r\n                if (newResults.pool.includes(excludePool[i])) {\r\n                  return {\r\n                    ...answer,\r\n                    disabled: true,\r\n                    excludeM: `противоречит коду ${excludePool[i]}`\r\n                  }\r\n                }\r\n              }\r\n              return {\r\n                ...answer,\r\n                disabled: false,\r\n                excludeM: ''\r\n              }\r\n            }\r\n          ).map(answer => {\r\n            // проверка на уникальность\r\n            if (newResults[question.id].data.length) {\r\n              return answer.unique ? { ...answer, disabled: true } : answer\r\n            }\r\n            return answer\r\n          })\r\n        }))\r\n        checkRespondentFinish(newResults)\r\n        return\r\n      }\r\n      // проверка на уникальность ответа и выбраннного до этого противоречивого ответа (ВНЕШНЯЯ ЛОГИКА - уникальность)\r\n      if (logic.unique.includes(selectedAnswer.code)) {\r\n        if (results[question.id].data.length) {\r\n          beep()\r\n          return\r\n        }\r\n      }\r\n      // проверка на активность ответа и ограничение по количеству ответов\r\n      if (selectedAnswer.disabled || results[question.id].data.length >= question.limit) {\r\n        beep()\r\n        return\r\n      }\r\n      // проверка на свободный ответ\r\n      if (selectedAnswer.freeAnswer) {\r\n        setQuestion(prevState => ({\r\n          ...prevState,\r\n          answers: prevState.answers.map(\r\n            answer => answer.keyCode === selectedAnswer.keyCode ? { ...answer, selected: true, showFreeAnswer: true } : answer\r\n          )\r\n        }))\r\n        return\r\n      }\r\n      const result = {\r\n        answerCode: selectedAnswer.code,\r\n        answerId: selectedAnswer.id,\r\n        freeAnswer: false,\r\n        freeAnswerText: ''\r\n      }\r\n      // проверка на исключаемость (ВНЕШНЯЯ ЛОГИКА - КРИТИЧНАЯ исключаемость) -> запретить ответы, которые указаны в конфиг файле\r\n      for (let code in logic.criticalExclude) {\r\n        // если в выбранных ответах присутствует код, который исключает другие ответы\r\n        if (results.pool.includes(code)) {\r\n          if (logic.criticalExclude[code].includes(selectedAnswer.code)) {\r\n            beep()\r\n            return\r\n          }\r\n        }\r\n      }\r\n      // проверка на исключаемость (ВНЕШНЯЯ ЛОГИКА - НЕКРИТИЧНАЯ исключаемость) -> ОПОВЕСТИТЬ при ответе, которые указаны в конфиг файле\r\n      for (let code in logic.nonCriticalExclude) {\r\n        // если в выбранных ответах присутствует код, который исключает другие ответы\r\n        if (results.pool.includes(code)) {\r\n          if (logic.nonCriticalExclude[code].includes(selectedAnswer.code)) {\r\n            console.log('Ответ не совсем корректен');\r\n          }\r\n        }\r\n      }\r\n\r\n      let newResultState = Object.assign({}, results);\r\n      newResultState[question.id].data.push(result)\r\n      newResultState.pool.push(selectedAnswer.code)\r\n      setResults(newResultState)\r\n      setQuestion(prevState => ({\r\n        ...prevState,\r\n        answers: prevState.answers.map(\r\n          answer => answer.keyCode === trueCode ? { ...answer, selected: true } : answer\r\n        ).map(\r\n          answer => logic.unique.includes(answer.code) & answer.keyCode !== trueCode ? { ...answer, disabled: true } : answer\r\n        ).map(\r\n          answer => selectedAnswer.exclude.includes(answer.code) ? {\r\n            ...answer,\r\n            disabled: true,\r\n            excludeM: `противоречит коду ${selectedAnswer.code}`\r\n          } : answer\r\n        )\r\n      }))\r\n      // проверить на уникальность (ВНЕШНЯЯ ЛОГИКА - уникальность) -> запретить другие ответы\r\n      if (logic.unique.includes(selectedAnswer.code)) {\r\n        setQuestion(prevState => ({\r\n          ...prevState,\r\n          answers: prevState.answers.map(\r\n            answer => answer.keyCode === trueCode ? answer : { ...answer, disabled: true }\r\n          )\r\n        }))\r\n      }\r\n\r\n      // ПРОВЕРКА на окончание ввода\r\n      if (checkRespondentFinish(newResultState)) {\r\n        return\r\n      } else {\r\n        // проверка на ЛИМИТ (для автоматического перехода к следующему вопросу)\r\n        if (results[question.id].data.length >= question.limit) {\r\n          // переходим дальше\r\n          setTimeout(() => {\r\n            goToNext()\r\n          }, STEP_DELAY)\r\n          return\r\n        }\r\n      }\r\n    } else {\r\n      beep()\r\n    }\r\n  }\r\n\r\n  // ОСНОВНОЙ обработчик свободного ответа\r\n  const blurHandler = (e) => {\r\n    const value = e.currentTarget.value\r\n    const selectedCode = e.currentTarget.dataset.code\r\n    const selectedKeyCode = e.currentTarget.dataset.keycode\r\n    const selectedAnswer = question.answers.filter(obj => obj.keyCode === +selectedKeyCode)[0]\r\n    if (value === '') {\r\n      // пустое поле не позволительно -> стираем из промежуточного результата и обновляем вью\r\n      let newResults = {}\r\n      for (let key in results) {\r\n        if (key === question.id) {\r\n          newResults = {\r\n            ...newResults,\r\n            [question.id]: {\r\n              ...results[question.id],\r\n              data: results[question.id].data.filter(el => el.answerCode !== selectedCode)\r\n            }\r\n          }\r\n        } else {\r\n          if (key !== 'pool') {\r\n            newResults = {\r\n              ...newResults,\r\n              [key]: results[key]\r\n            }\r\n          } else {\r\n            newResults = {\r\n              ...newResults,\r\n              pool: results.pool.filter(el => el !== selectedCode)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setResults(newResults)\r\n      setQuestion(prevState => ({\r\n        ...prevState,\r\n        answers: prevState.answers.map(\r\n          answer => answer.code === selectedCode ? { ...answer, selected: false, showFreeAnswer: false } : answer\r\n        ).map(\r\n          answer => newResults[question.id].data.length ? answer : ({ ...answer, disabled: false })\r\n        ).map(\r\n          answer => {\r\n            let excludePool = []\r\n            // формирование пула кодов которые запрещены в результатах \r\n            for (let code in logic.criticalExclude) {\r\n              if (code === answer.code) {\r\n                excludePool = [\r\n                  ...excludePool,\r\n                  ...logic.criticalExclude[code]\r\n                ]\r\n              }\r\n              if (logic.criticalExclude[code].includes(answer.code)) {\r\n                excludePool = [\r\n                  ...excludePool,\r\n                  code\r\n                ]\r\n              }\r\n            }\r\n            for (let i = 0; i < excludePool.length; i++) {\r\n              if (newResults.pool.includes(excludePool[i])) {\r\n                return {\r\n                  ...answer,\r\n                  disabled: true,\r\n                  excludeM: `противоречит коду ${excludePool[i]}`\r\n                }\r\n              }\r\n            }\r\n            return {\r\n              ...answer,\r\n              disabled: false,\r\n              excludeM: ''\r\n            }\r\n          }\r\n        ).map(answer => {\r\n          // проверка на уникальность\r\n          if (newResults[question.id].data.length) {\r\n            return answer.unique ? { ...answer, disabled: true } : answer\r\n          }\r\n          return answer\r\n        })\r\n      }))\r\n      checkRespondentFinish(newResults)\r\n      return\r\n    }\r\n    // поле не пустое -> сохраняем результат\r\n    const result = {\r\n      answerCode: selectedCode,\r\n      answerId: selectedAnswer.id,\r\n      freeAnswer: false,\r\n      freeAnswerText: value\r\n    }\r\n\r\n    /// опять новый СТЕЙТ результата!!!!!!!!!!!\r\n\r\n    let newResultState = {}\r\n    if (results.pool.includes(selectedCode)) {\r\n      newResultState = Object.assign({}, results);\r\n      newResultState[question.id] = {\r\n        ...newResultState[question.id],\r\n        data: results[question.id].data.map(\r\n          answer => answer.answerCode === selectedCode ? { ...answer, freeAnswerText: value } : answer\r\n        )\r\n      }\r\n    } else {\r\n      newResultState = Object.assign({}, results);\r\n      newResultState[question.id].data.push(result)\r\n      newResultState.pool.push(selectedCode)\r\n    }\r\n    setResults(newResultState)\r\n\r\n    // проверить на уникальность (ВНЕШНЯЯ ЛОГИКА - уникальность) -> запретить другие ответы\r\n    if (logic.unique.includes(selectedCode)) {\r\n      setQuestion(prevState => ({\r\n        ...prevState,\r\n        answers: prevState.answers.map(\r\n          answer => answer.keyCode === +selectedKeyCode ? answer : { ...answer, disabled: true }\r\n        )\r\n      }))\r\n    }\r\n    setQuestion(prevState => ({\r\n      ...prevState,\r\n      answers: prevState.answers.map(\r\n        answer => answer.keyCode === selectedCode ? { ...answer, selected: true } : answer\r\n      ).map(\r\n        answer => logic.unique.includes(answer.code) & answer.keyCode !== selectedCode ? { ...answer, disabled: true } : answer\r\n      ).map(\r\n        answer => selectedAnswer.exclude.includes(answer.code) ? {\r\n          ...answer,\r\n          disabled: true,\r\n          excludeM: `противоречит коду ${selectedAnswer.code}`\r\n        } : answer\r\n      )\r\n    }))\r\n\r\n    // \r\n    if (checkRespondentFinish(newResultState)) {\r\n      return\r\n    } else {\r\n      if (results[question.id].data.length >= question.limit - 1) {         // -1 т.к. не успевает обновится стейт\r\n        setTimeout(() => {\r\n          goToNext()\r\n        }, STEP_DELAY)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // !!!!!!!!!!!!!!!!!!!!Обработчик SELECTa - не доделана логика выбора!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n  const multipleHandler = (value, codes) => {\r\n    if (value.length) {\r\n      const codesPool = value.map(val => val.code)\r\n      const resultsPool = value.map(val => {\r\n        return {\r\n          answerCode: val.code,\r\n          freeAnswer: false,\r\n          freeAnswerText: ''\r\n        }\r\n      })\r\n      const clearPool = results.pool.filter(val => !codes.includes(val))\r\n      setResults(prevState => ({\r\n        ...prevState,\r\n        [question.id]: {\r\n          ...prevState[question.id],\r\n          data: [\r\n            ...resultsPool\r\n          ]\r\n        },\r\n        pool: [\r\n          ...clearPool,\r\n          ...codesPool\r\n        ]\r\n      }))\r\n      if (value.length) {\r\n        setTimeout(() => {\r\n          goToNext()\r\n        }, STEP_DELAY)\r\n      }\r\n      return\r\n    }\r\n    setResults(prevState => ({\r\n      ...prevState,\r\n      [question.id]: {\r\n        ...prevState[question.id],\r\n        data: []\r\n      },\r\n      pool: prevState.pool.filter(obj => !codes.includes(obj))\r\n    }))\r\n  }\r\n\r\n  const cancelFinish = () => {\r\n    // просто возврат к анкете, чтобы что-то поправить\r\n    setFinishDialog(false)\r\n  }\r\n\r\n  const confirmFinish = () => {\r\n    // закончить данную анкету и начать новую, сбросив все данные\r\n    saveWorksheet(results)\r\n    setResults({\r\n      pool: []\r\n    })\r\n    setCount(0)\r\n    setFinish(false)\r\n    setFinishDialog(false)\r\n  }\r\n\r\n  const finishThisPoll = () => {\r\n    // закончить данный опрос и перейти на главную страницу\r\n    setFinish(false)\r\n    setFinishDialog(false)\r\n    saveAndGoBack(results)\r\n  }\r\n\r\n  const InlineInformer = () => {\r\n    return (\r\n      <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n        {inlineMessage}\r\n      </Typography>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <FinishDialog open={finishDialog} handleClose={cancelFinish} finishAll={finishThisPoll} confirm={confirmFinish} />\r\n      <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n        <Grid container xs={6} md={3} justify=\"flex-start\">\r\n          <FormControlLabel\r\n            value=\"end\"\r\n            control={<Checkbox color=\"primary\" onChange={codesShow} defaultChecked={userSettings.codesShow} />}\r\n            label=\"Коды ответов\"\r\n            labelPlacement=\"end\"\r\n          />\r\n        </Grid>\r\n        <Hidden only={['sm', 'xs']}>\r\n          <Grid container md={6} justify=\"center\">\r\n            <InlineInformer />\r\n          </Grid>\r\n        </Hidden>\r\n        <Grid container xs={6} md={3} justify=\"flex-end\">\r\n          <p>Всего: <span><strong>{questionsLimit}</strong></span></p>\r\n        </Grid>\r\n        <Hidden mdUp>\r\n          <Grid container xs={12} justify=\"center\">\r\n            <InlineInformer />\r\n          </Grid>\r\n        </Hidden>\r\n\r\n      </Grid>\r\n      {question &&\r\n        <Question\r\n          count={count}\r\n          question={question}\r\n          settings={userSettings}\r\n          clickHandler={clickHandler}\r\n          blurHandler={blurHandler}\r\n          multipleHandler={multipleHandler}\r\n        />\r\n      }\r\n      <Button onClick={goToPrevious} variant=\"contained\" className=\"control-button\">Назад</Button>\r\n      <Button onClick={goToNext} variant=\"contained\" className=\"control-button\">Вперед</Button>\r\n      {finish &&\r\n        <Button onClick={finishRespondent} variant=\"contained\" className=\"control-button\">Финиш</Button>\r\n      }\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollDrive","import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst DialogWithSelect = ({ open, handleClose, save, header, text, options }) => {\r\n  const [state, setState] = useState(\"\")\r\n  const handleChange = (e) => {\r\n    const { options, selectedIndex, value } = e.target;\r\n    const id = value\r\n    const title = options[selectedIndex].innerHTML\r\n    setState({\r\n      id,\r\n      title\r\n    })\r\n  }\r\n\r\n  const handleSave = () => {\r\n    save(state)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={open} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">{header}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {text}\r\n          </DialogContentText>\r\n          <Select\r\n            fullWidth\r\n            native\r\n            value={state.id}\r\n            onChange={e => handleChange(e)}\r\n          >\r\n            <option aria-label=\"None\" disabled selected value=\"\" />\r\n            {options.map((option, i) =>\r\n              <option key={option.id} value={option.id}>{option.title}</option>\r\n            )}\r\n          </Select>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={handleSave} disabled={!Boolean(state)} color=\"primary\">\r\n            Сохранить\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DialogWithSelect","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      questions{\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          code\r\n          title\r\n        }\r\n      }\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const SAVE_NEW_RESULT = gql`\r\nmutation ($poll: String!, $city: String!, $user: String!, $pool: [String], $data: [ResultData]) {\r\n  saveResult(\r\n    poll: $poll,\r\n    city: $city,\r\n    user: $user,\r\n    pool: $pool,\r\n    data: $data\r\n  )\r\n}\r\n`","export const parseIni = (area) => {\r\n  let configData = area;\r\n  // let configData = area.value;\r\n  let regex = {\r\n    section: /^\\s*\\[\\s*([^\\]]*)\\s*\\]\\s*$/,\r\n    param: /^\\s*([^=]+?)\\s*=\\s*(.*?)\\s*$/,\r\n    comment: /^\\s*#.*$/\r\n  };\r\n  let config = {};\r\n  let lines = configData.split(/[\\r\\n]+/);\r\n  let section = null;\r\n  lines.forEach(function (line) {\r\n    if (regex.comment.test(line)) {\r\n      return;\r\n    } else if (regex.param.test(line)) {\r\n      let match = line.match(regex.param);\r\n      if (section) {\r\n        config[section][match[1]] = parseParams(match[2]);\r\n      } else {\r\n        config[match[1]] = parseParams(match[2]);\r\n      }\r\n    } else if (regex.section.test(line)) {\r\n      let match = line.match(regex.section);\r\n      config[match[1]] = {};\r\n      section = match[1];\r\n    } else if (line.length == 0 && section) {\r\n      section = null;\r\n    }\r\n  });\r\n  // console.log(config);\r\n  return concatLogic(config);\r\n}\r\n\r\nfunction concatLogic(config) {\r\n  let regex = /([0-9]{1,})/gm;\r\n  let result = {};\r\n  let property = null;\r\n  for (let key in config) {\r\n    property = key.match(/[a-zA-Z]*/gm)[0];\r\n    result[property] = {};\r\n  }\r\n  for (let key in config) {\r\n    property = key.match(/[a-zA-Z]*/gm)[0];\r\n    let suffix = key.match(regex);\r\n    if (suffix !== null) {\r\n      result[property][suffix] = config[key];\r\n    } else {\r\n      result[property][1] = config[key];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction parseParams(data) {\r\n  // избавляемся от пробелов\r\n  let trimData = data.replace(/\\s*/g, '');\r\n  let regex = {\r\n    // range : /\\[(.+?)\\]/gm,\r\n    // single: /([0-9]{1,3})/gm,\r\n    srange: /([0-9]{1,3})|\\[(.+?)\\]/gm\r\n  };\r\n\r\n  let output = [];\r\n  let temp;\r\n  do {\r\n    temp = regex.srange.exec(trimData);\r\n    if (temp) {\r\n      // одиночные\r\n      if (temp[1] !== undefined) {\r\n        output.push(temp[1]);\r\n      }\r\n      // диапазон\r\n      if (temp[2] !== undefined) {\r\n        let range = temp[2];\r\n        output = output.concat(rangeToArray(range));\r\n      }\r\n    }\r\n  } while (temp);\r\n  return output;\r\n}\r\n\r\nfunction rangeToArray(data) {\r\n  let regex = /(\\d{1,3})\\s*-\\s*(\\d{1,3})/gm;\r\n  let result = (data.replace(regex, (...match) => {\r\n    let temp = [];\r\n    let start = match[1];\r\n    let end = match[2];\r\n    // если перепутаны места\r\n    if (start > end) {\r\n      start = match[2];\r\n      end = match[1];\r\n    }\r\n    let length = (end - start) + 1;\r\n    while (length) {\r\n      start = start + '';\r\n      temp.push(start.padStart(3, '0'));\r\n      start++\r\n      length--;\r\n    }\r\n    return temp;\r\n  }));\r\n  return result.split(',');\r\n}\r\n\r\nexport const normalizeLogic = (logic) => {\r\n  let normalizedLogic = {}\r\n  for (let key in logic) {\r\n    switch (key) {\r\n      case 'difficult':\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          difficult: logic[key][1].answers\r\n        }\r\n        break\r\n      case 'freeAnswers':\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          freeAnswers: logic[key][1].answers\r\n        }\r\n        break\r\n      case 'exclude':\r\n        const exclude = logic[key]\r\n        let criticalExclude = {}\r\n        let nonCriticalExclude = {}\r\n        for (let i in exclude) {\r\n          if (exclude[i].critical[0] === '1') {\r\n            exclude[i].answers.map((answer) => {\r\n              criticalExclude[answer] = exclude[i].exclude\r\n            })\r\n          }\r\n          if (exclude[i].critical[0] === '0') {\r\n            exclude[i].answers.map((answer) => {\r\n              nonCriticalExclude[answer] = exclude[i].exclude\r\n            })\r\n          }\r\n        }\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          criticalExclude,\r\n          nonCriticalExclude\r\n        }\r\n        break\r\n      case 'unique':\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          unique: logic[key][1].answers\r\n        }\r\n        break\r\n      case 'invisible':\r\n        const invisible = logic[key]\r\n        let invisiblePool = []\r\n        for (let i in invisible) {\r\n          invisiblePool = [\r\n            ...invisiblePool,\r\n            ...invisible[i].answers\r\n          ]\r\n        }\r\n        normalizedLogic = {\r\n          ...normalizedLogic,\r\n          invisible: invisiblePool\r\n        }\r\n        break\r\n    }\r\n  }\r\n  return normalizedLogic\r\n}","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { mainUrl } from \"../../mainconfig\";\r\n\r\nimport Container from '@material-ui/core/Container'\r\nimport DriveLogic from \"./components/DriveLogic\";\r\nimport DialogWithSelect from '../../components/DialogWithSelect';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\nimport ErrorState from '../../components/ErrorState'\r\nimport LoadingState from '../../components/LoadingState'\r\nimport SystemNoti from '../../components/SystemNoti'\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { gql, useApolloClient, useQuery, useMutation } from '@apollo/client'\r\n\r\nimport { GET_POLL_DATA } from \"./queries\"\r\n\r\nimport { SAVE_NEW_RESULT } from './mutaions'\r\nimport { parseIni, normalizeLogic } from './lib/utils'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst PollDrive = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  const client = useApolloClient();\r\n  const [message, setMessage] = useState({\r\n    show: false,\r\n    type: 'error',\r\n    message: '',\r\n    duration: 6000\r\n  })\r\n  const { currentUser } = client.readQuery({\r\n    query: gql`\r\n    query CurrentUserQuery {\r\n      currentUser {\r\n        id\r\n        username\r\n      }\r\n    }\r\n    `,\r\n  })\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [poll, setPoll] = useState(null)\r\n  const [backOpen, setBackOpen] = useState(false)\r\n  const [poolOfCities, setPoolOfCities] = useState(null)\r\n  const [openCityDialog, setOpenCityDialog] = useState(true);\r\n  const [logic, setPollLogic] = useState(null)\r\n  const [currentCity, setCurrentCity] = useState(null)\r\n  const [currentQuestion, setCurrentQuestion] = useState({\r\n    'multiple': false\r\n  })\r\n  const { loading, error, data } = useQuery(GET_POLL_DATA, {\r\n    variables: { id },\r\n    onCompleted: (_, __) => {\r\n      handleConfigFile(data.poll.logic.path)\r\n      setPoolOfCities(data.poll.cities)\r\n    }\r\n  })\r\n  const handleConfigFile = (filePath) => {\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const logic = parseIni(text)\r\n        // Нормализация ЛОГИКИ - здесь формируется ЛОГИКА опроса, на основании конфиг файла !!!\r\n        const normLogic = normalizeLogic(logic)\r\n        setPollLogic(normLogic)\r\n      })\r\n  }\r\n  const [saveResult, { loading: saveLoading }] = useMutation(SAVE_NEW_RESULT, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (logic) {\r\n      // применени очередности, если в настройках опроса меняли очередность\r\n      const newOrderQuestion = data.poll.questions.slice().sort((a, b) => (a.order > b.order) ? 1 : -1)\r\n      // исключение вопросов, ответы которых полностью исключены полем [invisible] ВНЕШНЕЙ ЛОГИКИ\r\n      if (logic.invisible) {\r\n        const invisiblePool = logic.invisible\r\n        const visibleQuestions = newOrderQuestion.filter((question) => {\r\n          const answers = question.answers\r\n          const lAnswers = answers.length\r\n          let count = 0\r\n          for (let i = 0; i < lAnswers; i++) {\r\n            if (invisiblePool.includes(answers[i].code)) {\r\n              count++\r\n            }\r\n          }\r\n          if (count !== lAnswers) {\r\n            return true\r\n          }\r\n          return false\r\n        })\r\n        setPoll({\r\n          id: data.poll.id,\r\n          questions: visibleQuestions\r\n        })\r\n      } else {\r\n        setPoll({\r\n          id: data.poll.id,\r\n          questions: newOrderQuestion\r\n        })\r\n      }\r\n    }\r\n  }, [logic])\r\n\r\n\r\n  const Loading = () => {\r\n    if (saveLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  if (!poll || !poolOfCities || !logic || !currentUser) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const saveCity = (city) => {\r\n    setCurrentCity(city)\r\n    setOpenCityDialog(false)\r\n  }\r\n\r\n  const closeDialog = () => {\r\n    setOpenCityDialog(false)\r\n    history.push(\"/\")\r\n  }\r\n\r\n  const prepareResultData = (data) => {\r\n    let result = []\r\n    for (let key in data) {\r\n      if (key !== 'pool') {\r\n        result.push({\r\n          id: key,\r\n          data: data[key].data.map(answer => {\r\n            return {\r\n              answer: answer.answerId,\r\n              code: answer.answerCode,\r\n              text: answer.freeAnswerText,\r\n            }\r\n          })\r\n        })\r\n      }\r\n    }\r\n    return result\r\n  }\r\n\r\n  const saveAndGoBack = (data) => {\r\n    const result = prepareResultData(data)\r\n    saveResult({\r\n      variables: {\r\n        poll: poll.id,\r\n        city: currentCity.id,\r\n        user: currentUser.id,\r\n        pool: data.pool,\r\n        data: result\r\n      }\r\n    }).then(res => {\r\n      history.push(\"/\")\r\n    })\r\n  }\r\n\r\n  const saveWorksheet = (data) => {\r\n    const result = prepareResultData(data)\r\n    saveResult({\r\n      variables: {\r\n        poll: poll.id,\r\n        city: currentCity.id,\r\n        user: currentUser.id,\r\n        pool: data.pool,\r\n        data: result\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <div style={{ backgroundColor: currentQuestion.multiple ? 'rgb(208 226 252)' : '#fff' }}>\r\n        <Container maxWidth=\"md\">\r\n          <DialogWithSelect\r\n            open={openCityDialog}\r\n            options={poolOfCities}\r\n            header=\"Город\"\r\n            text=\"Выберите город в котором проводился опрос\"\r\n            save={saveCity}\r\n            handleClose={closeDialog}\r\n          />\r\n          <DriveLogic\r\n            poll={poll}\r\n            logics={logic}\r\n            setCurrentQuestion={setCurrentQuestion}\r\n            saveAndGoBack={saveAndGoBack}\r\n            saveWorksheet={saveWorksheet} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollDrive","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollDrive from \"../modules/PollDrive\";\r\n\r\nconst DrivePage = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Опрос ` + code + ` - вбивание`} />\r\n      <PollDrive id={id}/>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default DrivePage","import React, { Fragment } from 'react'\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, p, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      className=\"right-pannel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-auto-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-auto-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={p}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction allProps(index) {\r\n  return {\r\n    id: `scrollable-auto-tab-${index}`,\r\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tabs: {\r\n    minWidth: '160px',\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n    overflow: 'visible'\r\n  }\r\n}));\r\n\r\nconst Vertical = ({ data, value, handleChange }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Tabs\r\n      orientation=\"vertical\"\r\n      variant=\"scrollable\"\r\n      value={value}\r\n      onChange={handleChange}\r\n      aria-label=\"Vertical tabs\"\r\n      scrollButtons=\"auto\"\r\n      className={classes.tabs}\r\n    >\r\n      {data.map((obj, index) => (\r\n        <Tab label={obj.label} {...allProps({ index })} />\r\n      ))}\r\n    </Tabs>\r\n  )\r\n}\r\n\r\nconst Horizontal = ({ data, value, handleChange }) => {\r\n  return (\r\n    <AppBar position=\"static\" color=\"default\">\r\n      <Tabs\r\n        variant=\"scrollable\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        scrollButtons=\"auto\"\r\n        aria-label=\"horizontal auto tabs\"\r\n      >\r\n        {data.map((obj, index) => (\r\n          <Tab label={obj.label} {...allProps({ index })} />\r\n        ))}\r\n      </Tabs>\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nconst AdaptiveTabs = ({ data }) => {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (_, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"root-wrap\">\r\n        <Hidden xsDown>\r\n          <Vertical data={data} value={value} handleChange={handleChange} />\r\n        </Hidden>\r\n        <Hidden smUp>\r\n          <Horizontal data={data} value={value} handleChange={handleChange} />\r\n        </Hidden>\r\n        {data.map((obj, index) => (\r\n          <TabPanel value={value} index={index} p={obj.padding ? obj.padding : 1}>\r\n            {obj.component}\r\n          </TabPanel>\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default AdaptiveTabs","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query pollQuery($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questionsCount\r\n      answersCount\r\n      cities {\r\n        id\r\n        title\r\n      }\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n        }\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState, useEffect } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport { parseIni, normalizeLogic } from '../../../PollDrive/lib/utils'\r\nimport { useQuery } from '@apollo/client'\r\n\r\nimport { GET_POLL_DATA } from \"./queries\"\r\n\r\n\r\nconst Generation = ({ id }) => {\r\n  const [poll, setPoll] = useState(null)\r\n  const [questions, setQuestions] = useState(null)\r\n  const [logic, setLogic] = useState(null)\r\n  const [count, setCount] = useState(null)\r\n  const { loading, data } = useQuery(GET_POLL_DATA, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      setPoll({\r\n        id: data.poll.id,\r\n        title: data.poll.title,\r\n        questionsCount: data.poll.questionsCount,\r\n        answersCount: data.poll.answersCount\r\n      })\r\n      handleConfigFile(data.poll.logic.path)\r\n    }\r\n  })\r\n\r\n  const handleConfigFile = (filePath) => {\r\n    fetch(`http://localhost:4000${filePath}`)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const logic = parseIni(text)\r\n        // Нормализация ЛОГИКИ - здесь формируется ЛОГИКА опроса, на основании конфиг файла !!!\r\n        const mainLogic = normalizeLogic(logic)\r\n        setLogic(mainLogic)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (logic) {\r\n      let visibleQuestions = []\r\n      if (logic.invisible) {\r\n        const invisiblePool = logic.invisible\r\n        visibleQuestions = data.poll.questions.filter((question) => {\r\n          const answers = question.answers\r\n          const lAnswers = answers.length\r\n          let count = 0\r\n          for (let i = 0; i < lAnswers; i++) {\r\n            if (invisiblePool.includes(answers[i].code)) {\r\n              count++\r\n            }\r\n          }\r\n          if (count !== lAnswers) {\r\n            return true\r\n          }\r\n        })\r\n      } else {\r\n        visibleQuestions = data.poll.questions\r\n      }\r\n      const modQuestions = visibleQuestions.map((question, index) => {\r\n        const newAnswers = question.answers.map((answer, index) => {\r\n          let suffix = {}\r\n          if (logic.invisible) {\r\n            if (logic.invisible.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                disabled: true\r\n              }\r\n            }\r\n          }\r\n          if (logic.freeAnswers) {\r\n            if (logic.freeAnswers.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                freeAnswer: true\r\n              }\r\n            }\r\n          }\r\n          if (logic.unique) {\r\n            if (logic.unique.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                unique: true\r\n              }\r\n            }\r\n          }\r\n          if (logic.difficult) {\r\n            if (logic.difficult.includes(answer.code)) {\r\n              suffix = {\r\n                ...suffix,\r\n                difficult: true\r\n              }\r\n            }\r\n          }\r\n          const newAnswer = {\r\n            ...answer,\r\n            ...suffix\r\n          }\r\n          return newAnswer\r\n        })\r\n        const newQuestion = {\r\n          ...question,\r\n          answers: newAnswers\r\n        }\r\n        return newQuestion\r\n      })\r\n      setQuestions(modQuestions)\r\n    }\r\n  }, [logic])\r\n\r\n\r\n  if (loading || !logic || !questions) return (\r\n    <Fragment>\r\n      <CircularProgress />\r\n      <p>Загрузка. Подождите пожалуйста</p>\r\n    </Fragment>\r\n  )\r\n\r\n  const testPoolChange = (e) => {\r\n    const val = e.currentTarget.value\r\n    if (val < 0) {\r\n      return\r\n    }\r\n    setCount(val)\r\n  }\r\n\r\n  const generateTestPool = () => {\r\n    const worksheetsCount = count\r\n    console.log(questions);\r\n    // freeAnswer\r\n    // freeAnswersPool\r\n    // unique\r\n    // criticalExclude\r\n    // difficult\r\n    for (let i = 0; i < worksheetsCount; i++) {\r\n      questions.map((question, index) => {\r\n\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container>\r\n        <Box>\r\n          <h3>{poll.title}</h3>\r\n        </Box>\r\n        <Grid xs={12} item container justify=\"flex-start\">\r\n          <Box>\r\n            <TextField\r\n              id=\"outlined-number\"\r\n              label=\"Number\"\r\n              type=\"number\"\r\n              value={count}\r\n              onChange={testPoolChange}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n          <Box p={1}>\r\n            <Button variant=\"contained\" color=\"primary\" disabled={count ? false : true} onClick={generateTestPool}>\r\n              Генерировать\r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Generation","import React from 'react'\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst ConfirmDialog = ({ open, confirm, close, data }) => {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={close}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">{data.title}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          {data.text}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={close} color=\"primary\">\r\n          Отмена\r\n          </Button>\r\n        <Button onClick={confirm} color=\"primary\" autoFocus>\r\n          Удалить\r\n          </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default ConfirmDialog","import React, { Fragment } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nconst RespondentCard = ({ result, index, show, edit, selected, select }) => {\r\n  return (\r\n    <Fragment>\r\n      <Paper className=\"respondent-card\">\r\n        <Grid container item justify=\"space-between\">\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {index + 1}\r\n          </Typography>\r\n          {result.processed ? <p>dd</p> : ''}\r\n          <Checkbox\r\n            checked={selected}\r\n            onChange={(e) => select({\r\n              id: result.id,\r\n              index,\r\n              event: e\r\n            })}\r\n            inputProps={{ 'aria-label': 'primary checkbox' }}\r\n          />\r\n        </Grid>\r\n        <Typography variant=\"subtitle2\" gutterBottom>\r\n          н.п.: {result.city ? result.city.title : '-'}\r\n        </Typography>\r\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n          сохранен: {result.created}\r\n        </Typography>\r\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n          обновлен: {result.lastModified}\r\n        </Typography>\r\n        {/* <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n          {result.city ? result.city.category.label : 'вероятно город стерли из БД'}\r\n        </Typography> */}\r\n        <Grid container item justify=\"space-between\" className=\"card-service-buttons\">\r\n          <IconButton className=\"card-button\" aria-label=\"delete\" onClick={() => edit(result.id)}>\r\n            <EditIcon fontSize=\"small\" />\r\n          </IconButton>\r\n          <IconButton className=\"card-button\" aria-label=\"delete\" onClick={() => show(result)}>\r\n            <ListAltIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Grid>\r\n      </Paper>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default RespondentCard","import { gql } from '@apollo/client'\r\n\r\nexport const GET_FILTER_SELECTS = gql`\r\n  query {\r\n    cities {\r\n      id\r\n      title\r\n      population\r\n      category {\r\n        title\r\n      }\r\n    }\r\n    intervievers {\r\n      id\r\n      username\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_POLL_RESULTS = gql`\r\n  query ($id: String!) {\r\n    pollResults(id: $id) {\r\n      id\r\n      user {\r\n        id\r\n        username\r\n      }\r\n      city {\r\n        id\r\n        title\r\n        category {\r\n          title\r\n        }\r\n      }\r\n      created\r\n      lastModified\r\n      processed\r\n      result {\r\n        question {\r\n          id\r\n          title\r\n          answers {\r\n            results {\r\n              id\r\n              code\r\n            }\r\n          }\r\n        }\r\n        answer\r\n        code\r\n        text\r\n      }\r\n    }\r\n  }\r\n\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const CITY_SAVE_MUTATION = gql`\r\nmutation saveNewCity($title: String!, $population: Int!, $category: String!) {\r\n  newCity(title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category\r\n    population\r\n  }\r\n}\r\n`\r\n\r\nexport const CITY_EDIT_SAVE = gql`\r\nmutation saveCityEdit($id: String!, $title: String!, $population: Int!, $category: String!) {\r\n  cityEdit(id: $id, title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category\r\n    population\r\n  }\r\n}\r\n`\r\nexport const DELETE_RESULTS = gql`\r\nmutation ($results: [String]!) {\r\n  deleteResults(results: $results) {\r\n    id\r\n  }\r\n}\r\n`","import React, { Fragment, useEffect, useState } from 'react'\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\nimport DynamicFeedIcon from '@material-ui/icons/DynamicFeed';\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog'\r\nimport RespondentCard from '../../components/RespondentCard'\r\n\r\nimport { useApolloClient } from '@apollo/client'\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_POLL_RESULTS, GET_FILTER_SELECTS } from './queries'\r\nimport { DELETE_RESULTS } from './mutations'\r\nimport { LocalFlorist } from '@material-ui/icons';\r\n\r\nconst OverallResults = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n\r\n  const [ddate, setDdate] = useState()\r\n  const client = useApolloClient();\r\n  const [selectedDate, handleDateChange] = useState(new Date());\r\n  const [delOpen, setDelOpen] = useState(false)\r\n  const [activeResults, setActiveResults] = useState()\r\n  const [filters, setFilters] = useState({\r\n    intervievers: [],\r\n    status: [\r\n      {\r\n        value: 0,\r\n        title: 'Не обработано'\r\n      },\r\n      {\r\n        value: 1,\r\n        title: 'Обработано'\r\n      }\r\n    ],\r\n    cities: [],\r\n    sex: [],\r\n    age: []\r\n  })\r\n  const [activeFilters, setActiveFilters] = useState()\r\n  const [selectPool, setSelectPool] = useState([])\r\n  const [lastSelectedIndex, setLastSelectedIndex] = useState()\r\n  const [delConfirm, setDelConfirm] = useState(false)\r\n  const [message, setMessage] = useState({\r\n    show: false,\r\n    type: 'error',\r\n    message: '',\r\n    duration: 6000\r\n  })\r\n  const {\r\n    data: pollResults,\r\n    loading: pollResultsLoading,\r\n    error: pollResultsError\r\n  } = useQuery(GET_POLL_RESULTS, {\r\n    variables: {\r\n      id\r\n    },\r\n    onCompleted: () => {\r\n      setActiveResults(pollResults.pollResults)\r\n    }\r\n  });\r\n  const {\r\n    data: filtersResults,\r\n    loading: filtersResultsLoading,\r\n    error: filtersResultsError\r\n  } = useQuery(GET_FILTER_SELECTS, {\r\n    onCompleted: () => {\r\n      setFilters({\r\n        ...filters,\r\n        cities: filtersResults.cities.map(city => {\r\n          return {\r\n            value: city.id,\r\n            title: city.title,\r\n            category: city.category.label\r\n          }\r\n        }),\r\n        intervievers: filtersResults.intervievers.map(iViever => {\r\n          return {\r\n            value: iViever.id,\r\n            title: iViever.username\r\n          }\r\n        }),\r\n      })\r\n    }\r\n  })\r\n  const [\r\n    deleteResult,\r\n    { loading: loadOnDelete }\r\n  ] = useMutation(DELETE_RESULTS, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить новый город не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (activeFilters) {\r\n      if (activeFilters.cities.length) {\r\n        const rrr = pollResults.pollResults.filter(\r\n          result => {\r\n            if (result.city) {\r\n              return activeFilters.cities.includes(result.city.id)\r\n            }\r\n            return false\r\n          }\r\n        )\r\n        setActiveResults(rrr)\r\n      } else {\r\n        setActiveResults(pollResults.pollResults)\r\n      }\r\n    }\r\n  }, [activeFilters])\r\n\r\n\r\n  const handleChange = (_, __) => {\r\n\r\n  }\r\n\r\n  if (pollResultsLoading || !pollResults || !activeResults || !filters) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (pollResultsError || filtersResultsError) {\r\n    console.log(JSON.stringify(pollResultsError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (loadOnDelete) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  const handleDialogConfirm = () => {\r\n\r\n  }\r\n\r\n  const handleDialogClose = () => {\r\n\r\n  }\r\n\r\n  const showDetails = ({ result }) => {\r\n    const oderedResults = result.slice().sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n    const datails = oderedResults.map(obj => {\r\n      if (obj.text !== '') {\r\n        return obj.code + ' ' + obj.text\r\n      }\r\n      return obj.code\r\n    })\r\n    console.log(datails);\r\n  }\r\n\r\n  const handleEdit = () => {\r\n\r\n  }\r\n\r\n  const handleSelect = (data) => {\r\n    if (data.event.nativeEvent.shiftKey) {\r\n      let ar = []\r\n      if (data.index + 1 > lastSelectedIndex) {\r\n        ar = activeResults.slice(lastSelectedIndex, data.index + 1)\r\n      } else {\r\n        ar = activeResults.slice(data.index, lastSelectedIndex)\r\n      }\r\n      const rr = ar.filter(obj => !selectPool.includes(obj.id)).map(obj => obj.id)\r\n      setSelectPool(prevState => ([\r\n        ...prevState,\r\n        ...rr\r\n      ]))\r\n      setLastSelectedIndex(data.index)\r\n      return\r\n    }\r\n    setLastSelectedIndex(data.index)\r\n    if (data.event.nativeEvent.ctrlKey) {\r\n      if (selectPool.includes(data.id)) {\r\n        const n = selectPool.filter(id => {\r\n          return id !== data.id\r\n        })\r\n        setSelectPool(n)\r\n        return\r\n      } else {\r\n        setSelectPool(prevState => ([\r\n          ...prevState,\r\n          data.id\r\n        ]))\r\n        return\r\n      }\r\n    }\r\n    // при простом клике мышью\r\n    if (selectPool.includes(data.id)) {\r\n      if (selectPool.length > 1) {\r\n        setSelectPool([data.id])\r\n        return\r\n      }\r\n      setSelectPool([])\r\n    } else {\r\n      setSelectPool([data.id])\r\n    }\r\n  }\r\n\r\n\r\n  const deleteComplitely = () => {\r\n    deleteResult({\r\n      variables: {\r\n        results: selectPool\r\n      },\r\n      update: (cache, { data }) => {\r\n        const deletedPool = data.deleteResults.map(del => del.id)\r\n        setActiveResults(activeResults.filter(result => !deletedPool.includes(result.id)))\r\n        console.log(cache.data.data);\r\n        cache.modify({\r\n          fields: {\r\n            pollResults(existingRefs, { readField }) {\r\n              console.log(existingRefs);\r\n              return existingRefs.filter(respRef => !deletedPool.includes(readField('id', respRef)))\r\n            }\r\n          }\r\n        })\r\n      }\r\n    })\r\n    setDelOpen(false)\r\n  }\r\n\r\n  const handleResultsDelete = () => {\r\n    setDelOpen(true)\r\n  }\r\n\r\n  const handleResultsBatchUpdate = () => {\r\n\r\n  }\r\n\r\n  const handleResultsExport = () => {\r\n    const resultsPool = activeResults.filter(result =>\r\n      selectPool.includes(result.id)\r\n    ).map(obj => obj.result)\r\n    const lResults = resultsPool.length\r\n    let allResults = ''\r\n    for (let i = 0; i < lResults; i++) {\r\n      const oderedResults = resultsPool[i].slice().sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n      const details = oderedResults.map(obj => {\r\n        if (obj.text !== '') {\r\n          return obj.code + ' ' + obj.text\r\n        }\r\n        return obj.code\r\n      })\r\n      allResults += details + ',999' + '\\n'\r\n    }\r\n    downloadIt(allResults)\r\n  }\r\n\r\n  const downloadIt = (data) => {\r\n    const element = document.createElement('a')\r\n    const file = new Blob([data], { type: 'text/plain' });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"myFile.txt\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  }\r\n\r\n  // ФИЛЬТРЫ\r\n  const handleCityChange = (_, values) => {\r\n    const cities = values.map(city => city.value)\r\n    setActiveFilters({\r\n      cities\r\n    })\r\n  }\r\n\r\n  const handleStatusChahge = (_, values) => {\r\n\r\n  }\r\n\r\n\r\n  const handleDataChange = (e) => {\r\n    const date = e.target.value\r\n    setDdate(date)\r\n  }\r\n\r\n\r\n  const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\n  const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <ConfirmDialog\r\n        open={delOpen}\r\n        confirm={deleteComplitely}\r\n        close={() => setDelOpen(false)}\r\n        data={\r\n          {\r\n            title: 'Удалить выбранные результаты?',\r\n            text: 'Внимание! Выбранные результаты будут уничтожены безвозвратно. Будьте внимательны!'\r\n          }\r\n        }\r\n      />\r\n      <div className=\"result-service-zone\">\r\n        {/* <Typography className=\"header\">Общие результаты опроса</Typography> */}\r\n        <Grid container justify=\"space-between\" className=\"service-buttons\">\r\n          <Box className=\"main-buttons\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleResultsExport}\r\n              disabled={!selectPool.length}\r\n              startIcon={<PublishIcon />}\r\n            >\r\n              Выгрузить\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={handleResultsBatchUpdate}\r\n              disabled={!selectPool.length}\r\n              startIcon={<DynamicFeedIcon />}\r\n            >\r\n              Обновить\r\n            </Button>\r\n          </Box>\r\n          <Box>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={handleResultsDelete}\r\n              disabled={!selectPool.length}\r\n              startIcon={<DeleteIcon />}\r\n            >\r\n              Удалить\r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n        <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n          <Grid item xs={12} sm={6} md={3} lg={3}>\r\n            <TextField\r\n              style={{ width: '100%' }}\r\n              id=\"date\"\r\n              type=\"date\"\r\n              variant=\"outlined\"\r\n              value={ddate}\r\n              onChange={handleDataChange}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    {true ?\r\n                      <Tooltip title=\"Очистить\">\r\n                        <ClearIcon style={{ cursor: \"pointer\" }}\r\n                          onClick={() => setDdate('')}\r\n                        />\r\n                      </Tooltip>\r\n                      :\r\n                      \"\"\r\n                    }\r\n                  </InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3} lg={3}>\r\n            <Autocomplete\r\n              multiple\r\n              limitTags={1}\r\n              options={filters.age}\r\n              disableCloseOnSelect\r\n              clearOnEscape\r\n              onChange={handleChange}\r\n              noOptionsText={\"Опции не настроены\"}\r\n              getOptionLabel={(option) => option.title}\r\n              renderOption={(option, { selected }) => (\r\n                <React.Fragment>\r\n                  <Checkbox\r\n                    icon={icon}\r\n                    checkedIcon={checkedIcon}\r\n                    style={{ marginRight: 8 }}\r\n                    checked={selected}\r\n                  />\r\n                  {option.title}\r\n                </React.Fragment>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"outlined\" label=\"Возраст\" />\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3} lg={3}>\r\n            <Autocomplete\r\n              multiple\r\n              limitTags={1}\r\n              options={filters.sex}\r\n              disableCloseOnSelect\r\n              clearOnEscape\r\n              onChange={handleChange}\r\n              noOptionsText={\"Опции не настроены\"}\r\n              getOptionLabel={(option) => option.title}\r\n              renderOption={(option, { selected }) => (\r\n                <React.Fragment>\r\n                  <Checkbox\r\n                    icon={icon}\r\n                    checkedIcon={checkedIcon}\r\n                    style={{ marginRight: 8 }}\r\n                    checked={selected}\r\n                  />\r\n                  {option.title}\r\n                </React.Fragment>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"outlined\" label=\"Пол\" />\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3} lg={3}>\r\n            <Autocomplete\r\n              multiple\r\n              limitTags={1}\r\n              options={filters.cities.sort((a, b) => a.category - b.category)}\r\n              groupBy={(option) => option.category}\r\n              disableCloseOnSelect\r\n              clearOnEscape\r\n              onChange={handleCityChange}\r\n              noOptionsText={\"Опции не настроены\"}\r\n              getOptionLabel={(option) => option.title}\r\n              renderOption={(option, { selected }) => (\r\n                <React.Fragment>\r\n                  <Checkbox\r\n                    icon={icon}\r\n                    checkedIcon={checkedIcon}\r\n                    style={{ marginRight: 8 }}\r\n                    checked={selected}\r\n                  />\r\n                  {option.title}\r\n                </React.Fragment>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"outlined\" label=\"Город\"\r\n                />\r\n              )}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n          <Grid item xs={12} sm={6} md={3} lg={3}>\r\n            <Autocomplete\r\n              multiple\r\n              limitTags={1}\r\n              options={filters.intervievers}\r\n              disableCloseOnSelect\r\n              clearOnEscape\r\n              onChange={handleChange}\r\n              noOptionsText={\"Опции не настроены\"}\r\n              getOptionLabel={(option) => option.title}\r\n              renderOption={(option, { selected }) => (\r\n                <React.Fragment>\r\n                  <Checkbox\r\n                    icon={icon}\r\n                    checkedIcon={checkedIcon}\r\n                    style={{ marginRight: 8 }}\r\n                    checked={selected}\r\n                  />\r\n                  {option.title}\r\n                </React.Fragment>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"outlined\" label=\"Интервьюер\" />\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3} lg={3}>\r\n            <Autocomplete\r\n              options={filters.status}\r\n              onChange={handleStatusChahge}\r\n              noOptionsText={\"Опции не настроены\"}\r\n              getOptionLabel={(option) => option.title}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"outlined\" label=\"Статус\" />\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item container xs={12} sm={6} md={3} lg={3} justify=\"flex-start\">\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={handleResultsExport}\r\n              disabled={!selectPool.length}\r\n            >\r\n              применить\r\n            </Button>\r\n          </Grid>\r\n          <Grid item container xs={12} sm={6} md={3} lg={3} justify=\"flex-end\">\r\n            <Box m={1}>\r\n              <a href=\"\">Есть дубли</a>\r\n            </Box>\r\n            <Box m={1}>\r\n              <a href=\"\">Есть проблемы</a>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <ConfirmDialog\r\n        open={delConfirm}\r\n        confirm={handleDialogConfirm}\r\n        close={handleDialogClose}\r\n        data={\r\n          {\r\n            title: 'Удалить населенный пункт?',\r\n            text: 'Внимание! Результаты опросов учитывают н.п. в которых они проводились, удаление приведет к потере части статистики и некорректности ее отображения.'\r\n          }\r\n        }\r\n      />\r\n      <Grid container spacing={3} xs={12}>\r\n        {activeResults.map((result, index) => (\r\n          <Grid item xs={12} sm={6} md={3} lg={2} key={index} >\r\n            <RespondentCard\r\n              result={result}\r\n              index={index}\r\n              show={showDetails}\r\n              edit={handleEdit}\r\n              selected={selectPool.includes(result.id)}\r\n              select={handleSelect}\r\n            />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n\r\nexport default OverallResults","import React, { Fragment, useEffect, useRef, useState } from 'react'\r\nimport Chart from 'chart.js'\r\n\r\nconst BarChart = ({ question }) => {\r\n\r\n  const [data, setData] = useState({\r\n    labels: question.answers.map((_, index) => index + 1 + ''),\r\n    set: [\r\n      {\r\n        label: 'Кол-во',\r\n        data: question.answers.map(answer => answer.results.length)\r\n      }\r\n    ]\r\n  })\r\n\r\n  const chartRef = useRef()\r\n  useEffect(() => {\r\n    const myChartRef = chartRef.current.getContext(\"2d\")\r\n\r\n    new Chart(myChartRef, {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: data.labels,\r\n        datasets: data.set\r\n      },\r\n      options: {\r\n        showLines: false, // disable for all datasets\r\n        animation: {\r\n          duration: 0 // general animation time\r\n        },\r\n        hover: {\r\n          animationDuration: 0 // duration of animations when hovering an item\r\n        },\r\n        responsiveAnimationDuration: 0, // animation duration after a resize\r\n        legend: {\r\n          display: false,\r\n          labels: {\r\n            // This more specific font property overrides the global property\r\n            fontColor: 'black',\r\n            fontSize: 16\r\n          }\r\n        },\r\n        scales: {\r\n          yAxes: [{\r\n            ticks: {\r\n              beginAtZero: true\r\n            }\r\n          }]\r\n        }\r\n      }\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <canvas ref={chartRef} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default BarChart","import React, { Fragment, useState } from 'react'\r\n\r\nconst LinearTable = ({ index, question }) => {\r\n  const [count, setCount] = useState(\r\n    question.answers.reduce((acum, curr) => {\r\n      return acum + curr.results.length\r\n    }, 0)\r\n  )\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"linear-table\">\r\n        <table >\r\n          <tr>\r\n            <th>&nbsp;</th><th>Ответов</th><th>%</th>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"question-title\" colspan=\"3\"><strong>{index + 1}. {question.title}</strong></td>\r\n          </tr>\r\n          {question.answers.map((answer, index) =>\r\n            <tr>\r\n              <td className=\"answer-title\">\r\n                <strong>{index + 1}</strong>. - <strong>{answer.code}</strong> {answer.title}</td><td>{answer.results.length}</td>\r\n              <td>\r\n                {count ?\r\n                  (answer.results.length / count * 100).toFixed(1) :\r\n                  '-'\r\n                }\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </table>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default LinearTable","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_WITH_RESULTS = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      questions {\r\n        id\r\n        title\r\n        order\r\n        limit\r\n        type\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n          results {\r\n            id\r\n            code\r\n            text\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n`","import React, { Fragment } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\n\r\nimport BarChart from '../../components/BarChart'\r\nimport LinearTable from '../../components/LinearTable'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_POLL_WITH_RESULTS } from './queries'\r\n\r\nconst LinearDistribution = ({ id }) => {\r\n\r\n  const {\r\n    data: pollResults,\r\n    loading: pollResultsLoading,\r\n    error: pollResultsError\r\n  } = useQuery(GET_POLL_WITH_RESULTS, {\r\n    variables: {\r\n      id\r\n    },\r\n    onCompleted: () => {\r\n      console.log(pollResults);\r\n    }\r\n  });\r\n\r\n  if (pollResultsLoading) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (pollResultsError) {\r\n    console.log(JSON.stringify(pollResultsError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <p> Линейное распределение ответов</p>\r\n      <Grid item container>\r\n        {pollResults.poll.questions.map((question, index) => (\r\n          <Fragment>\r\n            <Grid xs={12} md={6}>\r\n              <LinearTable index={index} key={question.id} question={question} />\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n              <BarChart question={question} />\r\n            </Grid>\r\n            <p></p>\r\n          </Fragment>\r\n        ))}\r\n      </Grid>\r\n\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default LinearDistribution","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n          results {\r\n            id\r\n            code\r\n            text\r\n          }\r\n        }\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useEffect, useState } from 'react'\r\nimport { mainUrl } from \"../../../../mainconfig\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\n\r\nimport LinearTable from '../../components/LinearTable'\r\nimport BarChart from '../../components/BarChart'\r\n\r\nimport { parseIni, normalizeLogic } from '../../../../modules/PollDrive/lib/utils'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_POLL_DATA } from './queries'\r\n\r\nconst BatchInput = ({ id }) => {\r\n  const [dataPool, setDataPool] = useState(false)\r\n  const [logic, setLogic] = useState(false)\r\n  const [processing, setProcessing] = useState(false)\r\n\r\n  const [displayData, setDisplayData] = useState(false)\r\n\r\n  useEffect(() => {\r\n\r\n    if (dataPool) {\r\n      const poll = pollData ? pollData.poll : null\r\n      if (poll) {\r\n        const questions = poll.questions\r\n        const resultPoolLength = dataPool.length\r\n        // пройтись по невидимым сперва\r\n\r\n        const newQuestionsPool = questions.map(question => {\r\n          const newAnswersPool = question.answers.map(answer => {\r\n            let temp = [...answer.results]\r\n            for (let i = 0; i < resultPoolLength; i++) {\r\n              if (dataPool[i].includes(answer.code)) {\r\n                temp.push({\r\n                  code: answer.code,\r\n                  text: ''\r\n                })\r\n              }\r\n            }\r\n            return {\r\n              ...answer,\r\n              results: temp\r\n            }\r\n          })\r\n          return {\r\n            ...question,\r\n            answers: newAnswersPool\r\n          }\r\n        })\r\n        setDisplayData(newQuestionsPool)\r\n        console.log(newQuestionsPool);\r\n      }\r\n    }\r\n  }, [dataPool])\r\n\r\n  const {\r\n    data: pollData,\r\n    loading: pollDataLoading,\r\n    error: pollDataError\r\n  } = useQuery(GET_POLL_DATA, {\r\n    variables: {\r\n      id\r\n    },\r\n    onCompleted: () => {\r\n      handleConfigFile(pollData.poll.logic.path)\r\n      console.log(pollData);\r\n    }\r\n  });\r\n\r\n  const handleConfigFile = (filePath) => {\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const logic = parseIni(text)\r\n        // Нормализация ЛОГИКИ - здесь формируется ЛОГИКА опроса, на основании конфиг файла !!!\r\n        const normLogic = normalizeLogic(logic)\r\n        setLogic(normLogic)\r\n      })\r\n  }\r\n\r\n  const handleWarInput = (e) => {\r\n    e.preventDefault()\r\n    if (!e.target.files[0]) return\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        // + удаляем перенос строк\r\n        const oprTextRaw = reader.result.replace(/\\r?\\n/g, \"\")\r\n        const oprArrayRaw = oprTextRaw.split(',999')\r\n        const oprArray = oprArrayRaw.filter(arr => arr.length)\r\n        const aLength = oprArray.length\r\n        let splitedCodesArrays = []\r\n        for (let i = 0; i < aLength; i++) {\r\n          const tempAr = oprArray[i].split(',')\r\n          const tempLength = tempAr.length\r\n          let normTemp = []\r\n          for (let j = 0; j < tempLength; j++) {\r\n            const atomData = tempAr[j]\r\n            normTemp.push(atomData.trim())\r\n          }\r\n          splitedCodesArrays.push(normTemp)\r\n        }\r\n        setDataPool(splitedCodesArrays)\r\n        setProcessing(false)\r\n      }\r\n    }\r\n    reader.readAsText(file);\r\n    e.target.value = \"\"\r\n  }\r\n\r\n  if (pollDataLoading) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (pollDataError) {\r\n    console.log(JSON.stringify(pollDataError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (processing) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Loading />\r\n      <p> Пакетный ввод данных</p>\r\n      <Grid container spacing={3} xs={12}>\r\n        <Grid item xs={12}>\r\n          <Box>\r\n            <label>Подгрузите файл с результатами</label>\r\n            <br />\r\n            <input\r\n              type=\"file\"\r\n              onInput={handleWarInput}\r\n            />\r\n          </Box>\r\n        </Grid>\r\n        {displayData &&\r\n          displayData.map((question, index) => (\r\n            <Fragment>\r\n              <Grid xs={12} md={6}>\r\n                <LinearTable index={index} key={question.id} question={question} />\r\n                <p></p>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <BarChart question={question} />\r\n                <p></p>\r\n              </Grid>\r\n            </Fragment>\r\n          ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default BatchInput","import React from 'react'\r\n\r\nimport AdaptiveTabs from '../../components/AdaptiveTabs'\r\n\r\nimport Generation from './containers/Generation'\r\nimport OverallResults from './containers/OverallResults'\r\nimport LinearDistibution from './containers/LinearDistribution'\r\nimport BatchInput from './containers/BatchInput'\r\n\r\nconst PollResults = ({ id }) => {\r\n  const data = [\r\n    {\r\n      label: 'Общие',\r\n      component: <OverallResults id={id} />\r\n    },\r\n    {\r\n      label: 'Линейка',\r\n      component: <LinearDistibution id={id} />\r\n    },\r\n    {\r\n      label: 'Пакетный',\r\n      component: <BatchInput id={id} />\r\n    },\r\n    {\r\n      label: 'Тестирование',\r\n      component: <Generation id={id} />\r\n    }\r\n  ]\r\n  return (\r\n    <AdaptiveTabs data={data} />\r\n  )\r\n\r\n}\r\n\r\nexport default PollResults","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollResults from '../modules/PollResults'\r\n\r\nconst Results = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Результаты ` + code} />\r\n      <div>\r\n        <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n          <PollResults id={id} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Results","function testXml(xmlString) {\r\n  var parser = new DOMParser();\r\n  var docError = parser.parseFromString('INVALID', 'text/xml');\r\n  var parsererrorNS = docError.getElementsByTagName(\"parsererror\")[0].namespaceURI;\r\n  var doc = parser.parseFromString(xmlString, 'text/xml');\r\n  if (doc.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0) {\r\n    return false\r\n  }\r\n  return doc;\r\n}\r\n\r\nconst xmlparser = (xmlString) => {\r\n  const xml = testXml(xmlString)\r\n  if (xml) {\r\n    const results = xml.getElementsByTagName('a')\r\n    const lResults = results.length\r\n    let outData = []\r\n    for (let i = 0; i < lResults; i++) {\r\n      let resultData = {\r\n        unit: results[i].getAttribute('usr_intrv'),\r\n        date: results[i].getAttribute('date_intrv'),\r\n        lan: results[i].getAttribute('start-lan'),\r\n        lon: results[i].getAttribute('start-lon'),\r\n      }\r\n      const questions = results[i].getElementsByTagName('v')\r\n      const lQuestions = questions.length\r\n      let answersPool = []\r\n      for (let i = 0; i < lQuestions; i++) {\r\n        const answers = questions[i].getElementsByTagName('o')\r\n        const lAnswers = answers.length\r\n        for (let i = 0; i < lAnswers; i++) {\r\n          const code = answers[i].getAttribute('c').padStart(3, \"0\")\r\n          answersPool.push(code)\r\n        }\r\n        resultData.answers = answersPool\r\n      }\r\n      outData.push(resultData)\r\n    }\r\n    return outData\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default xmlparser","import React, { Fragment, useState } from 'react'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport xmlparser from '../../lib/xmlparser'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst ParchaXmlAnalyzer = () => {\r\n  const [parchaData, setParchaData] = useState(null)\r\n  const [processing, setProcessing] = useState(false)\r\n  const classes = useStyles();\r\n\r\n  const handleInput = (e) => {\r\n    e.preventDefault()\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        const xmlText = reader.result\r\n        const xml = xmlparser(xmlText)\r\n        if (xml) {\r\n          setParchaData(xml)\r\n          setProcessing(false)\r\n          return\r\n        } else {\r\n          setProcessing(false)\r\n          console.log('Неправильный формат XML');\r\n          return\r\n        }\r\n      }\r\n      reader.readAsText(file);\r\n    }\r\n  }\r\n\r\n  const UnitInfo = ({ data }) => {\r\n    console.log(data);\r\n    if (data.lan !== '' || data.lon !== '') {\r\n      return data.answers.toString() + ',999'\r\n    } else {\r\n      return data.answers.toString() + ',999' + '-'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Backdrop className={classes.backdrop} open={processing} >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <input\r\n        type=\"file\"\r\n        onInput={handleInput}\r\n      />\r\n      <div className=\"parcha-results\">\r\n        {parchaData ?\r\n          parchaData.map((result, i) => (\r\n            <div>\r\n              { <UnitInfo data={result} />}\r\n            </div>\r\n          )) : <p>Подгрузите данные</p>\r\n        }\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ParchaXmlAnalyzer","import React, { Fragment } from 'react'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\nconst WarShow = ({ data }) => {\r\n  return (\r\n    <Fragment>\r\n      <Grid container spacing={3}>\r\n        {data.map(({ person, places }, index) => {\r\n          const placesOfWork = places.map(({ title, workDays }) => {\r\n            const workD = workDays.map(d => <span><span>{d}</span><br /></span>)\r\n            return (\r\n              <span>\r\n                <span className=\"work-title\">{title}</span><br />\r\n                <span>{workD}</span>\r\n              </span>\r\n            )\r\n          })\r\n          return (\r\n            <Grid item xs={6} sm={6} md={4}>\r\n              <Paper>\r\n                <span>№ п.п. {index + 1}</span><br />\r\n                <span>№ по списку {person[0]}</span><br />\r\n                <span>{person[1]}</span><span className=\"person-name\">{`${person[2]} ${person[3]} ${person[4].slice(0, -1)} `}</span><br />\r\n                <span>{`${person[2]} ${person[3].substring(0, 1)}.${person[4].substring(0, 1)}. `}</span><br />\r\n                <span>Дата рождения: {person[5]}</span><br />\r\n                <span>Дата увольнения:</span><span className=\"person-out\"> {person[6]}</span>\r\n                <Divider />\r\n                <span className=\"work-header\"><em>Места работы:</em></span><br />\r\n                <span>{placesOfWork}</span>\r\n              </Paper>\r\n            </Grid>\r\n          )\r\n        })}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WarShow","export const pensParser = (text) => {\r\n  let empty = []\r\n  let need = []\r\n  let persons = []\r\n  const rr = text.split('\\n\\r')\r\n  const regEx = /нет сведен.., составляющ.. пенсионн.. прав.?/\r\n  for (let i = 0; i < rr.length; i++) {\r\n    if (regEx.test(rr[i])) {\r\n      let person = []\r\n      const splited = rr[i].split(' ')\r\n      person.push(splited[7], splited[8], splited[9], splited[10])\r\n      empty.push({\r\n        person,\r\n        data: null\r\n      })\r\n    } else {\r\n      let person = []\r\n      const splited = rr[i].split(' ')\r\n      person.push(splited[7], splited[8], splited[9], splited[10])\r\n      const full = rr[i]\r\n      need.push({\r\n        person,\r\n        data: full\r\n      })\r\n    }\r\n  }\r\n  const result = {\r\n    empty,\r\n    need\r\n  }\r\n  return result\r\n}\r\n\r\nexport const warior = (text) => {\r\n  let empty = []\r\n  let need = []\r\n  let persons = []\r\n  const rr = text.split('\\n')\r\n  for (let i = 0; i < rr.length; i++) {\r\n    let person = []\r\n    const splited = rr[i].split(';')\r\n    person.push(splited[0], splited[1], splited[2], splited[3], splited[4])\r\n    persons.push(person)\r\n  }\r\n  return persons\r\n}\r\n\r\nconst compareLists = (war, pens) => {\r\n  let doesNotMatch = []\r\n  let warMatchPool = []\r\n  // подсчет всех - просто промежуточные данные\r\n  const pensData = [...pens.empty, ...pens.need]\r\n  for (let i = 0; i < war.length; i++) {\r\n    const warPersonName = war[i][2]\r\n    const warPersonBorn = war[i][3]\r\n    const warPersonDismissal = war[i][4]\r\n    const warPersonSurname = warPersonName.split(' ')[0].toLowerCase()\r\n    let comp = 0\r\n    for (let j = 0; j < pensData.length; j++) {\r\n      const pensPersonSurname = pensData[j].person[0].toLowerCase()\r\n      const pensPersonBorn = pensData[j].person[3]\r\n      if (warPersonSurname === pensPersonSurname & warPersonBorn === pensPersonBorn) {\r\n        comp++\r\n      }\r\n    }\r\n    if (comp) {\r\n      warMatchPool.push(war[i])\r\n    } else {\r\n      doesNotMatch.push(war[i])\r\n    }\r\n  }\r\n  // вычисление и склеивание только нужных персон\r\n  const pensNeedData = [...pens.need]\r\n  let resulNeedData = []\r\n  let resultNotNeedData = []\r\n  for (let i = 0; i < warMatchPool.length; i++) {\r\n    const warPersonNum = warMatchPool[i][0]\r\n    const warPersonRank = warMatchPool[i][1]\r\n    const warPersonName = warMatchPool[i][2]\r\n    const warPersonBorn = warMatchPool[i][3]\r\n    const warPersonDismissal = warMatchPool[i][4]\r\n    const warPersonSurname = warPersonName.split(' ')[0].toLowerCase()\r\n    let comp = 0\r\n    for (let j = 0; j < pensNeedData.length; j++) {\r\n      const pensPersonSurname = pensNeedData[j].person[0].toLowerCase()\r\n      const pensPersonBorn = pensNeedData[j].person[3]\r\n      if (warPersonSurname === pensPersonSurname & warPersonBorn === pensPersonBorn) {\r\n        const persD = [warPersonNum, warPersonRank, ...pensNeedData[j].person, warPersonDismissal]\r\n        resulNeedData.push({\r\n          person: persD,\r\n          data: pensNeedData[j].data\r\n        })\r\n        comp++\r\n      }\r\n    }\r\n    if (!comp) {\r\n      // В/сл по которым нет сведения в пенсионном фонде\r\n      const person = [warPersonNum, warPersonRank, warPersonName, warPersonBorn, warPersonDismissal]\r\n      resultNotNeedData.push(\r\n        person\r\n      )\r\n    }\r\n  }\r\n  return resulNeedData\r\n}\r\n\r\nexport const processLists = (war, pens) => {\r\n  const resulNeedData = compareLists(war, pens)\r\n  let aLength = resulNeedData.length\r\n  // let aLength = 4\r\n  const regEx = /Факт работы \\(с 2017/;\r\n  let normalize = []\r\n  let sheeet = []\r\n  let finalResult = []\r\n  for (let i = 0; i < aLength; i++) {\r\n    const personData = resulNeedData[i]\r\n    const person = personData.person\r\n    const places = personData.data\r\n    const splited = places.split('\\n').slice(3)\r\n    // if (!regEx.test(splited[0])) {\r\n    //   console.log(person);\r\n    // }\r\n    finalResult.push({\r\n      person,\r\n      places: [...glueNormData(splited.slice(1))]\r\n    })\r\n  }\r\n  return finalResult\r\n}\r\n\r\nexport const compareDates = (data) => {\r\n  const intrestPersons = data.map((obj, index) => {\r\n    const dateReg = /^(\\d{2}).(\\d{2}).(\\d{4})/\r\n    const dateOfDismissal = Date.parse(obj.person[6].replace(dateReg, '01.$2.$3'))\r\n    const dateMatch = obj.person[6].match(dateReg)\r\n    const maxNeedDate = Date.parse('01.' + dateMatch[2] + '.' + (parseInt(dateMatch[3], 10) + + 2))\r\n    const places = obj.places\r\n    let placesOfWork = []\r\n    for (let i = 0; i < places.length; i++) {\r\n      const workDate = places[i].work\r\n      let workArray = []\r\n      for (let j = 0; j < workDate.length; j++) {\r\n        const dateInWork = Date.parse(getDateFromString(workDate[j]))\r\n        if (dateInWork >= dateOfDismissal & dateInWork <= maxNeedDate) {\r\n          workArray.push(workDate[j])\r\n        }\r\n      }\r\n      if (workArray.length) {\r\n        placesOfWork.push({\r\n          title: places[i].title,\r\n          workDays: workArray\r\n        })\r\n      }\r\n    }\r\n    if (placesOfWork.length) {\r\n      return { ...obj, places: placesOfWork }\r\n    } else {\r\n      return false\r\n    }\r\n  }).filter(person => person)\r\n  return intrestPersons\r\n}\r\n\r\nconst getDateFromString = (dString) => {\r\n  const reg = /([а-яА-Я]+)\\s(\\d{4})/\r\n  const dd = dString.match(reg)\r\n  const month = dd[1]\r\n  const year = dd[2]\r\n  switch (month) {\r\n    case 'январь':\r\n      return '01.01.' + year\r\n    case 'февраль':\r\n      return '01.02.' + year\r\n    case 'март':\r\n      return '01.03.' + year\r\n    case 'апрель':\r\n      return '01.04.' + year\r\n    case 'май':\r\n      return '01.05.' + year\r\n    case 'июнь':\r\n      return '01.06.' + year\r\n    case 'июль':\r\n      return '01.07.' + year\r\n    case 'август':\r\n      return '01.08.' + year\r\n    case 'сентябрь':\r\n      return '01.09.' + year\r\n    case 'октябрь':\r\n      return '01.10.' + year\r\n    case 'ноябрь':\r\n      return '01.11.' + year\r\n    case 'декабрь':\r\n      return '01.12.' + year\r\n  }\r\n}\r\n\r\nconst glueNormData = (placesRaw) => {\r\n  let places = []\r\n  let dates = 1\r\n  let title = ''\r\n  let work = []\r\n  const dataReg = /^(\\S+) (\\d{4})\\s/\r\n  // обработка данных от ПФР\r\n  for (let k = 0; k < placesRaw.length; k++) {\r\n    if (!dataReg.test(placesRaw[k])) {\r\n      if (dates) {\r\n        places = [...places, { title, work }]\r\n        title = placesRaw[k]\r\n        work = []\r\n      } else {\r\n        title += \" \" + placesRaw[k]\r\n      }\r\n      dates = 0\r\n    } else {\r\n      work.push(placesRaw[k])\r\n      if (k === placesRaw.length - 1) {\r\n        places = [...places, { title, work }]\r\n      }\r\n      dates = 1\r\n    }\r\n  }\r\n  return places.slice(1)\r\n}\r\n\r\n\r\n// уже не надо\r\nconst glueSheetData = (placesRaw) => {\r\n  let places = []\r\n  let dates = 1\r\n  let title = ''\r\n  let work = []\r\n  const dataReg = /\\d{2}.\\d{2}.\\d{4}-\\d{2}.\\d{2}.\\d{4}/\r\n  const dataRegEx = /^(\\S+) (\\d{4})\\s/\r\n  // обработка данных от ПФР\r\n  for (let k = 0; k < placesRaw.length; k++) {\r\n    if (!dataReg.test(placesRaw[k]) & !dataRegEx.test(placesRaw[k])) {\r\n      if (dates) {\r\n        places = [...places, { title, work }]\r\n        title = placesRaw[k]\r\n        work = []\r\n      } else {\r\n        title += \" \" + placesRaw[k]\r\n      }\r\n      dates = 0\r\n    } else {\r\n      work.push(placesRaw[k])\r\n      if (k === placesRaw.length - 1) {\r\n        places = [...places, { title, work }]\r\n      }\r\n      dates = 1\r\n    }\r\n  }\r\n\r\n  // нормализовать даты\r\n  const workDates = places.map(obj => {\r\n    const workArray = obj.work\r\n    for (let i = 0; i < workArray.length; i++) {\r\n      if (dataReg.test(workArray[i])) {\r\n        console.log(workArray[i]);\r\n      }\r\n    }\r\n    return obj\r\n  })\r\n\r\n  return places.slice(1)\r\n}","import React, { Fragment, useState } from 'react'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport WarShow from '../WarShow'\r\nimport CsvShow from '../CsvShow'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { pensParser, warior, processLists, compareDates } from '../../lib/txtparser'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst WordAnalyzer = () => {\r\n  const [pensData, setPensData] = useState(null)\r\n  const [warData, setWarData] = useState(null)\r\n  const [processing, setProcessing] = useState(false)\r\n  const [errorMessage, setMessage] = useState(null)\r\n  const [ready, setReady] = useState(null)\r\n  const [processedData, setProcessedData] = useState(null)\r\n  const [finalData, setFinalData] = useState(null)\r\n  const classes = useStyles();\r\n\r\n  const handleInput = (e) => {\r\n    e.preventDefault()\r\n    setMessage(null)\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        const wordText = reader.result\r\n        const data = pensParser(wordText)\r\n        setPensData(data)\r\n        setProcessing(false)\r\n      }\r\n    }\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  const handleWarInput = (e) => {\r\n    e.preventDefault()\r\n    setMessage(null)\r\n    setProcessing(true)\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    if (file) {\r\n      reader.onloadend = () => {\r\n        const wordText = reader.result\r\n        const data = warior(wordText)\r\n        setWarData(data)\r\n        setProcessing(false)\r\n      }\r\n    }\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  const process = () => {\r\n    if (pensData && warData) {\r\n      setMessage(null)\r\n      const pData = processLists(warData, pensData)\r\n      setProcessedData(pData)\r\n      setReady(true)\r\n    } else {\r\n      setMessage('Не все данные подгружены')\r\n    }\r\n  }\r\n\r\n  const processEx = () => {\r\n    if (ready) {\r\n      const itrestPerson = compareDates(processedData)\r\n      console.log(itrestPerson);\r\n      setFinalData(itrestPerson)\r\n    } else {\r\n      if (pensData && warData) {\r\n        setMessage('Сперва нужно обработать')\r\n      } else {\r\n        setMessage('Не все данные подгружены')\r\n      }\r\n    }\r\n  }\r\n\r\n  const UnitInfo = ({ data }) => {\r\n    console.log(data);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Backdrop className={classes.backdrop} open={processing} >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs>\r\n          <Box>\r\n            <label>Список военных</label>\r\n            <br />\r\n            <input\r\n              type=\"file\"\r\n              onInput={handleWarInput}\r\n            />\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Box>\r\n            <label>Список песионного фонда</label>\r\n            <br />\r\n            <input\r\n              type=\"file\"\r\n              onInput={handleInput}\r\n            />\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={3}>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={process}>\r\n            Обработать\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={processEx}>\r\n            Сравнить даты\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <p></p>\r\n      {errorMessage ?\r\n        <Alert severity=\"error\">{errorMessage}</Alert>\r\n        :\r\n        <p></p>\r\n      }\r\n      <div className=\"parcha-results\">\r\n        {finalData ?\r\n          <WarShow data={finalData} />\r\n          : <p></p>\r\n        }\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WordAnalyzer","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport ParchaXmlAnalyzer from './components/ParchaXmlAnalyzer'\r\nimport WordAnalyzer from './components/WordAnalyzer'\r\n\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      className=\"right-pannel\"\r\n      hidden={value !== index}\r\n      id={`vertical-tabpanel-${index}`}\r\n      aria-labelledby={`vertical-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction allProps(index) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    'aria-controls': `vertical-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    display: 'flex',\r\n  },\r\n  tabs: {\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n    overflow: 'visible'\r\n  },\r\n}));\r\n\r\n\r\nconst PollSettings = ({ id, code }) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Tabs\r\n        orientation=\"vertical\"\r\n        variant=\"scrollable\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        className={classes.tabs}\r\n      >\r\n        <Tab label=\"Парча\" {...allProps(0)} />\r\n        <Tab label=\"Word\" {...allProps(1)} />\r\n      </Tabs>\r\n      <TabPanel value={value} index={0}>\r\n        <ParchaXmlAnalyzer />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <WordAnalyzer />\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PollSettings","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container'\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport DataAnalyzer from '../modules/DataAnalyzer'\r\n\r\nconst Analyze = () => {\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Анализатор данных`} />\r\n      <div style={{ paddingTop: '10px' }}>\r\n        <Container maxWidth=\"xl\">\r\n          <DataAnalyzer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Analyze","import React, { Fragment } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport SettingBar from '../components/SettingBar'\r\n// import Test from '../containers/Test'\r\n\r\n// const Tester = observer(\r\nconst TesterPage = () => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title='Тестирование инерфейса' />\r\n      <Container maxWidth=\"lg\">\r\n        {/* <Test /> */}\r\n      </Container>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default TesterPage","import { gql } from '@apollo/client'\r\n\r\nexport const GET_POLL_DATA = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questionsCount\r\n      answersCount\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        topic {\r\n          id\r\n          title\r\n        }\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n          code\r\n        }\r\n      }\r\n      logic {\r\n        path\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\nimport { mainUrl } from '../../../../mainconfig'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport EmojiPeopleIcon from '@material-ui/icons/EmojiPeople';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\n\r\nimport { parseIni, normalizeLogic } from '../../../PollDrive/lib/utils'\r\nimport { useQuery } from '@apollo/client'\r\n\r\nimport { GET_POLL_DATA } from \"./queries\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  popover: {\r\n    pointerEvents: 'none',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst ServiceIcons = ({ answer }) => {\r\n  const edit = (\r\n    <Tooltip key={1} title=\"Свободный ответ\">\r\n      <EditIcon />\r\n    </Tooltip>\r\n  )\r\n  const difficult = (\r\n    <Tooltip key={2} title=\"Затрудняюсь ответить\">\r\n      <EmojiPeopleIcon />\r\n    </Tooltip>\r\n  )\r\n  const unique = (\r\n    <Tooltip key={3} title=\"Уникальный ответ\">\r\n      <FlashOnIcon />\r\n    </Tooltip>\r\n  )\r\n  let r = []\r\n  if (answer.difficult) {\r\n    r.push(difficult)\r\n  }\r\n  if (answer.freeAnswer) {\r\n    r.push(edit)\r\n  }\r\n  if (answer.unique) {\r\n    r.push(unique)\r\n  }\r\n  return r\r\n}\r\n\r\nconst AnswerCard = ({ answer, index }) => {\r\n  return (\r\n    <div className={answer.disabled ? \"answer-card invisible\" : \"answer-card\"}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Box m={1}>\r\n          <span className=\"answer-number\">{index + 1}.</span>\r\n          <span className=\"devider\"> </span>\r\n          <span className=\"answer-code\">{answer.code}</span>\r\n          <span className=\"devider\"> - </span>\r\n          <span className=\"answer-title\">{answer.title}</span>\r\n\r\n        </Box>\r\n        <Box m={1}>\r\n          <span>\r\n            <ServiceIcons answer={answer} />\r\n          </span>\r\n        </Box>\r\n      </Grid>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst QuestionTopic = ({ topic }) => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const handlePopoverOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handlePopoverClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const open = Boolean(anchorEl);\r\n\r\n  return (\r\n    <Fragment>\r\n      <InfoIcon\r\n        onMouseEnter={handlePopoverOpen}\r\n        onMouseLeave={handlePopoverClose}\r\n        fontSize=\"small\" />\r\n      <Popover\r\n        className={classes.popover}\r\n        classes={{\r\n          paper: classes.paper,\r\n        }}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left',\r\n        }}\r\n        onClose={handlePopoverClose}\r\n        disableRestoreFocus\r\n      >\r\n        <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n          Тема: {topic.title}\r\n        </Typography>\r\n      </Popover>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nconst QuestionCard = ({ question, index }) => {\r\n  return (\r\n    <Card className=\"question-card\">\r\n      <CardContent>\r\n        <div className=\"question-header\">\r\n          <Tooltip title=\"Макс. кол-во ответов\">\r\n            <span className=\"question-limit\">{question.limit}</span>\r\n          </Tooltip>\r\n          <span className=\"question-number\">{index + 1}.</span>\r\n          <span className=\"question-title\" color=\"textSecondary\">\r\n            {question.title}\r\n            <QuestionTopic topic={question.topic} />\r\n          </span>\r\n        </div>\r\n        {question.answers.map((answer, index) => (\r\n          <AnswerCard key={index} answer={answer} index={index} />\r\n        ))}\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst CommonSetting = ({ id }) => {\r\n  const [ready, setReady] = useState(false)\r\n  const [questions, setQuestions] = useState()\r\n  const {\r\n    loading,\r\n    error,\r\n    data: pollData\r\n  } = useQuery(GET_POLL_DATA, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      handleConfigFileAndUpdateCache(pollData.poll)\r\n    }\r\n  })\r\n\r\n\r\n  const handleConfigFileAndUpdateCache = (poll) => {\r\n    const filePath = poll.logic.path\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        const normalizedLogic = normalizeLogic(parseIni(text))\r\n        const updatedQuestions = modulateQuestionsWithLogic(normalizedLogic)\r\n        setQuestions(updatedQuestions.sort((a, b) => (a.order > b.order) ? 1 : -1))\r\n        setReady(true)\r\n      })\r\n  }\r\n\r\n  const modulateQuestionsWithLogic = (logic) => {\r\n    const modQuestions = pollData.poll.questions.map(question => {\r\n      const newAnswers = question.answers.map(answer => {\r\n        let suffix = {}\r\n        if (logic.invisible) {\r\n          if (logic.invisible.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              disabled: true\r\n            }\r\n          }\r\n        }\r\n        if (logic.freeAnswers) {\r\n          if (logic.freeAnswers.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              freeAnswer: true\r\n\r\n            }\r\n          }\r\n        }\r\n        if (logic.unique) {\r\n          if (logic.unique.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              unique: true\r\n            }\r\n          }\r\n        }\r\n        if (logic.difficult) {\r\n          if (logic.difficult.includes(answer.code)) {\r\n            suffix = {\r\n              ...suffix,\r\n              difficult: true\r\n            }\r\n          }\r\n        }\r\n        const newAnswer = {\r\n          ...answer,\r\n          ...suffix\r\n        }\r\n        return newAnswer\r\n      })\r\n      const newQuestion = {\r\n        ...question,\r\n        answers: newAnswers,\r\n        ffffuck: true\r\n      }\r\n      return newQuestion\r\n    })\r\n    return modQuestions\r\n  }\r\n\r\n  if (loading || !questions || !ready) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container className=\"common-settings\">\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          <strong>Тема: </strong>{pollData.poll.title}\r\n        </Typography>\r\n        <Grid\r\n          className=\"poll-info\"\r\n          container\r\n          direction=\"row\"\r\n          justify=\"space-between\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Box m={1}>\r\n            <div> Вопросов: {pollData.poll.questionsCount}</div>\r\n          </Box>\r\n          <Box m={1}>\r\n            <div> Ответов: {pollData.poll.answersCount}</div>\r\n          </Box>\r\n        </Grid>\r\n        {questions.map((question, index) => (\r\n          <QuestionCard question={question} key={question.id} index={index} />\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default CommonSetting","import { gql } from '@apollo/client'\r\n\r\nexport const logicQuery = gql`\r\n  query logicQuery($id: ID!) {\r\n    pollLogic(id: $id) {\r\n      id\r\n      path\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const saveConfigChanges = gql`\r\nmutation saveConfigChanges($path: String!, $text: String!) {\r\n  saveConfig(path: $path, text: $text)\r\n}\r\n`","import React, { Fragment, useState, useRef } from 'react'\r\nimport { mainUrl } from '../../../../mainconfig'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Box, Typography } from '@material-ui/core';\r\n\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { logicQuery } from \"./queries\"\r\nimport { saveConfigChanges } from \"./mutations\"\r\nimport { GET_POLL_DATA } from '../../containers/Common/queries'\r\n\r\nconst ConfigEditor = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  const [updated, setUpdated] = useState(false)\r\n  const [config, setConfig] = useState(null)\r\n  const [filePath, setFilePath] = useState(null)\r\n  const textRef = useRef()\r\n  const { loading, error, data } = useQuery(logicQuery, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      handleConfigFile(data.pollLogic.path)\r\n    },\r\n  })\r\n\r\n  const [saveConfig, { loading: configSaveLoading }] = useMutation(saveConfigChanges, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    onCompleted: () => {\r\n      setNoti({\r\n        type: 'success',\r\n        text: 'Конфиг сохранен успешно!'\r\n      })\r\n    },\r\n    refetchQueries: () => [{\r\n      query: GET_POLL_DATA,\r\n      variables: {\r\n        id\r\n      }\r\n    }]\r\n  })\r\n\r\n  const handleConfigFile = (filePath) => {\r\n    setFilePath(filePath)\r\n    fetch(mainUrl + filePath)\r\n      .then((r) => r.text())\r\n      .then(text => {\r\n        setConfig(text)\r\n      })\r\n  }\r\n\r\n  const handleSave = (e) => {\r\n    saveConfig({\r\n      variables: {\r\n        path: filePath,\r\n        text: textRef.current.value\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleConfigChange = (e) => {\r\n    if (config === e.currentTarget.value) {\r\n      setUpdated(false)\r\n      return\r\n    }\r\n    setUpdated(true)\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (configSaveLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  if (loading || !config) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n\r\n      <Grid item container>\r\n        <Grid item container justify=\"space-between\">\r\n          <Box p={1}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Отображение и настройка конфигурационного файла\r\n            </Typography>\r\n          </Box>\r\n          <Box>\r\n            <Tooltip title=\"Сохранить\">\r\n              <IconButton onClick={handleSave} disabled={!updated}>\r\n                <SaveIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Box>\r\n          <textarea\r\n            ref={textRef}\r\n            defaultValue={config}\r\n            onChange={handleConfigChange}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ConfigEditor","import { gql } from '@apollo/client'\r\n\r\nexport const DELETE_POLL = gql`\r\n  mutation deletePoll($id: ID!) {\r\n    deletePoll(id: $id) {\r\n      title\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_ACTIVE_POLLS } from '../../../PollHome/queries'\r\nimport { DELETE_POLL } from './mutations'\r\n\r\nconst DeletePoll = ({ id, code }) => {\r\n  const history = useHistory();\r\n  const [open, setOpen] = useState(false)\r\n  const [incorrect, setIncorrect] = useState(true)\r\n  const [delPoll, { poll }] = useMutation(DELETE_POLL, {\r\n    onCompleted: () => {\r\n      history.push(\"/\")\r\n    }\r\n  })\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handlePollDel = (id) => {\r\n    delPoll({\r\n      variables: {\r\n        id\r\n      },\r\n      refetchQueries: [{ query: GET_ALL_ACTIVE_POLLS }]\r\n    })\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const text = e.currentTarget.value.toUpperCase()\r\n    e.currentTarget.value = text\r\n    if (text.toUpperCase() === code) {\r\n      setIncorrect(false)\r\n    } else {\r\n      setIncorrect(true)\r\n    }\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    handlePollDel(id)\r\n  }\r\n\r\n  const deleteQuery = () => {\r\n    setOpen(true);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Удаление</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Это действие не может быть отменено.\r\n              Оно приведет к безвозвратному удалению ВСЕХ данных опроса.\r\n            </Typography>\r\n            <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n              Пожалуйста, введите КОД опроса.\r\n            </Typography>\r\n          </DialogContentText>\r\n          <TextField\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Код опроса\"\r\n            type=\"text\"\r\n            fullWidth\r\n            onChange={handleChange}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={handleDelete} color=\"primary\" disabled={incorrect}>\r\n            Удалить\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n        удаление опроса\r\n        </Typography>\r\n      <Typography variant=\"caption\" display=\"block\" gutterBottom>\r\n        После удаления ОПРОСА пути назад уже не будет. Пожалуйста, будьте внимательны.\r\n          </Typography>\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={deleteQuery}>\r\n        Удалить опрос\r\n          </Button>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default DeletePoll","import { gql } from '@apollo/client'\r\n\r\nexport const GET_ALL_CITIES_AND_ACTIVE = gql`\r\n  query ($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      cities {\r\n        id\r\n        title\r\n        population\r\n        category {\r\n          title\r\n        }\r\n      }\r\n    }\r\n    cities {\r\n      id\r\n      title\r\n      category {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const DELETE_CITY_FROM_ACTIVE = gql`\r\n  mutation ($id: ID!, $cities: [String]) {\r\n    deleteCityFromActive(id: $id, cities: $cities) {\r\n      id\r\n      cities {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const SET_ACTIVE_CITIES = gql`\r\n  mutation ($id: ID!, $cities: [String]) {\r\n    setPollCity(id: $id, cities: $cities) {\r\n      id\r\n      cities {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog'\r\n\r\nimport { gql, useApolloClient, useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_CITIES_AND_ACTIVE } from './queries'\r\nimport { SET_ACTIVE_CITIES, DELETE_CITY_FROM_ACTIVE } from './mutations'\r\n\r\nconst CitiesEditor = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  // const client = useApolloClient();\r\n  // const { currentUser } = client.readQuery({\r\n  //   query: gql`\r\n  //   query {\r\n  //     currentUser {\r\n  //       id\r\n  //       username\r\n  //     }\r\n  //   }\r\n  //   `,\r\n  // })\r\n  const [clear, setClear] = useState(0)\r\n  const [delId, setDelId] = useState(false)\r\n  const [allCities, setAllCitites] = useState()\r\n  const [availableCities, setAvailableCities] = useState()\r\n  const [selected, setSelected] = useState([])\r\n  const {\r\n    data: citiesData,\r\n    loading: citiesLoading,\r\n    error: cititesError\r\n  } = useQuery(GET_ALL_CITIES_AND_ACTIVE, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      const pollCities = citiesData.poll.cities\r\n      setAllCitites(citiesData.cities)\r\n      setAvailableCities(citiesData.cities.filter(\r\n        city => {\r\n          for (let i = 0; i < pollCities.length; i++) {\r\n            if (city.id === pollCities[i].id) {\r\n              return false\r\n            }\r\n          }\r\n          return true\r\n        }\r\n      ))\r\n    }\r\n  })\r\n  const [\r\n    setCityActive,\r\n    { loading: cityActivationLoading }\r\n  ] = useMutation(SET_ACTIVE_CITIES, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    update: (cache, { data: { setPollCity } }) => {\r\n      const cities = setPollCity.cities.map(city => city.id)\r\n      setAvailableCities(availableCities.filter(city => {\r\n        return !cities.includes(city.id)\r\n      }))\r\n    }\r\n  })\r\n  const [\r\n    deleteCity,\r\n    { loading: deleteCityLoading }\r\n  ] = useMutation(DELETE_CITY_FROM_ACTIVE, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Удалить не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    update: (cache, { data }) => {\r\n      const pollCities = data.deleteCityFromActive.cities\r\n      const aCitites = allCities.filter(city => {\r\n        for (let i = 0; i < pollCities.length; i++) {\r\n          if (city.id === pollCities[i].id) return false\r\n        }\r\n        return true\r\n      })\r\n      setAvailableCities(aCitites)\r\n    }\r\n  })\r\n\r\n  if (citiesLoading || !citiesData || !availableCities) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  const Loading = () => {\r\n    if (cityActivationLoading || deleteCityLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  if (cititesError) {\r\n    console.log(JSON.stringify(cititesError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const handleCityDelete = (id) => {\r\n    setDelId(id)\r\n  }\r\n\r\n  const handleDelConfirm = () => {\r\n    deleteCityCompletely([delId])\r\n    setDelId(false)\r\n  }\r\n\r\n  const handleAdd = () => {\r\n    const selectedCities = selected.map(obj => {\r\n      return obj.id\r\n    })\r\n    setCityActive({\r\n      variables: {\r\n        id,\r\n        cities: selectedCities\r\n      },\r\n    })\r\n    setClear(clear + 1)\r\n  }\r\n\r\n  const handleChange = (_, value) => {\r\n    setSelected(value)\r\n  }\r\n\r\n  const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\n  const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\n  const deleteCityCompletely = (cities) => {\r\n    deleteCity({\r\n      variables: {\r\n        id,\r\n        cities: cities\r\n      }\r\n    })\r\n  }\r\n\r\n  const CityCard = ({ city, deleteCity }) => {\r\n    const handleDelete = () => {\r\n      deleteCity(city.id)\r\n    }\r\n    return (\r\n      <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n        <Paper className=\"city-card\">\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {city.title}\r\n          </Typography>\r\n          <Typography variant=\"subtitle2\" gutterBottom>\r\n            {city.category.title}\r\n          </Typography>\r\n          <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n            Население: {city.population}\r\n          </Typography>\r\n          <Grid container item justify=\"space-between\" className=\"card-service-buttons\">\r\n            <IconButton className=\"card-button\" aria-label=\"delete\" onClick={handleDelete}>\r\n              <DeleteIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <ConfirmDialog\r\n        open={delId}\r\n        confirm={handleDelConfirm}\r\n        close={() => setDelId(false)}\r\n        data={\r\n          {\r\n            title: 'Удалить населенный пункт?',\r\n            text: 'Внимание! Результаты опросов учитывают н.п. в которых они проводились, удаление приведет к потере части статистики и некорректности ее отображения.'\r\n          }\r\n        }\r\n      />\r\n      <div className=\"cities-service-zone\">\r\n        <Typography className=\"header\">Города в которых проводится опрос</Typography>\r\n        <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n          <Grid item xs={12} sm={8} md={6} lg={5}>\r\n            <Autocomplete\r\n              multiple\r\n              key={clear}\r\n              limitTags={3}\r\n              options={availableCities}\r\n              disableCloseOnSelect\r\n              clearOnEscape\r\n              onChange={handleChange}\r\n              getOptionLabel={(option) => option.title}\r\n              renderOption={(option, { selected }) => (\r\n                <React.Fragment>\r\n                  <Checkbox\r\n                    icon={icon}\r\n                    checkedIcon={checkedIcon}\r\n                    style={{ marginRight: 8 }}\r\n                    checked={selected}\r\n                  />\r\n                  {option.title}\r\n                </React.Fragment>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"outlined\" label=\"Добавьте город\" />\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4} md={6} lg={5}>\r\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={handleAdd} disabled={!selected.length}>\r\n              Добавить\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <Grid container spacing={3} xs={12} >\r\n        {citiesData.poll.cities.map((city, index) => (\r\n          <CityCard key={index} city={city} deleteCity={handleCityDelete} />\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default CitiesEditor","import React, { useState } from 'react'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nconst QuestionCard = ({ question, handleLimitInput }) => {\r\n  const [val, setVal] = useState(question.limit)\r\n\r\n  const handleKeyUp = (e) => {\r\n    if (e.keyCode === 13) e.currentTarget.blur()\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const currentValue = e.currentTarget.value\r\n    console.log(e);\r\n    if (currentValue < 1) {\r\n      setVal(1)\r\n    } else if (currentValue > 99) {\r\n      setVal(99)\r\n    } else {\r\n      setVal(currentValue)\r\n    }\r\n  }\r\n\r\n  const handleBlur = (e) => {\r\n    handleLimitInput({\r\n      id: question.id,\r\n      limit: val\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n      <Paper className=\"question-item\" elevation={2}>\r\n        <Grid item xs={12} sm container>\r\n          <Grid item xs container direction=\"column\" spacing={2} alignItems=\"flex-start\">\r\n            <Grid item xs>\r\n              <Tooltip title=\"Очередность отображения\" aria-label=\"add\">\r\n                <Typography variant=\"body2\" color=\"primary\">\r\n                  {question.order}\r\n                </Typography>\r\n              </Tooltip>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs container direction=\"column\" spacing={3} alignItems=\"flex-end\" >\r\n            <Grid item xs alignItems=\"center\" style={{ cursor: 'pointer' }}>\r\n              <Tooltip title=\"Меню. В разработке\" aria-label=\"add\">\r\n                <MoreVertIcon />\r\n              </Tooltip>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Tooltip title=\"Лимит ответов\" aria-label=\"add\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"question-limit-input\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                onKeyUp={handleKeyUp}\r\n                value={val}\r\n              />\r\n            </Tooltip>\r\n          </Grid>\r\n        </Grid>\r\n        <Typography className=\"question-title\">\r\n          {question.title.length > 160 ?\r\n            question.title.substring(0, 100) + ' ... ' + question.title.substring(question.title.length - 45) :\r\n            question.title\r\n          }\r\n        </Typography>\r\n\r\n      </Paper>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default QuestionCard","import { gql } from '@apollo/client'\r\n\r\nexport const pollQuery = gql`\r\n  query pollQuery($id: ID!) {\r\n    poll(id: $id) {\r\n      id\r\n      title\r\n      code\r\n      liter\r\n      questions {\r\n        id\r\n        title\r\n        limit\r\n        order\r\n        answers {\r\n          id\r\n          title\r\n          order\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const saveNewLimit = gql`\r\nmutation ($id: ID!, $limit: Int!) {\r\n  newLimit(id: $id, limit: $limit) {\r\n    id\r\n    limit\r\n  }\r\n}\r\n`\r\nexport const saveNewOrder = gql`\r\nmutation ($questions: [ReorderedArray]) {\r\n  newOrder(neworder: $questions) {\r\n    id\r\n    order\r\n  }\r\n}\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\r\nimport arrayMove from \"array-move\";\r\n\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport QuestionCard from '../../components/QuestionCard'\r\nimport { pollQuery } from \"./queries\"\r\nimport { saveNewLimit, saveNewOrder } from \"./mutations\"\r\n\r\nconst ReoderEditor = ({ id }) => {\r\n  const [noti, setNoti] = useState(false)\r\n  const [questions, setQuestions] = useState(null)\r\n  const [prevOrder, setPrevOrder] = useState(null)\r\n  const { loading: pollLoading, error: pollError, data } = useQuery(pollQuery, {\r\n    variables: { id },\r\n    onCompleted: () => {\r\n      const questions = data.poll.questions\r\n      console.log(questions);\r\n      setQuestions(questions.slice().sort((a, b) => (a.order > b.order) ? 1 : -1))\r\n    }\r\n  })\r\n  const [saveLimit, { loading: limitSaveLoading }] = useMutation(saveNewLimit, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить лимит не удалось. Смотрите консоль.'\r\n      })\r\n    }\r\n  })\r\n  const [saveOrder, { loading: saveOrderLoading }] = useMutation(saveNewOrder, {\r\n    onError: (e) => {\r\n      console.log(e);\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить порядок не удалось. Смотрите консоль.'\r\n      })\r\n    },\r\n    update: (cache, { data }) => {\r\n      const questions = data.newOrder\r\n      for (let i = 0; i < questions.length; i++) {\r\n        const id = questions[i].id\r\n        const dd = cache.data.data\r\n        for (let key in dd) {\r\n          if (dd[key].id === id) console.log(dd[key]);\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  if (pollLoading || !questions) return (\r\n    <LoadingState type=\"card\" />\r\n  )\r\n\r\n  if (pollError) {\r\n    console.log(JSON.stringify(pollError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (limitSaveLoading || saveOrderLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  const handleLimitInput = (inputData) => {\r\n    const id = inputData.id\r\n    const limit = +inputData.limit\r\n    setQuestions(questions.map(question => question.id === id ? { ...question, limit: limit } : question))\r\n    saveLimit({\r\n      variables: {\r\n        id,\r\n        limit\r\n      }\r\n    })\r\n  }\r\n\r\n  const onSortEnd = ({ oldIndex, newIndex }) => {\r\n    setPrevOrder({ ...questions })\r\n    console.log(oldIndex, newIndex);\r\n    if (oldIndex !== newIndex) {\r\n      const newArray = arrayMove(questions, oldIndex, newIndex)\r\n      let deltaArray = []\r\n      const newOrder = newArray.reduce((acum, val, index) => {\r\n        if (val.order === index + 1) {\r\n          acum.push(val)\r\n        } else {\r\n          deltaArray.push({\r\n            id: val.id,\r\n            order: index + 1\r\n          })\r\n          acum.push({ ...val, order: index + 1 })\r\n        }\r\n        return acum\r\n      }, [])\r\n      setQuestions(newOrder)\r\n      saveOrder({\r\n        variables: {\r\n          questions: deltaArray\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n  const SortableItem = SortableElement(({ question }) =>\r\n    <QuestionCard question={question} handleLimitInput={handleLimitInput} />\r\n  );\r\n\r\n  const SortableList = SortableContainer(({ questions }) => {\r\n    return (\r\n      <Grid container item xs={12} spacing={2}>\r\n        {questions.map((question, index) => (\r\n          <SortableItem key={`item-${question.id}`} index={index} question={question} />\r\n        ))}\r\n      </Grid>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n      <SortableList\r\n        questions={questions}\r\n        onSortEnd={onSortEnd}\r\n        axis=\"xy\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ReoderEditor","import React, { Fragment } from 'react'\r\n\r\nimport AdaptiveTabs from '../../components/AdaptiveTabs'\r\n\r\nimport CommonSetting from './containers/Common'\r\nimport ConfigEditor from './containers/ConfigEditor'\r\nimport DeletePoll from './containers/DeletePoll';\r\nimport CititesEditor from './containers/CitiesEditor';\r\nimport ReoderEditor from './containers/ReoderEditor';\r\n\r\nconst PollSettings = ({ id, code }) => {\r\n  const data = [\r\n    {\r\n      label: 'Общие',\r\n      component: <CommonSetting id={id} />\r\n    },\r\n    {\r\n      label: 'Порядок отображения',\r\n      component: <ReoderEditor id={id} />\r\n    },\r\n    {\r\n      label: 'Конфиг',\r\n      component: <ConfigEditor id={id} />\r\n    },\r\n    {\r\n      label: 'Города',\r\n      component: <CititesEditor id={id} />\r\n    },\r\n    {\r\n      label: 'Удаление',\r\n      component: <DeletePoll id={id} code={code} />\r\n    }\r\n  ]\r\n  return (\r\n    <Fragment>\r\n      <AdaptiveTabs data={data} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollSettings","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollSettings from '../modules/PollSettings'\r\n\r\nconst Settings = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Настройки опроса ` + code} />\r\n      <div>\r\n        <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n          <PollSettings id={id} code={code} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Settings","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`vertical-tabpanel-${index}`}\r\n      aria-labelledby={`vertical-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    'aria-controls': `vertical-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    display: 'flex',\r\n  },\r\n  tabs: {\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n  },\r\n}));\r\n\r\nconst PollFiles = ({ id }) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Tabs\r\n        orientation=\"vertical\"\r\n        variant=\"scrollable\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        className={classes.tabs}\r\n      >\r\n        <Tab label=\"Файлы\" {...a11yProps(0)} />\r\n      </Tabs>\r\n      <TabPanel value={value} index={0}>\r\n        Файлы опроса - {id}\r\n        <p>В РАЗРАБОТКЕ</p>\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PollFiles","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollFiles from '../modules/PollFiles'\r\n\r\nconst Attachment = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Файлы ` + code} />\r\n      <div style={{ paddingTop: '10px' }}>\r\n        <Container maxWidth=\"xl\">\r\n          <PollFiles id={id} />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Attachment","import React, { Fragment } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst PollWiki = () => {\r\n  return (\r\n    <Fragment>\r\n      <Grid container item>\r\n        WIKI\r\n      </Grid>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollWiki","import React, { Fragment } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollWiki from '../modules/PollWiki'\r\n\r\nconst Wiki = () => {\r\n  let { id, code } = useParams();\r\n\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Wiki ` + code} />\r\n      <Container maxWidth=\"lg\">\r\n        <PollWiki />\r\n      </Container>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Wiki","import { gql } from '@apollo/client'\r\n\r\nexport const GET_CITITES_WITH_CATEGORIES = gql`\r\nquery {\r\n  cities{\r\n    id\r\n    title\r\n    population\r\n    category {\r\n      id\r\n      title\r\n    }\r\n  }\r\n  cityCategories{\r\n    id\r\n    title\r\n  }\r\n}\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const CITY_SAVE_MUTATION = gql`\r\nmutation ($title: String!, $population: Int!, $category: String!) {\r\n  newCity(title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category {\r\n      id\r\n      title\r\n    }\r\n    population\r\n  }\r\n}\r\n`\r\nexport const CITY_EDIT_SAVE = gql`\r\nmutation ($id: String!, $title: String!, $population: Int!, $category: String!) {\r\n  cityEdit(id: $id, title: $title, population: $population, category: $category) {\r\n    id\r\n    title\r\n    category {\r\n      id\r\n      title\r\n    }\r\n    population\r\n  }\r\n}\r\n`\r\nexport const DELETE_CITY = gql`\r\nmutation ($id: String!) {\r\n  deleteCity(id: $id) {\r\n    id\r\n    title\r\n    category {\r\n      id\r\n      title\r\n    }\r\n    population\r\n  }\r\n}\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog'\r\n\r\nimport LoadingState from '../../../../components/LoadingState'\r\nimport ErrorState from '../../../../components/ErrorState'\r\nimport SystemNoti from '../../../../components/SystemNoti'\r\nimport LoadingStatus from '../../../../components/LoadingStatus'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_CITITES_WITH_CATEGORIES } from './queries'\r\nimport { CITY_SAVE_MUTATION, CITY_EDIT_SAVE, DELETE_CITY } from './mutations'\r\n\r\nconst Cities = () => {\r\n  const [noti, setNoti] = useState(false)\r\n\r\n  const [delId, setDelId] = useState(false)\r\n  const [cityAdd, setCityAdd] = useState(false)\r\n  const {\r\n    data: citiesData,\r\n    loading: citiesLoading,\r\n    error: citiesError\r\n  } = useQuery(GET_CITITES_WITH_CATEGORIES)\r\n\r\n  const [saveCity, { loading: saveCityLoading }] = useMutation(CITY_SAVE_MUTATION, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Сохранить новый город не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data: { newCity } }) => cache.writeQuery({\r\n      query: GET_CITITES_WITH_CATEGORIES,\r\n      data: {\r\n        cities: [\r\n          ...citiesData.cities,\r\n          newCity\r\n        ]\r\n      }\r\n    })\r\n  })\r\n\r\n  const [saveCityEdit, { loading: saveCityEditLoading }] = useMutation(CITY_EDIT_SAVE, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Обновить информацию не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data: { cityEdit } }) => cache.writeQuery({\r\n      query: GET_CITITES_WITH_CATEGORIES,\r\n      data: {\r\n        cities: citiesData.cities.map(city => city.id === cityEdit.id ? cityEdit : city)\r\n      }\r\n    })\r\n  })\r\n\r\n  const [\r\n    deleteCity,\r\n    { loading: deleteCityLoading }\r\n  ] = useMutation(DELETE_CITY, {\r\n    onError: (e) => {\r\n      setNoti({\r\n        type: 'error',\r\n        text: 'Удалить город не удалось. Смотрите консоль.'\r\n      })\r\n      console.log(e);\r\n    },\r\n    update: (cache, { data: { deleteCity } }) => cache.writeQuery({\r\n      query: GET_CITITES_WITH_CATEGORIES,\r\n      data: {\r\n        cities: citiesData.cities.filter(city => city.id === deleteCity.id ? false : true)\r\n      }\r\n    })\r\n  })\r\n\r\n  const CityCard = ({ city, save, deleteCity }) => {\r\n    const [editting, setEditting] = useState(false)\r\n\r\n    const handleEdit = () => {\r\n      setEditting(true)\r\n    }\r\n\r\n    const handleSave = (data) => {\r\n      save({\r\n        ...data,\r\n        id: city.id\r\n      })\r\n    }\r\n\r\n    const handleCloseEdit = () => {\r\n      setEditting(false)\r\n    }\r\n\r\n    const handleDelete = () => {\r\n      deleteCity(city.id)\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        {!editting ?\r\n          <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n            <Paper className=\"city-card\">\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                {city.title}\r\n              </Typography>\r\n              <Typography variant=\"subtitle2\" gutterBottom>\r\n                {city.category.title}\r\n              </Typography>\r\n              <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n                Население: {city.population}\r\n              </Typography>\r\n              <Grid container item justify=\"space-between\" className=\"card-service-buttons\">\r\n                <IconButton className=\"card-button\" aria-label=\"delete\" onClick={handleDelete}>\r\n                  <DeleteIcon fontSize=\"small\" />\r\n                </IconButton>\r\n                <IconButton className=\"card-button\" aria-label=\"delete\" onClick={handleEdit}>\r\n                  <EditIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n          : <CityAdd city={city} save={handleSave} close={handleCloseEdit} />\r\n        }\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  const CityAdd = ({ save, close, city }) => {\r\n    const [edit, setEdit] = useState(false)\r\n    const [title, setTitle] = useState(city ? city.title : '')\r\n    const [population, setPopulation] = useState(city ? city.population : '')\r\n    const [category, setCategory] = useState(city ? city.category.id : '')\r\n\r\n    const handleSubmit = (e) => {\r\n      e.preventDefault()\r\n      const newCity = {\r\n        title,\r\n        population: +population,\r\n        category\r\n      }\r\n      console.log(newCity);\r\n      save(newCity)\r\n    }\r\n\r\n    const titleHandle = (e) => {\r\n      setEdit(true)\r\n      setTitle(e.currentTarget.value)\r\n    }\r\n    const popHandle = (e) => {\r\n      setEdit(true)\r\n      setPopulation(e.currentTarget.value)\r\n    }\r\n    const catHandle = (e) => {\r\n      setEdit(true)\r\n      setCategory(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n      <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n        <Paper className=\"add-city-card\">\r\n          <IconButton className=\"add-dialog-close\" aria-label=\"delete\" size=\"small\" onClick={close}>\r\n            <CloseIcon fontSize=\"inherit\" />\r\n          </IconButton>\r\n          <form onSubmit={handleSubmit}>\r\n            <TextField\r\n              className=\"add-city-title\"\r\n              required\r\n              defaultValue={city ? city.title : ''}\r\n              helperText=\"Название н.п.\"\r\n              onChange={titleHandle}\r\n            />\r\n            <TextField\r\n              className=\"add-city-population\"\r\n              type=\"number\"\r\n              required\r\n              defaultValue={city ? city.population : ''}\r\n              onChange={popHandle}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              helperText=\"Численность, чел.\"\r\n            />\r\n            <TextField\r\n              select\r\n              required\r\n              onChange={catHandle}\r\n              defaultValue={city ? city.category.id : ''}\r\n              SelectProps={{\r\n                native: true,\r\n              }}\r\n              helperText=\"Категория н.п.\"\r\n            >\r\n              <option key={0} disabled selected value=\"\"></option>\r\n              {citiesData.cityCategories.map((option) => (\r\n                <option key={option.id} value={option.id}>\r\n                  {option.title}\r\n                </option>\r\n              ))}\r\n            </TextField>\r\n            <Button\r\n              className=\"city-dialog-save\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              startIcon={<SaveIcon />}\r\n              type=\"submit\"\r\n              disabled={!edit}\r\n            >\r\n              Save\r\n          </Button>\r\n          </form>\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const handleAdd = () => {\r\n    setCityAdd(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setCityAdd(false)\r\n  }\r\n\r\n  async function handleSaveNew(newData) {\r\n    await saveCity({\r\n      variables: { ...newData }\r\n    })\r\n    setCityAdd(false)\r\n  }\r\n\r\n  async function handleSaveEdit(cityData) {\r\n    await saveCityEdit({\r\n      variables: { ...cityData }\r\n    })\r\n  }\r\n\r\n  async function deleteCityCompletely(id) {\r\n    await deleteCity({\r\n      variables: { id }\r\n    })\r\n  }\r\n\r\n  const handleCityDelete = (id) => {\r\n    setDelId(id)\r\n  }\r\n\r\n  const handleDelConfirm = () => {\r\n    deleteCityCompletely(delId)\r\n    setDelId(false)\r\n  }\r\n\r\n  const handleDelDialogClose = () => {\r\n    setDelId(false)\r\n  }\r\n\r\n  if (citiesLoading) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (citiesError) {\r\n    console.log(JSON.stringify(citiesError));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (saveCityLoading || saveCityEditLoading || deleteCityLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n\r\n      <div className=\"cities-service-zone\">\r\n        <Typography className=\"header\">Города проведения опросов</Typography>\r\n        <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={handleAdd}>\r\n          Добавить\r\n        </Button>\r\n      </div>\r\n      <ConfirmDialog\r\n        open={delId}\r\n        confirm={handleDelConfirm}\r\n        close={handleDelDialogClose}\r\n        data={\r\n          {\r\n            title: 'Удалить населенный пункт?',\r\n            text: 'Внимание! Результаты опросов учитывают н.п. в которых они проводились, удаление приведет к потере части статистики и некорректности ее отображения.'\r\n          }\r\n        }\r\n      />\r\n      <Grid container spacing={3} xs={12}>\r\n        {cityAdd &&\r\n          <CityAdd save={handleSaveNew} close={handleClose} />\r\n        }\r\n        {citiesData.cities.map((city, index) => (\r\n          <CityCard city={city} save={handleSaveEdit} deleteCity={handleCityDelete} />\r\n        ))}\r\n      </Grid>\r\n      <p></p>\r\n      <span>Статус</span>\r\n      <Divider />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Cities","import React, { Fragment } from 'react'\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Sample = () => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"sample-service-zone\">\r\n        <Typography className=\"header\">Конструктор выборки</Typography>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Sample","import React from 'react'\r\n\r\nimport AdaptiveTabs from '../../components/AdaptiveTabs'\r\n\r\nimport Cities from './containers/Cities'\r\nimport Sample from './containers/Sample'\r\n\r\nconst PollAppSettings = () => {\r\n  const data = [\r\n    {\r\n      label: 'Города',\r\n      component: <Cities />\r\n    },\r\n    {\r\n      label: 'Выборка',\r\n      component: <Sample />\r\n    },\r\n    {\r\n      label: 'Пол',\r\n      component: 'ПОЛ'\r\n    },\r\n    {\r\n      label: 'Возраст',\r\n      component: 'Возраст'\r\n    },\r\n    {\r\n      label: 'Статус',\r\n      component: 'Статус'\r\n    },\r\n    {\r\n      label: 'ТНП',\r\n      component: 'ТНП'\r\n    }\r\n  ]\r\n  return (\r\n    <AdaptiveTabs data={data} />\r\n  )\r\n}\r\n\r\nexport default PollAppSettings","import React, { Fragment } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport PollAppSettings from '../modules/PollAppSettings'\r\n\r\nconst PollAppSettingsPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Настройки подсистемы`} />\r\n      <div>\r\n        <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n          <PollAppSettings />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PollAppSettingsPage","import React, { Fragment, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nconst UserAddDialog = ({ open, close, saveNewUser, selects }) => {\r\n  const [userData, setUserData] = useState()\r\n\r\n  const save = (e) => {\r\n    e.preventDefault()\r\n    saveNewUser(userData)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={close} aria-labelledby=\"form-dialog-title\">\r\n        <form onSubmit={save}>\r\n          <DialogTitle>Добавление пользователя</DialogTitle>\r\n          <DialogContent>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пользователь\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      username: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: Иванов И.И.\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Логин\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      login: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: IvanovII\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      password: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Не менее восьми символов\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"Повторите пароль\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Статус</InputLabel>\r\n                  <Select\r\n                    required\r\n                    native\r\n                    label=\"Статус\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        status: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userStatus.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите социальный статус</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Права</InputLabel>\r\n                  <Select\r\n                    native\r\n                    label=\"Права\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        rights: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userRights.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите права поьзователя</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <p></p>\r\n          <DialogActions>\r\n            <Button variant=\"contained\" onClick={close}>\r\n              Отмена\r\n          </Button>\r\n            <Button variant=\"contained\" type=\"submit\" color=\"primary\">\r\n              Добавить\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default UserAddDialog","import React, { Fragment, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nconst UserUpdateDialog = ({ data, selects, open, close, updateUser }) => {\r\n  const [userData, setUserData] = useState(false)\r\n\r\n  const save = (e) => {\r\n    e.preventDefault()\r\n    updateUser({\r\n      id: data.id,\r\n      data: userData\r\n    })\r\n    setUserData(false)\r\n    close()\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={close} aria-labelledby=\"form-dialog-title\">\r\n        <form onSubmit={save}>\r\n          <DialogTitle>Обновить данные</DialogTitle>\r\n          <DialogContent>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пользователь\"\r\n                  variant=\"outlined\"\r\n                  defaultValue={data.username}\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      username: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: Иванов И.И.\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Логин\"\r\n                  variant=\"outlined\"\r\n                  defaultValue={data.login}\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      login: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Используйте формат: IvanovII\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Статус</InputLabel>\r\n                  <Select\r\n                    required\r\n                    native\r\n                    defaultValue={data.status ? data.status.id : ''}\r\n                    label=\"Статус\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        status: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userStatus.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите социальный статус</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl required variant=\"outlined\" fullWidth=\"true\">\r\n                  <InputLabel htmlFor=\"outlined-age-native-simple\">Права</InputLabel>\r\n                  <Select\r\n                    native\r\n                    defaultValue={data.rights ? data.rights.id : ''}\r\n                    label=\"Права\"\r\n                    onChange={(e) => setUserData(\r\n                      {\r\n                        ...userData,\r\n                        rights: e.currentTarget.value\r\n                      }\r\n                    )}\r\n                    inputProps={{\r\n                      name: 'age',\r\n                      id: 'outlined-age-native-simple',\r\n                    }}\r\n                  >\r\n                    <option aria-label=\"None\" selected disabled=\"true\" value=\"\" />\r\n                    {selects.userRights.map(obj => <option value={obj.id}>{obj.title}</option>)}\r\n                  </Select>\r\n                  <FormHelperText>Укажите права поьзователя</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <p></p>\r\n          <DialogActions>\r\n            <Button variant=\"contained\" onClick={close}>\r\n              Отмена\r\n          </Button>\r\n            <Button variant=\"contained\" type=\"submit\" color=\"primary\">\r\n              Обновить\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default UserUpdateDialog","import React, { Fragment, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst PassResetDialog = ({ data, open, close, passReset }) => {\r\n  const [userData, setUserData] = useState(false)\r\n\r\n  const save = (e) => {\r\n    e.preventDefault()\r\n    passReset({\r\n      id: data.id,\r\n      password: userData.password\r\n    })\r\n    setUserData(false)\r\n    close()\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog open={open} onClose={close} aria-labelledby=\"form-dialog-title\">\r\n        <form onSubmit={save}>\r\n          <DialogTitle>Установка пароля</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              Установите новый пароль пользователя - {data.username}\r\n            </DialogContentText>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setUserData(\r\n                    {\r\n                      ...userData,\r\n                      password: e.currentTarget.value\r\n                    }\r\n                  )}\r\n                  helperText=\"Не менее восьми символов\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth=\"true\"\r\n                  label=\"Пароль\"\r\n                  type=\"password\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"Повторите пароль\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <p></p>\r\n          <DialogActions>\r\n            <Button variant=\"contained\" onClick={close}>\r\n              Отмена\r\n          </Button>\r\n            <Button variant=\"contained\" type=\"submit\" color=\"primary\">\r\n              Сохранить\r\n          </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PassResetDialog","import React, { Fragment, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Button from '@material-ui/core/Button';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\n\r\nimport ConfirmDialog from '../../../../components/ConfirmDialog';\r\nimport UserAddDialog from '../UserAddDialog'\r\nimport UserUpdateDialog from '../UserUpdateDialog'\r\nimport PassResetDialog from '../PassResetDialog'\r\n\r\n// const users = [\r\n//   {\r\n//     id: '1111',\r\n//     username: 'Петров И.В.',\r\n//     login: 'PtrovIV',\r\n//     status: 'военнослужащий',\r\n//     rights: 'Пользователь'\r\n//   },\r\n//   {\r\n//     id: '22222',\r\n//     username: 'Иванов С.В.',\r\n//     login: 'IvanovSV',\r\n//     status: 'военнослужащий',\r\n//     rights: 'Пользователь'\r\n//   },\r\n//   {\r\n//     id: '33333',\r\n//     username: 'Сидорова С.В.',\r\n//     login: 'SidorovaSV',\r\n//     status: 'гражданский служащий',\r\n//     rights: 'Админ'\r\n//   },\r\n// ]\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'username', numeric: false, disablePadding: true, label: 'Пользователь', sort: true },\r\n  { id: 'login', numeric: false, disablePadding: false, label: 'Логин', sort: true },\r\n  { id: 'status', numeric: false, disablePadding: false, label: 'Статус', sort: true },\r\n  { id: 'rights', numeric: false, disablePadding: false, label: 'Права', sort: true },\r\n  { id: '', numeric: true, disablePadding: true, label: 'Action', sort: false }\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='center'\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n          >{headCell.sort ? (\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n              hideSortIcon={headCell.sort ? false : true}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n\r\n          ) : (<span>{headCell.label}</span>)}\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n      }\r\n      : {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n      },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, deleteDelete, setUserAddOpen } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} выбрано\r\n        </Typography>\r\n      ) : (\r\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n            Пользователи\r\n          </Typography>\r\n        )\r\n      }\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Удалить\">\r\n          <IconButton aria-label=\"delete\" onClick={deleteDelete}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n          <Tooltip title=\"Добавить пользователя\">\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => setUserAddOpen(true)}>\r\n              Добавить\r\n            </Button>\r\n          </Tooltip>\r\n        )\r\n      }\r\n    </Toolbar >\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nconst UsersTable = ({ users, addNewUser, deleteUsers, updateUser, resetPassword, selects }) => {\r\n  const classes = useStyles();\r\n\r\n  const [deleteDialog, setDeleteDialog] = useState(false)\r\n  const [userAddOpen, setUserAddOpen] = useState(false)\r\n  const [userUpdate, setUserUpdate] = useState(false)\r\n  const [passReset, setPassReset] = useState(false)\r\n\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState('calories');\r\n  const [selected, setSelected] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = users.map((n) => n.id);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (_, id) => {\r\n    const selectedIndex = selected.indexOf(id);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleRowEdit = (_, row) => {\r\n    setUserUpdate(row)\r\n  }\r\n\r\n  const handlePassReset = (_, row) => {\r\n    setPassReset(row)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const handleDelConfirm = () => {\r\n    deleteUsers(selected)\r\n    setDeleteDialog(false)\r\n    setSelected([])\r\n  }\r\n\r\n  const saveNewUser = (data) => {\r\n    // TODO: \"Нужна заставка ожидания\"\r\n    addNewUser(data)\r\n    setUserAddOpen(false)\r\n  }\r\n\r\n  const hanleUserUpdate = ({ id, data }) => {\r\n    updateUser({\r\n      id,\r\n      data\r\n    })\r\n  }\r\n\r\n  const handlePasswordReset = ({ id, password }) => {\r\n    resetPassword({\r\n      id, password\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <UserAddDialog open={userAddOpen} selects={selects} close={() => setUserAddOpen(false)} saveNewUser={saveNewUser} />\r\n      <UserUpdateDialog data={userUpdate} selects={selects} open={userUpdate} close={() => setUserUpdate(false)} updateUser={hanleUserUpdate} />\r\n      <PassResetDialog data={passReset} open={passReset} close={() => setPassReset(false)} passReset={handlePasswordReset} />\r\n      <ConfirmDialog\r\n        open={deleteDialog}\r\n        confirm={handleDelConfirm}\r\n        close={() => setDeleteDialog(false)}\r\n        data={\r\n          {\r\n            title: 'Удалить пользователей(я)?',\r\n            text: 'Внимание! Это операция не может быть отменена. Часть данных приложения привязаны к учетной записи, будьте внимательны.'\r\n          }\r\n        }\r\n      />\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar numSelected={selected.length} deleteDelete={setDeleteDialog} setUserAddOpen={setUserAddOpen} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={users.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(users, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.id);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          onClick={(event) => handleClick(event, row.id)}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell align=\"center\" component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row.username}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.login}</TableCell>\r\n                      <TableCell align=\"center\">{row.status ? row.status.title : '-'}</TableCell>\r\n                      <TableCell align=\"center\">{row.rights ? row.rights.title : '-'}</TableCell>\r\n                      <TableCell align=\"center\" padding=\"none\">\r\n                        <Tooltip title=\"Обновить\">\r\n                          <IconButton\r\n                            onClick={(event) => handleRowEdit(event, row)}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Сбросить пароль\">\r\n                          <IconButton\r\n                            onClick={(event) => handlePassReset(event, row)}\r\n                          >\r\n                            <LockOpenIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={users.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          labelRowsPerPage=\"Строк:\"\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default UsersTable","import { gql } from '@apollo/client'\r\n\r\nexport const GET_ALL_USERS = gql`\r\n  query {\r\n    users {\r\n      id\r\n      username\r\n      login\r\n      status {\r\n        id\r\n        title\r\n      }\r\n      rights {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_AUTH_SELECTS = gql`\r\n  query {\r\n    userRights {\r\n      id\r\n      title\r\n    }\r\n    userStatus {\r\n      id\r\n      title\r\n    }\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const ADD_NEW_USER = gql`\r\n  mutation($user: UserDataCreate!) {\r\n    addNewUser(user: $user) {\r\n      id\r\n      username\r\n      login\r\n      status {\r\n        id\r\n        title\r\n      }\r\n      rights {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const UPDATE_USER = gql`\r\n  mutation($id: String, $data: UserDataUpdate) {\r\n    updateUser(id: $id, data: $data) {\r\n      id\r\n      username\r\n      login\r\n      status {\r\n        id\r\n        title\r\n      }\r\n      rights {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const DELETE_USERS = gql`\r\n  mutation($users: [String]) {\r\n    deleteUsers(users: $users) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const RESET_PASSWORD = gql`\r\n  mutation($id: String, $password: String) {\r\n    resetPassword(id: $id, password: $password)\r\n  }\r\n`","import React, { Fragment, useState } from 'react'\r\n\r\nimport UsersTable from './components/UsersTable'\r\n\r\nimport LoadingState from '../../components/LoadingState'\r\nimport ErrorState from '../../components/ErrorState'\r\nimport SystemNoti from '../../components/SystemNoti'\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\n\r\nimport { useQuery } from '@apollo/client'\r\nimport { useMutation } from '@apollo/react-hooks'\r\n\r\nimport { GET_ALL_USERS, GET_AUTH_SELECTS } from './queries'\r\nimport { ADD_NEW_USER, UPDATE_USER, DELETE_USERS, RESET_PASSWORD } from './mutations'\r\n\r\nconst Users = () => {\r\n  const [noti, setNoti] = useState(false)\r\n  const {\r\n    loading: dataLoading,\r\n    error: dataError,\r\n    data\r\n  } = useQuery(GET_ALL_USERS)\r\n  const {\r\n    loading: selectsLoading,\r\n    error: selectsError,\r\n    data: selects\r\n  } = useQuery(GET_AUTH_SELECTS)\r\n\r\n  const [deleteUsers, { loading: deleteLoading }] = useMutation(DELETE_USERS,\r\n    {\r\n      onError: (e) => {\r\n        setNoti({\r\n          type: 'error',\r\n          text: 'Удалить не удалось. Смотрите консоль.'\r\n        })\r\n        console.log(e);\r\n      },\r\n      update: (cache, { data: { deleteUsers } }) => cache.writeQuery({\r\n        query: GET_ALL_USERS,\r\n        data: {\r\n          users: data.users.filter(user => {\r\n            for (let i = 0; i < deleteUsers.length; i++) {\r\n              if (deleteUsers[i].id === user.id) return false\r\n            }\r\n            return true\r\n          })\r\n        }\r\n      })\r\n    }\r\n  )\r\n  const [addUser, { loading: addLoading }] = useMutation(ADD_NEW_USER,\r\n    {\r\n      onError: (e) => {\r\n        setNoti({\r\n          type: 'error',\r\n          text: 'Добавить не удалось. Смотрите консоль.'\r\n        })\r\n        console.log(e);\r\n      },\r\n      update: (cache, { data: { addNewUser } }) => cache.writeQuery({\r\n        query: GET_ALL_USERS,\r\n        data: {\r\n          users: [\r\n            ...data.users,\r\n            addNewUser\r\n          ]\r\n        }\r\n      })\r\n    }\r\n  )\r\n\r\n  const [updateUser, { loading: updateLoading }] = useMutation(UPDATE_USER,\r\n    {\r\n      onError: (e) => {\r\n        setNoti({\r\n          type: 'error',\r\n          text: 'Обновить не удалось. Смотрите консоль.'\r\n        })\r\n        console.log(e);\r\n      },\r\n      update: (cache, { data: { updateUser } }) => cache.writeQuery({\r\n        query: GET_ALL_USERS,\r\n        data: {\r\n          users: data.users.map(user => user.id === updateUser.id ? updateUser : user)\r\n        }\r\n      })\r\n    }\r\n  )\r\n  const [resetPassword] = useMutation(RESET_PASSWORD)\r\n\r\n  if (dataLoading || selectsLoading) return (\r\n    <LoadingState />\r\n  )\r\n\r\n  if (dataError || selectsError) {\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-то пошло не так\"\r\n        description=\"Не удалось загрузить критические данные. Смотрите консоль\"\r\n      />\r\n    )\r\n  }\r\n\r\n  const addNewUser = (data) => {\r\n    addUser({\r\n      variables: {\r\n        user: data\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleUsersDelete = (data) => {\r\n    deleteUsers({\r\n      variables: {\r\n        users: data\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleUserUpdate = ({ id, data }) => {\r\n    updateUser({\r\n      variables: {\r\n        id,\r\n        data\r\n      }\r\n    })\r\n  }\r\n\r\n  const resetPass = ({ id, password }) => {\r\n    resetPassword({\r\n      variables: {\r\n        id,\r\n        password\r\n      }\r\n    })\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (deleteLoading) return <LoadingStatus />\r\n    if (addLoading) return <LoadingStatus />\r\n    if (updateLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <SystemNoti\r\n        open={noti}\r\n        text={noti ? noti.text : \"\"}\r\n        type={noti ? noti.type : \"\"}\r\n        close={() => setNoti(false)}\r\n      />\r\n      <Loading />\r\n\r\n      <UsersTable\r\n        users={data.users}\r\n        selects={selects}\r\n        addNewUser={addNewUser}\r\n        deleteUsers={handleUsersDelete}\r\n        updateUser={handleUserUpdate}\r\n        resetPassword={resetPass}\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Users","import React, { Fragment } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\nimport SettingBar from '../components/SettingBar'\r\nimport Users from '../modules/Users'\r\n\r\nconst UsersPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <SettingBar title={`Пользователи системы`} />\r\n      <div style={{ paddingTop: '10px' }}>\r\n        <Container maxWidth=\"lg\">\r\n          <Users />\r\n        </Container>\r\n      </div>\r\n    </Fragment >\r\n  )\r\n}\r\n\r\nexport default UsersPage","import React, { Fragment } from 'react';\r\nimport ErrorState from '../components/ErrorState'\r\n\r\n\r\n// import { ReactComponent as ErrorIllustration } from \"../../illustrations/error.svg\";\r\n\r\n\r\nconst NotFoundPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <ErrorState\r\n        title=\"404 Страница не найдена\"\r\n        description=\"Вы заблудились. Проверьте адрес\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default NotFoundPage;","import React from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\n\r\nimport {\r\n  HomePage,\r\n  DrivePage,\r\n  ResultsPage,\r\n  AnalyzePage,\r\n  SettingsPage,\r\n  TesterPage,\r\n  AttachmentPage,\r\n  WikiPage,\r\n  PollAppSettingsPage,\r\n  UsersPage,\r\n  NotFoundPage\r\n} from '../../pages'\r\n\r\nconst Router = () => {\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path={\"/\"} exact component={HomePage} />\r\n        <Route path={\"/settings/users\"} exact component={UsersPage} />\r\n        <Route path={\"/results/:id/:code\"} component={ResultsPage} />\r\n        <Route path={\"/poll-settings/:id/:code\"} component={SettingsPage} />\r\n        <Route path={\"/drive/:id/:code\"} component={DrivePage} />\r\n        <Route path={\"/analyze\"} component={AnalyzePage} />\r\n        <Route path={\"/attachment/:id/:code\"} component={AttachmentPage} />\r\n        <Route path={\"/poll-wiki/:id/:code\"} component={WikiPage} />\r\n        <Route path={\"/poll-app-settings\"} component={PollAppSettingsPage} />\r\n        <Route path={\"/tester\"} component={TesterPage} />\r\n        <Route component={NotFoundPage} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default Router","import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      {'РИАЦi51' + ' '}\r\n      {new Date().getFullYear()}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  forget: {\r\n    cursor: 'pointer'\r\n  }\r\n}));\r\n\r\nconst SignIn = ({ onLogin, userError, passwordError }) => {\r\n  const [login, setlogin] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const classes = useStyles();\r\n\r\n  const handleName = (e) => {\r\n    setlogin(e.target.value)\r\n  }\r\n\r\n  const handlePassword = (e) => {\r\n    setPassword(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (login || password)\r\n      onLogin({\r\n        login,\r\n        password\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Войдите в систему\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            error={!!userError}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"login\"\r\n            label=\"Логин\"\r\n            name=\"login\"\r\n            autoComplete=\"login\"\r\n            autoFocus\r\n            onChange={handleName}\r\n            helperText={userError}\r\n\r\n          />\r\n          <TextField\r\n            error={passwordError}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Пароль\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            onChange={handlePassword}\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n            label=\"Запомнить меня\"\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={handleSubmit}\r\n          >\r\n            Войти\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <Box >\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\nexport default SignIn","import { gql } from '@apollo/client';\r\n\r\nexport const SIGNIN_MUTATION = gql`\r\n  mutation signin(\r\n    $login: String!,\r\n    $password: String!\r\n  ) {\r\n    signin(\r\n      login: $login,\r\n      password: $password\r\n    ) {\r\n      user {\r\n        id\r\n        login\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SIGNUP_MUTATION = gql`\r\n  mutation signup(\r\n    $login: String!,\r\n    $password: String!\r\n  ) {\r\n    signup(\r\n      login: $login,\r\n      password: $password\r\n    ) {\r\n      user {\r\n        id\r\n        login\r\n      }\r\n    }\r\n  }\r\n\r\n`","import React, { Fragment, useState } from 'react';\r\n\r\nimport './App.scss';\r\nimport Router from '../Router'\r\n\r\nimport SignInForm from '../../components/SignInForm'\r\n\r\nimport ErrorState from '../../components/ErrorState'\r\nimport LoadingSate from '../../components/LoadingState'\r\nimport LoadingStatus from '../../components/LoadingStatus'\r\n\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { CURRENT_USER_QUERY } from './queries';\r\nimport { SIGNIN_MUTATION } from './mutations';\r\n\r\n\r\nconst App = () => {\r\n  const { loading, error, data } = useQuery(CURRENT_USER_QUERY);\r\n  const [passwordError, setPasswordError] = useState(null)\r\n  const [userError, setUserError] = useState(null)\r\n\r\n  const [signin, { loading: signinLoading }] = useMutation(\r\n    SIGNIN_MUTATION,\r\n    {\r\n      onError: (e) => {\r\n        setUserError('Неправильный логин или пароль')\r\n        setPasswordError(true)\r\n      },\r\n      update: (cache, { data: { signin } }) => cache.writeQuery({\r\n        query: CURRENT_USER_QUERY,\r\n        data: { currentUser: signin.user },\r\n      }),\r\n    }\r\n  )\r\n\r\n  if (loading) return <LoadingSate />\r\n\r\n  if (error) {\r\n    console.log(JSON.stringify(error));\r\n    return (\r\n      <ErrorState\r\n        title=\"Что-пошло не так\"\r\n        description=\"Приложение не хочет стартовать, смотрите консоль!\"\r\n      />\r\n    )\r\n  };\r\n\r\n  const handleLogin = (data) => {\r\n    signin({ variables: data })\r\n  }\r\n\r\n  const Loading = () => {\r\n    if (signinLoading) return <LoadingStatus />\r\n    return null\r\n  }\r\n\r\n\r\n  if (!!data.currentUser) {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"App\">\r\n          <Loading />\r\n          <Router />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n  return <div>\r\n    <Loading />\r\n    <SignInForm onLogin={handleLogin} userError={userError} passwordError={passwordError} />\r\n  </div>\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport { mainUrl } from './mainconfig'\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { cache } from './cache'\r\n\r\nimport App from './containers/App/App';\r\n\r\n// const cache = new InMemoryCache()\r\n\r\nconst client = new ApolloClient({\r\n  uri: mainUrl + '/graphql',\r\n  cache,\r\n  credentials: 'include',\r\n  connectToDevTools: true\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}